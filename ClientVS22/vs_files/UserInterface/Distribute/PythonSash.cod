; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

	TITLE	e:\metin2_server\solwaynesf v6\clientvs22\vs_files\userinterface\distribute\pythonsash.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BB@JNNNKLPA@SendCloseRequest@		; `string'
PUBLIC	??_C@_01OCOKONAJ@L@				; `string'
PUBLIC	??_C@_06MEPBJJFP@Remove@			; `string'
PUBLIC	??_C@_03LDFMNCOE@Add@				; `string'
PUBLIC	??_C@_0BA@HGMKPIDK@GetAttachedItem@		; `string'
PUBLIC	??_C@_08LIIADGDC@GetPrice@			; `string'
PUBLIC	??_C@_0BC@HOMOJNGO@SendRefineRequest@		; `string'
PUBLIC	??_C@_0O@PHHGLLGO@GetResultItem@		; `string'
PUBLIC	??_C@_0BC@IECALNLB@ABSORPTION_SOCKET@		; `string'
PUBLIC	??_C@_04PPKGDFDN@sash@				; `string'
PUBLIC	??_C@_0BC@MMHEJGIM@CLEAN_ATTR_VALUE0@		; `string'
PUBLIC	??_C@_0BA@OMEMJIA@ABSORBED_SOCKET@		; `string'
PUBLIC	??_C@_0BH@GIMJACMK@CLEAN_ATTR_VALUE_FIELD@	; `string'
PUBLIC	??_C@_0BF@EEPIJCBJ@WINDOW_MAX_MATERIALS@	; `string'
PUBLIC	??_C@_0M@KGAHGOKL@LIMIT_RANGE@			; `string'
PUBLIC	??_R2?$CSingleton@VCPythonSash@@@@8		; CSingleton<CPythonSash>::`RTTI Base Class Array'
PUBLIC	??_R2CPythonSash@@8				; CPythonSash::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPythonSash@@8			; CPythonSash::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCPythonSash@@@@8	; CSingleton<CPythonSash>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCPythonSash@@@@@8		; CSingleton<CPythonSash> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCPythonSash@@@@8		; CSingleton<CPythonSash>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVCPythonSash@@@8				; CPythonSash `RTTI Type Descriptor'
PUBLIC	??_R3CPythonSash@@8				; CPythonSash::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4CPythonSash@@6B@				; CPythonSash::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CSingleton@VCPythonSash@@@@6B@		; CSingleton<CPythonSash>::`RTTI Complete Object Locator'
PUBLIC	??_7?$CSingleton@VCPythonSash@@@@6B@		; CSingleton<CPythonSash>::`vftable'
PUBLIC	??_7CPythonSash@@6B@				; CPythonSash::`vftable'
;	COMDAT ??_7CPythonSash@@6B@
CONST	SEGMENT
??_7CPythonSash@@6B@ DD FLAT:??_R4CPythonSash@@6B@	; CPythonSash::`vftable'
	DD	FLAT:??_ECPythonSash@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ?functions@?1??initSash@@YAXXZ@4PAUPyMethodDef@@A
_DATA	SEGMENT
?functions@?1??initSash@@YAXXZ@4PAUPyMethodDef@@A DD FLAT:??_C@_0BB@JNNNKLPA@SendCloseRequest@ ; `initSash'::`2'::functions
	DD	FLAT:?SendSashCloseRequest@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_03LDFMNCOE@Add@
	DD	FLAT:?SendSashAdd@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_06MEPBJJFP@Remove@
	DD	FLAT:?SendSashRemove@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_08LIIADGDC@GetPrice@
	DD	FLAT:?GetSashPrice@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BA@HGMKPIDK@GetAttachedItem@
	DD	FLAT:?GetSashAttachedItem@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0O@PHHGLLGO@GetResultItem@
	DD	FLAT:?GetSashResultItem@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BC@HOMOJNGO@SendRefineRequest@
	DD	FLAT:?SendSashRefineRequest@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
_DATA	ENDS
;	COMDAT ??_7?$CSingleton@VCPythonSash@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCPythonSash@@@@6B@ DD FLAT:??_R4?$CSingleton@VCPythonSash@@@@6B@ ; CSingleton<CPythonSash>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCPythonSash@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4?$CSingleton@VCPythonSash@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCPythonSash@@@@6B@ DD 00H		; CSingleton<CPythonSash>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCPythonSash@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCPythonSash@@@@8
rdata$r	ENDS
;	COMDAT ??_R4CPythonSash@@6B@
rdata$r	SEGMENT
??_R4CPythonSash@@6B@ DD 00H				; CPythonSash::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPythonSash@@@8
	DD	FLAT:??_R3CPythonSash@@8
rdata$r	ENDS
;	COMDAT ??_R3CPythonSash@@8
rdata$r	SEGMENT
??_R3CPythonSash@@8 DD 00H				; CPythonSash::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CPythonSash@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPythonSash@@@8
data$rs	SEGMENT
??_R0?AVCPythonSash@@@8 DD FLAT:??_7type_info@@6B@	; CPythonSash `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPythonSash@@', 00H
data$rs	ENDS
;	COMDAT ??_R3?$CSingleton@VCPythonSash@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCPythonSash@@@@8 DD 00H		; CSingleton<CPythonSash>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCPythonSash@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCPythonSash@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCPythonSash@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CPythonSash> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCPythonSash@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCPythonSash@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCPythonSash@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCPythonSash@@@@@8 ; CSingleton<CPythonSash>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCPythonSash@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CPythonSash@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPythonSash@@8 DD FLAT:??_R0?AVCPythonSash@@@8 ; CPythonSash::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPythonSash@@8
rdata$r	ENDS
;	COMDAT ??_R2CPythonSash@@8
rdata$r	SEGMENT
??_R2CPythonSash@@8 DD FLAT:??_R1A@?0A@EA@CPythonSash@@8 ; CPythonSash::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCPythonSash@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCPythonSash@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCPythonSash@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCPythonSash@@@@8 ; CSingleton<CPythonSash>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_C@_0M@KGAHGOKL@LIMIT_RANGE@
CONST	SEGMENT
??_C@_0M@KGAHGOKL@LIMIT_RANGE@ DB 'LIMIT_RANGE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EEPIJCBJ@WINDOW_MAX_MATERIALS@
CONST	SEGMENT
??_C@_0BF@EEPIJCBJ@WINDOW_MAX_MATERIALS@ DB 'WINDOW_MAX_MATERIALS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GIMJACMK@CLEAN_ATTR_VALUE_FIELD@
CONST	SEGMENT
??_C@_0BH@GIMJACMK@CLEAN_ATTR_VALUE_FIELD@ DB 'CLEAN_ATTR_VALUE_FIELD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OMEMJIA@ABSORBED_SOCKET@
CONST	SEGMENT
??_C@_0BA@OMEMJIA@ABSORBED_SOCKET@ DB 'ABSORBED_SOCKET', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MMHEJGIM@CLEAN_ATTR_VALUE0@
CONST	SEGMENT
??_C@_0BC@MMHEJGIM@CLEAN_ATTR_VALUE0@ DB 'CLEAN_ATTR_VALUE0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04PPKGDFDN@sash@
CONST	SEGMENT
??_C@_04PPKGDFDN@sash@ DB 'sash', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IECALNLB@ABSORPTION_SOCKET@
CONST	SEGMENT
??_C@_0BC@IECALNLB@ABSORPTION_SOCKET@ DB 'ABSORPTION_SOCKET', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PHHGLLGO@GetResultItem@
CONST	SEGMENT
??_C@_0O@PHHGLLGO@GetResultItem@ DB 'GetResultItem', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HOMOJNGO@SendRefineRequest@
CONST	SEGMENT
??_C@_0BC@HOMOJNGO@SendRefineRequest@ DB 'SendRefineRequest', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LIIADGDC@GetPrice@
CONST	SEGMENT
??_C@_08LIIADGDC@GetPrice@ DB 'GetPrice', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HGMKPIDK@GetAttachedItem@
CONST	SEGMENT
??_C@_0BA@HGMKPIDK@GetAttachedItem@ DB 'GetAttachedItem', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03LDFMNCOE@Add@
CONST	SEGMENT
??_C@_03LDFMNCOE@Add@ DB 'Add', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MEPBJJFP@Remove@
CONST	SEGMENT
??_C@_06MEPBJJFP@Remove@ DB 'Remove', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01OCOKONAJ@L@
CONST	SEGMENT
??_C@_01OCOKONAJ@L@ DB 'L', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JNNNKLPA@SendCloseRequest@
CONST	SEGMENT
??_C@_0BB@JNNNKLPA@SendCloseRequest@ DB 'SendCloseRequest', 00H ; `string'
PUBLIC	??$construct_at@USSashMaterial@@U1@$0A@@std@@YAPAUSSashMaterial@@QAU1@$$QAU1@@Z ; std::construct_at<SSashMaterial,SSashMaterial,0>
PUBLIC	??$_Voidify_iter@PAUSSashMaterial@@@std@@YAPAXPAUSSashMaterial@@@Z ; std::_Voidify_iter<SSashMaterial *>
PUBLIC	??$construct_at@USSashMaterial@@$$V$0A@@std@@YAPAUSSashMaterial@@QAU1@@Z ; std::construct_at<SSashMaterial,0>
PUBLIC	??$construct@USSashMaterial@@U1@@?$_Default_allocator_traits@V?$allocator@USSashMaterial@@@std@@@std@@SAXAAV?$allocator@USSashMaterial@@@1@QAUSSashMaterial@@$$QAU3@@Z ; std::_Default_allocator_traits<std::allocator<SSashMaterial> >::construct<SSashMaterial,SSashMaterial>
PUBLIC	??$forward@USSashMaterial@@@std@@YA$$QAUSSashMaterial@@AAU1@@Z ; std::forward<SSashMaterial>
PUBLIC	??$to_address@USSashMaterial@@@std@@YAPAUSSashMaterial@@QAU1@@Z ; std::to_address<SSashMaterial>
PUBLIC	??$construct@USSashMaterial@@$$V@?$_Default_allocator_traits@V?$allocator@USSashMaterial@@@std@@@std@@SAXAAV?$allocator@USSashMaterial@@@1@QAUSSashMaterial@@@Z ; std::_Default_allocator_traits<std::allocator<SSashMaterial> >::construct<SSashMaterial>
PUBLIC	??$_Emplace_back@USSashMaterial@@@?$_Uninitialized_backout_al@V?$allocator@USSashMaterial@@@std@@@std@@QAEX$$QAUSSashMaterial@@@Z ; std::_Uninitialized_backout_al<std::allocator<SSashMaterial> >::_Emplace_back<SSashMaterial>
PUBLIC	??$_To_address@PAUSSashMaterial@@@std@@YA?A_PABQAUSSashMaterial@@@Z ; std::_To_address<SSashMaterial *>
PUBLIC	??$_Copy_memmove@PAUSSashMaterial@@PAU1@@std@@YAPAUSSashMaterial@@PAU1@00@Z ; std::_Copy_memmove<SSashMaterial *,SSashMaterial *>
PUBLIC	??$_Unfancy@USSashMaterial@@@std@@YAPAUSSashMaterial@@PAU1@@Z ; std::_Unfancy<SSashMaterial>
PUBLIC	??$move@AAUSSashMaterial@@@std@@YA$$QAUSSashMaterial@@AAU1@@Z ; std::move<SSashMaterial &>
PUBLIC	??$_Get_size_of_n@$02@std@@YAII@Z		; std::_Get_size_of_n<3>
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@USSashMaterial@@@std@@@std@@QAEXXZ ; std::_Uninitialized_backout_al<std::allocator<SSashMaterial> >::_Emplace_back<>
PUBLIC	??$_Uninitialized_move@PAUSSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@YAPAUSSashMaterial@@QAU1@0PAU1@AAV?$allocator@USSashMaterial@@@0@@Z ; std::_Uninitialized_move<SSashMaterial *,std::allocator<SSashMaterial> >
PUBLIC	??$_Get_unwrapped@ABQAUSSashMaterial@@@std@@YA?A_TABQAUSSashMaterial@@@Z ; std::_Get_unwrapped<SSashMaterial * const &>
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@USSashMaterial@@@std@@V?$_Vector_val@U?$_Simple_types@USSashMaterial@@@std@@@2@$00@std@@QBEABV?$allocator@USSashMaterial@@@2@XZ ; std::_Compressed_pair<std::allocator<SSashMaterial>,std::_Vector_val<std::_Simple_types<SSashMaterial> >,1>::_Get_first
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@USSashMaterial@@@std@@@std@@SAIABV?$allocator@USSashMaterial@@@2@@Z ; std::_Default_allocator_traits<std::allocator<SSashMaterial> >::max_size
PUBLIC	?capacity@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QBEIXZ ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::capacity
PUBLIC	?_Getal@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@ABEABV?$allocator@USSashMaterial@@@2@XZ ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Getal
PUBLIC	?allocate@?$allocator@USSashMaterial@@@std@@QAEPAUSSashMaterial@@I@Z ; std::allocator<SSashMaterial>::allocate
PUBLIC	?max_size@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QBEIXZ ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::max_size
PUBLIC	?_Calculate_growth@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@ABEII@Z ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEXQAUSSashMaterial@@II@Z ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Change_array
PUBLIC	?_Xlength@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@CAXXZ ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Xlength
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@USSashMaterial@@@std@@@std@@QAE@PAUSSashMaterial@@AAV?$allocator@USSashMaterial@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<SSashMaterial> >::_Uninitialized_backout_al<std::allocator<SSashMaterial> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@USSashMaterial@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<SSashMaterial> >::~_Uninitialized_backout_al<std::allocator<SSashMaterial> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@USSashMaterial@@@std@@@std@@QAEPAUSSashMaterial@@XZ ; std::_Uninitialized_backout_al<std::allocator<SSashMaterial> >::_Release
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@USSashMaterial@@@std@@@std@@YAPAUSSashMaterial@@PAU1@IAAV?$allocator@USSashMaterial@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<SSashMaterial> >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??0?$allocator@USSashMaterial@@@std@@QAE@XZ	; std::allocator<SSashMaterial>::allocator<SSashMaterial>
PUBLIC	?_Orphan_range@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@ABEXPAUSSashMaterial@@0@Z ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Orphan_range
PUBLIC	??0?$_Vector_val@U?$_Simple_types@USSashMaterial@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<SSashMaterial> >::_Vector_val<std::_Simple_types<SSashMaterial> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@USSashMaterial@@@std@@V?$_Vector_val@U?$_Simple_types@USSashMaterial@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<SSashMaterial>,std::_Vector_val<std::_Simple_types<SSashMaterial> >,1>::_Compressed_pair<std::allocator<SSashMaterial>,std::_Vector_val<std::_Simple_types<SSashMaterial> >,1><>
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Resize<std::_Value_init_tag>
PUBLIC	??$_Destroy_range@V?$allocator@USSashMaterial@@@std@@@std@@YAXPAUSSashMaterial@@QAU1@AAV?$allocator@USSashMaterial@@@0@@Z ; std::_Destroy_range<std::allocator<SSashMaterial> >
PUBLIC	?deallocate@?$allocator@USSashMaterial@@@std@@QAEXQAUSSashMaterial@@I@Z ; std::allocator<SSashMaterial>::deallocate
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@USSashMaterial@@@std@@V?$_Vector_val@U?$_Simple_types@USSashMaterial@@@std@@@2@$00@std@@QAEAAV?$allocator@USSashMaterial@@@2@XZ ; std::_Compressed_pair<std::allocator<SSashMaterial>,std::_Vector_val<std::_Simple_types<SSashMaterial> >,1>::_Get_first
PUBLIC	?_Tidy@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEXXZ ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Tidy
PUBLIC	?_Getal@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEAAV?$allocator@USSashMaterial@@@2@XZ ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Getal
PUBLIC	??_G?$CSingleton@VCPythonSash@@@@UAEPAXI@Z	; CSingleton<CPythonSash>::`scalar deleting destructor'
PUBLIC	??0?$CSingleton@VCPythonSash@@@@QAE@XZ		; CSingleton<CPythonSash>::CSingleton<CPythonSash>
PUBLIC	??1?$CSingleton@VCPythonSash@@@@UAE@XZ		; CSingleton<CPythonSash>::~CSingleton<CPythonSash>
PUBLIC	??0?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QAE@XZ ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::vector<SSashMaterial,std::allocator<SSashMaterial> >
PUBLIC	??1?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QAE@XZ ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::~vector<SSashMaterial,std::allocator<SSashMaterial> >
PUBLIC	?resize@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QAEXI@Z ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::resize
PUBLIC	?clear@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QAEXXZ ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::clear
PUBLIC	?size@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QBEIXZ ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::size
PUBLIC	??A?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QAEAAUSSashMaterial@@I@Z ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::operator[]
PUBLIC	?initSash@@YAXXZ				; initSash
PUBLIC	?SendSashRefineRequest@@YAPAU_object@@PAU1@0@Z	; SendSashRefineRequest
PUBLIC	?GetSashResultItem@@YAPAU_object@@PAU1@0@Z	; GetSashResultItem
PUBLIC	?GetSashAttachedItem@@YAPAU_object@@PAU1@0@Z	; GetSashAttachedItem
PUBLIC	?GetSashPrice@@YAPAU_object@@PAU1@0@Z		; GetSashPrice
PUBLIC	?SendSashRemove@@YAPAU_object@@PAU1@0@Z		; SendSashRemove
PUBLIC	?SendSashAdd@@YAPAU_object@@PAU1@0@Z		; SendSashAdd
PUBLIC	?SendSashCloseRequest@@YAPAU_object@@PAU1@0@Z	; SendSashCloseRequest
PUBLIC	?GetResultItem@CPythonSash@@QAEXAAK00@Z		; CPythonSash::GetResultItem
PUBLIC	?GetAttachedItem@CPythonSash@@QAE_NEAAEAAG@Z	; CPythonSash::GetAttachedItem
PUBLIC	??_GCPythonSash@@UAEPAXI@Z			; CPythonSash::`scalar deleting destructor'
PUBLIC	?GetPrice@CPythonSash@@QAE_JXZ			; CPythonSash::GetPrice
PUBLIC	?Clear@CPythonSash@@QAEXXZ			; CPythonSash::Clear
PUBLIC	?AddMaterial@CPythonSash@@QAEX_JEUSItemPos@@@Z	; CPythonSash::AddMaterial
PUBLIC	?AddResult@CPythonSash@@QAEXKKK@Z		; CPythonSash::AddResult
PUBLIC	?RemoveMaterial@CPythonSash@@QAEX_JE@Z		; CPythonSash::RemoveMaterial
PUBLIC	??0CPythonSash@@QAE@XZ				; CPythonSash::CPythonSash
PUBLIC	??1CPythonSash@@UAE@XZ				; CPythonSash::~CPythonSash
EXTRN	??_ECPythonSash@@UAEPAXI@Z:PROC			; CPythonSash::`vector deleting destructor'
EXTRN	??_E?$CSingleton@VCPythonSash@@@@UAEPAXI@Z:PROC	; CSingleton<CPythonSash>::`vector deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CPythonSash@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CPythonSash@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CPythonSash@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CPythonSash@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CPythonSash@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CPythonSash@@QAE@XZ$1
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterBase\Singleton.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
;	COMDAT ??1CPythonSash@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CPythonSash@@UAE@XZ PROC				; CPythonSash::~CPythonSash, COMDAT
; _this$ = ecx

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CPythonSash@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CPythonSash@@6B@

; 13   : 	Clear();

  0002b	e8 00 00 00 00	 call	 ?Clear@CPythonSash@@QAEXXZ ; CPythonSash::Clear

; 14   : }

  00030	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00033	e8 00 00 00 00	 call	 ??1?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QAE@XZ ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::~vector<SSashMaterial,std::allocator<SSashMaterial> >
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterBase\Singleton.h

; 19   : 	{ 

  00038	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCPythonSash@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  0003e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSash@@@@0PAVCPythonSash@@A, 0 ; CSingleton<CPythonSash>::ms_singleton
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp

; 14   : }

  00048	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00052	59		 pop	 ecx
  00053	5e		 pop	 esi
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
  00058	cc		 int	 3
  00059	cc		 int	 3
  0005a	cc		 int	 3
  0005b	cc		 int	 3
  0005c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CPythonSash@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CPythonSash@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CPythonSash@@UAE@XZ ENDP				; CPythonSash::~CPythonSash
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterBase\Singleton.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
;	COMDAT ??0CPythonSash@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CPythonSash@@QAE@XZ PROC				; CPythonSash::CPythonSash, COMDAT
; _this$ = ecx

; 7    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CPythonSash@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00029	89 35 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSash@@@@0PAVCPythonSash@@A, esi ; CSingleton<CPythonSash>::ms_singleton
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp

; 7    : {

  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CPythonSash@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0003c	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00043	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  0004a	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp

; 7    : {

  00051	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 8    : 	Clear();

  00055	e8 00 00 00 00	 call	 ?Clear@CPythonSash@@QAEXXZ ; CPythonSash::Clear

; 9    : }

  0005a	8b c6		 mov	 eax, esi
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00066	59		 pop	 ecx
  00067	5e		 pop	 esi
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CPythonSash@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCPythonSash@@@@UAE@XZ ; CSingleton<CPythonSash>::~CSingleton<CPythonSash>
__unwindfunclet$??0CPythonSash@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0000e	e9 00 00 00 00	 jmp	 ??1?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QAE@XZ ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::~vector<SSashMaterial,std::allocator<SSashMaterial> >
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??0CPythonSash@@QAE@XZ:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CPythonSash@@QAE@XZ
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CPythonSash@@QAE@XZ ENDP				; CPythonSash::CPythonSash
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
;	COMDAT ?RemoveMaterial@CPythonSash@@QAEX_JE@Z
_TEXT	SEGMENT
_dwRefPrice$ = 8					; size = 8
_bPos$ = 16						; size = 1
?RemoveMaterial@CPythonSash@@QAEX_JE@Z PROC		; CPythonSash::RemoveMaterial, COMDAT
; _this$ = ecx

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 58   : 	if (bPos >= SASH_WINDOW_MAX_MATERIALS)

  00003	8a 55 10	 mov	 dl, BYTE PTR _bPos$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	80 fa 02	 cmp	 dl, 2
  0000c	73 25		 jae	 SHORT $LN1@RemoveMate

; 59   : 		return;
; 60   : 	
; 61   : 	if (bPos == 1)

  0000e	80 fa 01	 cmp	 dl, 1
  00011	75 0c		 jne	 SHORT $LN3@RemoveMate

; 62   : 		dwPrice = dwRefPrice;

  00013	8b 45 08	 mov	 eax, DWORD PTR _dwRefPrice$[ebp]
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR _dwRefPrice$[ebp+4]
  00019	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0001c	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
$LN3@RemoveMate:

; 67   : 	m_vSashMaterials[bPos] = tMaterial;

  0001f	0f b6 c2	 movzx	 eax, dl
  00022	33 d2		 xor	 edx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00024	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00027	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp

; 67   : 	m_vSashMaterials[bPos] = tMaterial;

  0002a	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  0002e	66 89 54 01 01	 mov	 WORD PTR [ecx+eax+1], dx
$LN1@RemoveMate:
  00033	5e		 pop	 esi

; 68   : }

  00034	5d		 pop	 ebp
  00035	c2 0c 00	 ret	 12			; 0000000cH
?RemoveMaterial@CPythonSash@@QAEX_JE@Z ENDP		; CPythonSash::RemoveMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
;	COMDAT ?AddResult@CPythonSash@@QAEXKKK@Z
_TEXT	SEGMENT
_dwItemVnum$ = 8					; size = 4
_dwMinAbs$ = 12						; size = 4
_dwMaxAbs$ = 16						; size = 4
?AddResult@CPythonSash@@QAEXKKK@Z PROC			; CPythonSash::AddResult, COMDAT
; _this$ = ecx

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 49   : 	TSashResult tResult;
; 50   : 	tResult.dwItemVnum = dwItemVnum;
; 51   : 	tResult.dwMinAbs = dwMinAbs;
; 52   : 	tResult.dwMaxAbs = dwMaxAbs;
; 53   : 	m_vSashResult = tResult;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwItemVnum$[ebp]
  00006	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00009	8b 45 0c	 mov	 eax, DWORD PTR _dwMinAbs$[ebp]
  0000c	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000f	8b 45 10	 mov	 eax, DWORD PTR _dwMaxAbs$[ebp]
  00012	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 54   : }

  00015	5d		 pop	 ebp
  00016	c2 0c 00	 ret	 12			; 0000000cH
?AddResult@CPythonSash@@QAEXKKK@Z ENDP			; CPythonSash::AddResult
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
;	COMDAT ?AddMaterial@CPythonSash@@QAEX_JEUSItemPos@@@Z
_TEXT	SEGMENT
_dwRefPrice$ = 8					; size = 8
_bPos$ = 16						; size = 1
_tPos$ = 20						; size = 3
?AddMaterial@CPythonSash@@QAEX_JEUSItemPos@@@Z PROC	; CPythonSash::AddMaterial, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 35   : 	if (bPos >= SASH_WINDOW_MAX_MATERIALS)

  00004	8a 5d 10	 mov	 bl, BYTE PTR _bPos$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	80 fb 02	 cmp	 bl, 2
  0000d	73 26		 jae	 SHORT $LN1@AddMateria

; 36   : 		return;
; 37   : 	
; 38   : 	if (bPos == 0)

  0000f	84 db		 test	 bl, bl
  00011	75 0c		 jne	 SHORT $LN3@AddMateria

; 39   : 		dwPrice = dwRefPrice;

  00013	8b 45 08	 mov	 eax, DWORD PTR _dwRefPrice$[ebp]
  00016	8b 4d 0c	 mov	 ecx, DWORD PTR _dwRefPrice$[ebp+4]
  00019	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0001c	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
$LN3@AddMateria:

; 40   : 	
; 41   : 	TSashMaterial tMaterial;
; 42   : 	tMaterial.bHere = 1;
; 43   : 	tMaterial.wCell = tPos.cell;

  0001f	0f b7 55 15	 movzx	 edx, WORD PTR _tPos$[ebp+1]

; 44   : 	m_vSashMaterials[bPos] = tMaterial;

  00023	0f b6 c3	 movzx	 eax, bl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00026	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00029	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp

; 44   : 	m_vSashMaterials[bPos] = tMaterial;

  0002c	c6 04 01 01	 mov	 BYTE PTR [ecx+eax], 1
  00030	66 89 54 01 01	 mov	 WORD PTR [ecx+eax+1], dx
$LN1@AddMateria:

; 45   : }

  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 10 00	 ret	 16			; 00000010H
?AddMaterial@CPythonSash@@QAEX_JEUSItemPos@@@Z ENDP	; CPythonSash::AddMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
;	COMDAT ?Clear@CPythonSash@@QAEXXZ
_TEXT	SEGMENT
?Clear@CPythonSash@@QAEXXZ PROC				; CPythonSash::Clear, COMDAT
; _this$ = ecx

; 17   : {

  00000	53		 push	 ebx

; 18   : 	dwPrice = 0;

  00001	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0

; 19   : 	
; 20   : 	ZeroMemory(&m_vSashResult, sizeof(m_vSashResult));

  00012	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
  00017	57		 push	 edi

; 21   : 	
; 22   : 	m_vSashMaterials.clear();

  00018	8d 79 1c	 lea	 edi, DWORD PTR [ecx+28]
  0001b	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00022	8b 07		 mov	 eax, DWORD PTR [edi]
  00024	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  00027	3b c3		 cmp	 eax, ebx
  00029	74 05		 je	 SHORT $LN10@Clear

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0002b	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0002e	8b d8		 mov	 ebx, eax
$LN10@Clear:

; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00030	8b c8		 mov	 ecx, eax
  00032	8b c3		 mov	 eax, ebx
  00034	2b c1		 sub	 eax, ecx
  00036	69 d0 ab aa aa
	aa		 imul	 edx, eax, -1431655765

; 1621 :         if (_Newsize < _Oldsize) { // trim

  0003c	83 fa 02	 cmp	 edx, 2
  0003f	76 08		 jbe	 SHORT $LN16@Clear

; 1622 :             const pointer _Newlast = _Myfirst + _Newsize;

  00041	8d 41 06	 lea	 eax, DWORD PTR [ecx+6]

; 1623 :             _Orphan_range(_Newlast, _Mylast);
; 1624 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1625 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1626 :             _Mylast = _Newlast;

  00044	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1627 :             return;

  00047	eb 3d		 jmp	 SHORT $LN17@Clear
$LN16@Clear:

; 1628 :         }
; 1629 : 
; 1630 :         if (_Newsize > _Oldsize) { // append

  00049	73 3b		 jae	 SHORT $LN17@Clear

; 1631 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  0004b	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0004e	2b c1		 sub	 eax, ecx
  00050	69 c0 ab aa aa
	aa		 imul	 eax, eax, -1431655765

; 1632 :             if (_Newsize > _Oldcapacity) { // reallocate

  00056	83 f8 02	 cmp	 eax, 2
  00059	73 0c		 jae	 SHORT $LN18@Clear

; 1633 :                 _Resize_reallocate(_Newsize, _Val);

  0005b	83 ec 08	 sub	 esp, 8
  0005e	8b cf		 mov	 ecx, edi
  00060	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Resize_reallocate<std::_Value_init_tag>

; 1634 :                 return;

  00065	eb 1f		 jmp	 SHORT $LN17@Clear
$LN18@Clear:

; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00067	b8 02 00 00 00	 mov	 eax, 2
  0006c	2b c2		 sub	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1902 :     for (; 0 < _Count; --_Count) {

  0006e	74 13		 je	 SHORT $LN23@Clear
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00070	56		 push	 esi
  00071	8d 34 40	 lea	 esi, DWORD PTR [eax+eax*2]
  00074	56		 push	 esi
  00075	6a 00		 push	 0
  00077	53		 push	 ebx
  00078	e8 00 00 00 00	 call	 _memset
  0007d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00080	03 de		 add	 ebx, esi
  00082	5e		 pop	 esi
$LN23@Clear:
  00083	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
$LN17@Clear:

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00086	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp

; 24   : 	for (BYTE bPos = 0; bPos < m_vSashMaterials.size(); ++bPos)

  00089	32 db		 xor	 bl, bl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0008b	8b 17		 mov	 edx, DWORD PTR [edi]
  0008d	2b c2		 sub	 eax, edx
  0008f	69 c0 ab aa aa
	aa		 imul	 eax, eax, -1431655765
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp

; 24   : 	for (BYTE bPos = 0; bPos < m_vSashMaterials.size(); ++bPos)

  00095	85 c0		 test	 eax, eax
  00097	74 2b		 je	 SHORT $LN3@Clear
  00099	33 c9		 xor	 ecx, ecx
  0009b	0f 1f 44 00 00	 npad	 5
$LL4@Clear:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  000a0	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp

; 24   : 	for (BYTE bPos = 0; bPos < m_vSashMaterials.size(); ++bPos)

  000a3	fe c3		 inc	 bl

; 25   : 	{
; 26   : 		TSashMaterial tMaterial;
; 27   : 		tMaterial.bHere = 0;
; 28   : 		tMaterial.wCell = 0;
; 29   : 		m_vSashMaterials[bPos] = tMaterial;

  000a5	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  000a9	33 d2		 xor	 edx, edx
  000ab	66 89 54 01 01	 mov	 WORD PTR [ecx+eax+1], dx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000b0	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000b3	8b 17		 mov	 edx, DWORD PTR [edi]
  000b5	2b c2		 sub	 eax, edx
  000b7	69 c0 ab aa aa
	aa		 imul	 eax, eax, -1431655765
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp

; 24   : 	for (BYTE bPos = 0; bPos < m_vSashMaterials.size(); ++bPos)

  000bd	0f b6 cb	 movzx	 ecx, bl
  000c0	3b c8		 cmp	 ecx, eax
  000c2	72 dc		 jb	 SHORT $LL4@Clear
$LN3@Clear:
  000c4	5f		 pop	 edi

; 30   : 	}
; 31   : }

  000c5	5b		 pop	 ebx
  000c6	c3		 ret	 0
?Clear@CPythonSash@@QAEXXZ ENDP				; CPythonSash::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.h
;	COMDAT ?GetPrice@CPythonSash@@QAE_JXZ
_TEXT	SEGMENT
?GetPrice@CPythonSash@@QAE_JXZ PROC			; CPythonSash::GetPrice, COMDAT
; _this$ = ecx

; 19   : 		long long	GetPrice() {return dwPrice;}

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00006	c3		 ret	 0
?GetPrice@CPythonSash@@QAE_JXZ ENDP			; CPythonSash::GetPrice
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCPythonSash@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPythonSash@@UAEPAXI@Z PROC				; CPythonSash::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CPythonSash@@UAE@XZ	; CPythonSash::~CPythonSash
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 28		 push	 40			; 00000028H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCPythonSash@@UAEPAXI@Z ENDP				; CPythonSash::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
;	COMDAT ?GetAttachedItem@CPythonSash@@QAE_NEAAEAAG@Z
_TEXT	SEGMENT
_bPos$ = 8						; size = 1
_bHere$ = 12						; size = 4
_wCell$ = 16						; size = 4
?GetAttachedItem@CPythonSash@@QAE_NEAAEAAG@Z PROC	; CPythonSash::GetAttachedItem, COMDAT
; _this$ = ecx

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   : 	if (bPos >= SASH_WINDOW_MAX_MATERIALS)

  00003	8a 45 08	 mov	 al, BYTE PTR _bPos$[ebp]
  00006	8b d1		 mov	 edx, ecx
  00008	3c 02		 cmp	 al, 2
  0000a	72 06		 jb	 SHORT $LN2@GetAttache

; 73   : 		return false;

  0000c	32 c0		 xor	 al, al

; 78   : }

  0000e	5d		 pop	 ebp
  0000f	c2 0c 00	 ret	 12			; 0000000cH
$LN2@GetAttache:

; 75   : 	bHere = m_vSashMaterials[bPos].bHere;

  00012	8b 52 1c	 mov	 edx, DWORD PTR [edx+28]
  00015	0f b6 c0	 movzx	 eax, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00018	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp

; 75   : 	bHere = m_vSashMaterials[bPos].bHere;

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _bHere$[ebp]
  0001e	03 d1		 add	 edx, ecx
  00020	8a 0a		 mov	 cl, BYTE PTR [edx]
  00022	88 08		 mov	 BYTE PTR [eax], cl

; 76   : 	wCell = m_vSashMaterials[bPos].wCell;

  00024	8b 45 10	 mov	 eax, DWORD PTR _wCell$[ebp]
  00027	66 8b 4a 01	 mov	 cx, WORD PTR [edx+1]
  0002b	66 89 08	 mov	 WORD PTR [eax], cx

; 77   : 	return true;

  0002e	b0 01		 mov	 al, 1

; 78   : }

  00030	5d		 pop	 ebp
  00031	c2 0c 00	 ret	 12			; 0000000cH
?GetAttachedItem@CPythonSash@@QAE_NEAAEAAG@Z ENDP	; CPythonSash::GetAttachedItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
;	COMDAT ?GetResultItem@CPythonSash@@QAEXAAK00@Z
_TEXT	SEGMENT
_dwItemVnum$ = 8					; size = 4
_dwMinAbs$ = 12						; size = 4
_dwMaxAbs$ = 16						; size = 4
?GetResultItem@CPythonSash@@QAEXAAK00@Z PROC		; CPythonSash::GetResultItem, COMDAT
; _this$ = ecx

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 82   : 	dwItemVnum = m_vSashResult.dwItemVnum;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwItemVnum$[ebp]
  00006	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00009	89 10		 mov	 DWORD PTR [eax], edx

; 83   : 	dwMinAbs = m_vSashResult.dwMinAbs;

  0000b	8b 45 0c	 mov	 eax, DWORD PTR _dwMinAbs$[ebp]
  0000e	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]

; 84   : 	dwMaxAbs = m_vSashResult.dwMaxAbs;

  00011	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00014	89 10		 mov	 DWORD PTR [eax], edx
  00016	8b 45 10	 mov	 eax, DWORD PTR _dwMaxAbs$[ebp]
  00019	89 08		 mov	 DWORD PTR [eax], ecx

; 85   : }

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
?GetResultItem@CPythonSash@@QAEXAAK00@Z ENDP		; CPythonSash::GetResultItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
;	COMDAT ?SendSashCloseRequest@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?SendSashCloseRequest@@YAPAU_object@@PAU1@0@Z PROC	; SendSashCloseRequest, COMDAT

; 89   : 	CPythonNetworkStream & rkNetStream = CPythonNetworkStream::Instance();
; 90   : 	rkNetStream.SendSashClosePacket();

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonNetworkStream@@@@0PAVCPythonNetworkStream@@A ; CSingleton<CPythonNetworkStream>::ms_singleton
  00006	e8 00 00 00 00	 call	 ?SendSashClosePacket@CPythonNetworkStream@@QAE_NXZ ; CPythonNetworkStream::SendSashClosePacket

; 91   : 	return Py_BuildNone();

  0000b	e9 00 00 00 00	 jmp	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone
?SendSashCloseRequest@@YAPAU_object@@PAU1@0@Z ENDP	; SendSashCloseRequest
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\GameType.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\GameType.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
;	COMDAT ?SendSashAdd@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_bPos$ = -8						; size = 1
_tPos$ = -4						; size = 3
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?SendSashAdd@@YAPAU_object@@PAU1@0@Z PROC		; SendSashAdd, COMDAT

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\GameType.h

; 202  : 		cell = WORD_MAX;

  00006	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0000b	c6 45 fc 01	 mov	 BYTE PTR _tPos$[ebp], 1
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp

; 95   : {

  0000f	56		 push	 esi

; 98   : 	if (!PyTuple_GetInteger(poArgs, 0, &tPos.window_type))

  00010	8b 75 0c	 mov	 esi, DWORD PTR _poArgs$[ebp]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\GameType.h

; 202  : 		cell = WORD_MAX;

  00013	66 89 45 fd	 mov	 WORD PTR _tPos$[ebp+1], ax
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp

; 98   : 	if (!PyTuple_GetInteger(poArgs, 0, &tPos.window_type))

  00017	8d 45 fc	 lea	 eax, DWORD PTR _tPos$[ebp]
  0001a	50		 push	 eax
  0001b	6a 00		 push	 0
  0001d	56		 push	 esi
  0001e	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAE@Z ; PyTuple_GetInteger
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	84 c0		 test	 al, al
  00028	75 0f		 jne	 SHORT $LN2@SendSashAd
$LN10@SendSashAd:

; 108  : }

  0002a	6a 00		 push	 0
  0002c	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00031	83 c4 04	 add	 esp, 4
  00034	5e		 pop	 esi
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
$LN2@SendSashAd:

; 99   : 		return Py_BuildException();
; 100  : 	else if (!PyTuple_GetInteger(poArgs, 1, &tPos.cell))

  00039	8d 45 fd	 lea	 eax, DWORD PTR _tPos$[ebp+1]
  0003c	50		 push	 eax
  0003d	6a 01		 push	 1
  0003f	56		 push	 esi
  00040	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAG@Z ; PyTuple_GetInteger
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
  00048	84 c0		 test	 al, al
  0004a	74 de		 je	 SHORT $LN10@SendSashAd

; 101  : 		return Py_BuildException();
; 102  : 	else if (!PyTuple_GetInteger(poArgs, 2, &bPos))

  0004c	8d 45 f8	 lea	 eax, DWORD PTR _bPos$[ebp]
  0004f	50		 push	 eax
  00050	6a 02		 push	 2
  00052	56		 push	 esi
  00053	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAE@Z ; PyTuple_GetInteger
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005b	84 c0		 test	 al, al
  0005d	74 cb		 je	 SHORT $LN10@SendSashAd

; 103  : 		return Py_BuildException();
; 104  : 	
; 105  : 	CPythonNetworkStream & rkNetStream = CPythonNetworkStream::Instance();
; 106  : 	rkNetStream.SendSashAddPacket(tPos, bPos);

  0005f	ff 75 f8	 push	 DWORD PTR _bPos$[ebp]
  00062	66 8b 45 fc	 mov	 ax, WORD PTR _tPos$[ebp]
  00066	51		 push	 ecx
  00067	8b cc		 mov	 ecx, esp
  00069	66 89 01	 mov	 WORD PTR [ecx], ax
  0006c	8a 45 fe	 mov	 al, BYTE PTR _tPos$[ebp+2]
  0006f	88 41 02	 mov	 BYTE PTR [ecx+2], al
  00072	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonNetworkStream@@@@0PAVCPythonNetworkStream@@A ; CSingleton<CPythonNetworkStream>::ms_singleton
  00078	e8 00 00 00 00	 call	 ?SendSashAddPacket@CPythonNetworkStream@@QAE_NUSItemPos@@E@Z ; CPythonNetworkStream::SendSashAddPacket

; 107  : 	return Py_BuildNone();

  0007d	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 108  : }

  00082	5e		 pop	 esi
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
?SendSashAdd@@YAPAU_object@@PAU1@0@Z ENDP		; SendSashAdd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
;	COMDAT ?SendSashRemove@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_bPos$ = -4						; size = 1
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?SendSashRemove@@YAPAU_object@@PAU1@0@Z PROC		; SendSashRemove, COMDAT

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 112  : 	BYTE bPos;
; 113  : 	if (!PyTuple_GetInteger(poArgs, 0, &bPos))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _bPos$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAE@Z ; PyTuple_GetInteger
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 0e		 jne	 SHORT $LN2@SendSashRe

; 114  : 		return Py_BuildException();

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 119  : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN2@SendSashRe:

; 115  : 	
; 116  : 	CPythonNetworkStream & rkNetStream = CPythonNetworkStream::Instance();
; 117  : 	rkNetStream.SendSashRemovePacket(bPos);

  00027	ff 75 fc	 push	 DWORD PTR _bPos$[ebp]
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonNetworkStream@@@@0PAVCPythonNetworkStream@@A ; CSingleton<CPythonNetworkStream>::ms_singleton
  00030	e8 00 00 00 00	 call	 ?SendSashRemovePacket@CPythonNetworkStream@@QAE_NE@Z ; CPythonNetworkStream::SendSashRemovePacket

; 118  : 	return Py_BuildNone();

  00035	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 119  : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?SendSashRemove@@YAPAU_object@@PAU1@0@Z ENDP		; SendSashRemove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
;	COMDAT ?GetSashPrice@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?GetSashPrice@@YAPAU_object@@PAU1@0@Z PROC		; GetSashPrice, COMDAT

; 123  : 	return Py_BuildValue("L", CPythonSash::Instance().GetPrice());

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSash@@@@0PAVCPythonSash@@A ; CSingleton<CPythonSash>::ms_singleton
  00005	ff 70 0c	 push	 DWORD PTR [eax+12]
  00008	ff 70 08	 push	 DWORD PTR [eax+8]
  0000b	68 00 00 00 00	 push	 OFFSET ??_C@_01OCOKONAJ@L@
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH

; 124  : }

  00019	c3		 ret	 0
?GetSashPrice@@YAPAU_object@@PAU1@0@Z ENDP		; GetSashPrice
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
;	COMDAT ?GetSashAttachedItem@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_wCell$ = -12						; size = 2
_bPos$ = -5						; size = 1
_bHere$ = -1						; size = 1
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?GetSashAttachedItem@@YAPAU_object@@PAU1@0@Z PROC	; GetSashAttachedItem, COMDAT

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 128  : 	BYTE bPos;
; 129  : 	if (!PyTuple_GetInteger(poArgs, 0, &bPos))

  00006	8d 45 fb	 lea	 eax, DWORD PTR _bPos$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAE@Z ; PyTuple_GetInteger
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@GetSashAtt

; 130  : 		return Py_BuildException();

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4

; 142  : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@GetSashAtt:

; 131  : 	
; 132  : 	BYTE bHere;
; 133  : 	WORD wCell;
; 134  : 	bool bGet = CPythonSash::Instance().GetAttachedItem(bPos, bHere, wCell);

  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSash@@@@0PAVCPythonSash@@A ; CSingleton<CPythonSash>::ms_singleton
  0002f	8d 45 f4	 lea	 eax, DWORD PTR _wCell$[ebp]
  00032	50		 push	 eax
  00033	8d 45 ff	 lea	 eax, DWORD PTR _bHere$[ebp]
  00036	50		 push	 eax
  00037	ff 75 fb	 push	 DWORD PTR _bPos$[ebp]
  0003a	e8 00 00 00 00	 call	 ?GetAttachedItem@CPythonSash@@QAE_NEAAEAAG@Z ; CPythonSash::GetAttachedItem

; 135  : 	if (!bGet)

  0003f	84 c0		 test	 al, al
  00041	75 06		 jne	 SHORT $LN5@GetSashAtt

; 136  : 	{
; 137  : 		bHere = 0;

  00043	32 c9		 xor	 cl, cl

; 138  : 		wCell = 0;

  00045	33 c0		 xor	 eax, eax
  00047	eb 06		 jmp	 SHORT $LN3@GetSashAtt
$LN5@GetSashAtt:

; 135  : 	if (!bGet)

  00049	8a 4d ff	 mov	 cl, BYTE PTR _bHere$[ebp]
  0004c	8b 45 f4	 mov	 eax, DWORD PTR _wCell$[ebp]
$LN3@GetSashAtt:

; 139  : 	}
; 140  : 	
; 141  : 	return Py_BuildValue("ii", bHere, wCell);

  0004f	0f b7 c0	 movzx	 eax, ax
  00052	50		 push	 eax
  00053	0f b6 c1	 movzx	 eax, cl
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_02PDIHAGKM@ii@
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH

; 142  : }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?GetSashAttachedItem@@YAPAU_object@@PAU1@0@Z ENDP	; GetSashAttachedItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
;	COMDAT ?GetSashResultItem@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_dwItemVnum$ = -12					; size = 4
_dwMinAbs$ = -8						; size = 4
_dwMaxAbs$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?GetSashResultItem@@YAPAU_object@@PAU1@0@Z PROC		; GetSashResultItem, COMDAT

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 146  : 	DWORD dwItemVnum, dwMinAbs, dwMaxAbs;
; 147  : 	CPythonSash::Instance().GetResultItem(dwItemVnum, dwMinAbs, dwMaxAbs);

  00006	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSash@@@@0PAVCPythonSash@@A ; CSingleton<CPythonSash>::ms_singleton
  0000c	8d 45 fc	 lea	 eax, DWORD PTR _dwMaxAbs$[ebp]
  0000f	50		 push	 eax
  00010	8d 45 f8	 lea	 eax, DWORD PTR _dwMinAbs$[ebp]
  00013	50		 push	 eax
  00014	8d 45 f4	 lea	 eax, DWORD PTR _dwItemVnum$[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ?GetResultItem@CPythonSash@@QAEXAAK00@Z ; CPythonSash::GetResultItem

; 148  : 	return Py_BuildValue("iii", dwItemVnum, dwMinAbs, dwMaxAbs);

  0001d	ff 75 fc	 push	 DWORD PTR _dwMaxAbs$[ebp]
  00020	ff 75 f8	 push	 DWORD PTR _dwMinAbs$[ebp]
  00023	ff 75 f4	 push	 DWORD PTR _dwItemVnum$[ebp]
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_03GLKMLICL@iii@
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00031	83 c4 10	 add	 esp, 16			; 00000010H

; 149  : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?GetSashResultItem@@YAPAU_object@@PAU1@0@Z ENDP		; GetSashResultItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
;	COMDAT ?SendSashRefineRequest@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_wCell$ = -8						; size = 2
_bHere$ = -1						; size = 1
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?SendSashRefineRequest@@YAPAU_object@@PAU1@0@Z PROC	; SendSashRefineRequest, COMDAT

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 153  : 	BYTE bHere;
; 154  : 	WORD wCell;
; 155  : 	bool bGet = CPythonSash::Instance().GetAttachedItem(1, bHere, wCell);

  00003	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSash@@@@0PAVCPythonSash@@A ; CSingleton<CPythonSash>::ms_singleton
  00009	8d 45 f8	 lea	 eax, DWORD PTR _wCell$[ebp]
  0000c	83 ec 08	 sub	 esp, 8
  0000f	50		 push	 eax
  00010	8d 45 ff	 lea	 eax, DWORD PTR _bHere$[ebp]
  00013	50		 push	 eax
  00014	6a 01		 push	 1
  00016	e8 00 00 00 00	 call	 ?GetAttachedItem@CPythonSash@@QAE_NEAAEAAG@Z ; CPythonSash::GetAttachedItem

; 156  : 	if (bGet)

  0001b	84 c0		 test	 al, al
  0001d	74 11		 je	 SHORT $LN3@SendSashRe

; 157  : 	{
; 158  : 		if (bHere)

  0001f	80 7d ff 00	 cmp	 BYTE PTR _bHere$[ebp], 0
  00023	74 0b		 je	 SHORT $LN3@SendSashRe

; 159  : 		{
; 160  : 			CPythonNetworkStream & rkNetStream = CPythonNetworkStream::Instance();
; 161  : 			rkNetStream.SendSashRefinePacket();

  00025	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonNetworkStream@@@@0PAVCPythonNetworkStream@@A ; CSingleton<CPythonNetworkStream>::ms_singleton
  0002b	e8 00 00 00 00	 call	 ?SendSashRefinePacket@CPythonNetworkStream@@QAE_NXZ ; CPythonNetworkStream::SendSashRefinePacket
$LN3@SendSashRe:

; 162  : 		}
; 163  : 	}
; 164  : 	
; 165  : 	return Py_BuildNone();

  00030	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 166  : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?SendSashRefineRequest@@YAPAU_object@@PAU1@0@Z ENDP	; SendSashRefineRequest
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonSash.cpp
;	COMDAT ?initSash@@YAXXZ
_TEXT	SEGMENT
?initSash@@YAXXZ PROC					; initSash, COMDAT

; 169  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 170  : 	static PyMethodDef functions[] = {
; 171  : 										{"SendCloseRequest", SendSashCloseRequest, METH_VARARGS},
; 172  : 										{"Add", SendSashAdd, METH_VARARGS},
; 173  : 										{"Remove", SendSashRemove, METH_VARARGS},
; 174  : 										{"GetPrice", GetSashPrice, METH_VARARGS},
; 175  : 										{"GetAttachedItem", GetSashAttachedItem, METH_VARARGS},
; 176  : 										{"GetResultItem", GetSashResultItem, METH_VARARGS},
; 177  : 										{"SendRefineRequest", SendSashRefineRequest, METH_VARARGS},
; 178  : 										{NULL, NULL, NULL},
; 179  : 	};
; 180  : 	
; 181  : 	PyObject* pModule = Py_InitModule("sash", functions);

  00002	68 f5 03 00 00	 push	 1013			; 000003f5H
  00007	6a 00		 push	 0
  00009	6a 00		 push	 0
  0000b	68 00 00 00 00	 push	 OFFSET ?functions@?1??initSash@@YAXXZ@4PAUPyMethodDef@@A
  00010	68 00 00 00 00	 push	 OFFSET ??_C@_04PPKGDFDN@sash@
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_InitModule4

; 182  : 	PyModule_AddIntConstant(pModule, "ABSORPTION_SOCKET", SASH_ABSORPTION_SOCKET);

  0001b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__PyModule_AddIntConstant
  00021	8b f8		 mov	 edi, eax
  00023	6a 00		 push	 0
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@IECALNLB@ABSORPTION_SOCKET@
  0002a	57		 push	 edi
  0002b	ff d6		 call	 esi

; 183  : 	PyModule_AddIntConstant(pModule, "ABSORBED_SOCKET", SASH_ABSORBED_SOCKET);

  0002d	6a 01		 push	 1
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@OMEMJIA@ABSORBED_SOCKET@
  00034	57		 push	 edi
  00035	ff d6		 call	 esi

; 184  : 	PyModule_AddIntConstant(pModule, "CLEAN_ATTR_VALUE0", SASH_CLEAN_ATTR_VALUE0);

  00037	6a 07		 push	 7
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@MMHEJGIM@CLEAN_ATTR_VALUE0@
  0003e	57		 push	 edi
  0003f	ff d6		 call	 esi

; 185  : 	PyModule_AddIntConstant(pModule, "WINDOW_MAX_MATERIALS", SASH_WINDOW_MAX_MATERIALS);

  00041	6a 02		 push	 2
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EEPIJCBJ@WINDOW_MAX_MATERIALS@
  00048	57		 push	 edi
  00049	ff d6		 call	 esi
  0004b	83 c4 44	 add	 esp, 68			; 00000044H

; 186  : 	PyModule_AddIntConstant(pModule, "CLEAN_ATTR_VALUE_FIELD", 0);

  0004e	6a 00		 push	 0
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@GIMJACMK@CLEAN_ATTR_VALUE_FIELD@
  00055	57		 push	 edi
  00056	ff d6		 call	 esi

; 187  : 	PyModule_AddIntConstant(pModule, "LIMIT_RANGE", 1000);

  00058	68 e8 03 00 00	 push	 1000			; 000003e8H
  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KGAHGOKL@LIMIT_RANGE@
  00062	57		 push	 edi
  00063	ff d6		 call	 esi
  00065	83 c4 18	 add	 esp, 24			; 00000018H
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi

; 188  : }

  0006a	c3		 ret	 0
?initSash@@YAXXZ ENDP					; initSash
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??A?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QAEAAUSSashMaterial@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QAEAAUSSashMaterial@@I@Z PROC ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::operator[], COMDAT
; _this$ = ecx

; 1945 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1946 :         auto& _My_data = _Mypair._Myval2;
; 1947 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1948 :         _STL_VERIFY(
; 1949 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1950 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1951 : 
; 1952 :         return _My_data._Myfirst[_Pos];

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pos$[ebp]
  00006	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00009	03 01		 add	 eax, DWORD PTR [ecx]

; 1953 :     }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
??A?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QAEAAUSSashMaterial@@I@Z ENDP ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?size@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QBEIXZ PROC ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::size, COMDAT
; _this$ = ecx

; 1931 :         auto& _My_data = _Mypair._Myval2;
; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	69 c0 ab aa aa
	aa		 imul	 eax, eax, -1431655765

; 1933 :     }

  0000b	c3		 ret	 0
?size@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QBEIXZ ENDP ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?clear@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QAEXXZ PROC ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::clear, COMDAT
; _this$ = ecx

; 1825 :         auto& _My_data    = _Mypair._Myval2;
; 1826 :         pointer& _Myfirst = _My_data._Myfirst;
; 1827 :         pointer& _Mylast  = _My_data._Mylast;
; 1828 : 
; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00005	74 03		 je	 SHORT $LN1@clear

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00007	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN1@clear:

; 1840 :     }

  0000a	c3		 ret	 0
?clear@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QAEXXZ ENDP ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?resize@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$dead$ = 8					; size = 4
?resize@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QAEXI@Z PROC ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::resize, COMDAT
; _this$ = ecx

; 1653 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

  00000	53		 push	 ebx
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00004	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  00007	8b c3		 mov	 eax, ebx
  00009	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0000b	2b c1		 sub	 eax, ecx
  0000d	69 d0 ab aa aa
	aa		 imul	 edx, eax, -1431655765

; 1621 :         if (_Newsize < _Oldsize) { // trim

  00013	83 fa 02	 cmp	 edx, 2
  00016	76 0b		 jbe	 SHORT $LN4@resize

; 1622 :             const pointer _Newlast = _Myfirst + _Newsize;

  00018	8d 41 06	 lea	 eax, DWORD PTR [ecx+6]

; 1623 :             _Orphan_range(_Newlast, _Mylast);
; 1624 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1625 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1626 :             _Mylast = _Newlast;

  0001b	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0001e	5f		 pop	 edi

; 1654 :         // trim or append value-initialized elements, provide strong guarantee
; 1655 :         _Resize(_Newsize, _Value_init_tag{});
; 1656 :     }

  0001f	5b		 pop	 ebx
  00020	c2 04 00	 ret	 4
$LN4@resize:

; 1630 :         if (_Newsize > _Oldsize) { // append

  00023	73 3e		 jae	 SHORT $LN5@resize

; 1631 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00025	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00028	2b c1		 sub	 eax, ecx
  0002a	69 c0 ab aa aa
	aa		 imul	 eax, eax, -1431655765

; 1632 :             if (_Newsize > _Oldcapacity) { // reallocate

  00030	83 f8 02	 cmp	 eax, 2
  00033	73 0f		 jae	 SHORT $LN6@resize

; 1633 :                 _Resize_reallocate(_Newsize, _Val);

  00035	83 ec 08	 sub	 esp, 8
  00038	8b cf		 mov	 ecx, edi
  0003a	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Resize_reallocate<std::_Value_init_tag>
  0003f	5f		 pop	 edi

; 1654 :         // trim or append value-initialized elements, provide strong guarantee
; 1655 :         _Resize(_Newsize, _Value_init_tag{});
; 1656 :     }

  00040	5b		 pop	 ebx
  00041	c2 04 00	 ret	 4
$LN6@resize:

; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00044	b8 02 00 00 00	 mov	 eax, 2
  00049	2b c2		 sub	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1902 :     for (; 0 < _Count; --_Count) {

  0004b	74 13		 je	 SHORT $LN11@resize
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  0004d	56		 push	 esi
  0004e	8d 34 40	 lea	 esi, DWORD PTR [eax+eax*2]
  00051	56		 push	 esi
  00052	6a 00		 push	 0
  00054	53		 push	 ebx
  00055	e8 00 00 00 00	 call	 _memset
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005d	03 de		 add	 ebx, esi
  0005f	5e		 pop	 esi
$LN11@resize:
  00060	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
$LN5@resize:
  00063	5f		 pop	 edi

; 1654 :         // trim or append value-initialized elements, provide strong guarantee
; 1655 :         _Resize(_Newsize, _Value_init_tag{});
; 1656 :     }

  00064	5b		 pop	 ebx
  00065	c2 04 00	 ret	 4
?resize@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QAEXI@Z ENDP ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QAE@XZ PROC ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::~vector<SSashMaterial,std::allocator<SSashMaterial> >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 16		 mov	 edx, DWORD PTR [esi]
  00005	85 d2		 test	 edx, edx
  00007	74 48		 je	 SHORT $LN4@vector

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c2		 sub	 eax, edx
  0000e	69 c0 ab aa aa
	aa		 imul	 eax, eax, -1431655765
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00014	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00017	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001d	72 14		 jb	 SHORT $LN22@vector

; 147  :     _Bytes += _Non_user_size;

  0001f	57		 push	 edi

; 148  : 
; 149  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 7a fc	 mov	 edi, DWORD PTR [edx-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b d7		 sub	 edx, edi

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 23		 ja	 SHORT $LN19@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b d7		 mov	 edx, edi
  00032	5f		 pop	 edi
$LN22@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00033	51		 push	 ecx
  00034	52		 push	 edx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00043	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2114 :             _Myend   = nullptr;

  0004a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00051	5e		 pop	 esi

; 835  :     }

  00052	c3		 ret	 0
$LN19@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@vector:
  00058	cc		 int	 3
??1?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QAE@XZ ENDP ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::~vector<SSashMaterial,std::allocator<SSashMaterial> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??0?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QAE@XZ PROC ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::vector<SSashMaterial,std::allocator<SSashMaterial> >, COMDAT
; _this$ = ecx

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 674  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 675  :     }

  00006	8b c1		 mov	 eax, ecx

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 674  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 675  :     }

  00016	c3		 ret	 0
??0?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QAE@XZ ENDP ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::vector<SSashMaterial,std::allocator<SSashMaterial> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCPythonSash@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCPythonSash@@@@UAE@XZ PROC		; CSingleton<CPythonSash>::~CSingleton<CPythonSash>, COMDAT
; _this$ = ecx

; 19   : 	{ 

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCPythonSash@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSash@@@@0PAVCPythonSash@@A, 0 ; CSingleton<CPythonSash>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCPythonSash@@@@UAE@XZ ENDP		; CSingleton<CPythonSash>::~CSingleton<CPythonSash>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterBase\Singleton.h
;	COMDAT ??0?$CSingleton@VCPythonSash@@@@QAE@XZ
_TEXT	SEGMENT
??0?$CSingleton@VCPythonSash@@@@QAE@XZ PROC		; CSingleton<CPythonSash>::CSingleton<CPythonSash>, COMDAT
; _this$ = ecx

; 12   : 	{ 

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCPythonSash@@@@6B@

; 13   : 		assert(!ms_singleton);
; 14   : 		int offset = (int) (T*) 1 - (int) (CSingleton <T>*) (T*) 1; 
; 15   : 		ms_singleton = (T*) ((int) this + offset);
; 16   : 	} 

  00006	8b c1		 mov	 eax, ecx
  00008	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSash@@@@0PAVCPythonSash@@A, ecx ; CSingleton<CPythonSash>::ms_singleton
  0000e	c3		 ret	 0
??0?$CSingleton@VCPythonSash@@@@QAE@XZ ENDP		; CSingleton<CPythonSash>::CSingleton<CPythonSash>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCPythonSash@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCPythonSash@@@@UAEPAXI@Z PROC		; CSingleton<CPythonSash>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{ 

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  0000a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonSash@@@@0PAVCPythonSash@@A, 0 ; CSingleton<CPythonSash>::ms_singleton
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCPythonSash@@@@6B@
  0001a	74 0b		 je	 SHORT $LN6@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCPythonSash@@@@UAEPAXI@Z ENDP		; CSingleton<CPythonSash>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Getal@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEAAV?$allocator@USSashMaterial@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEAAV?$allocator@USSashMaterial@@@2@XZ PROC ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Getal, COMDAT
; _this$ = ecx

; 2244 :         return _Mypair._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 2245 :     }

  00002	c3		 ret	 0
?_Getal@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEAAV?$allocator@USSashMaterial@@@2@XZ ENDP ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Tidy@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEXXZ PROC ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Tidy, COMDAT
; _this$ = ecx

; 2098 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2099 :         auto& _Al         = _Getal();
; 2100 :         auto& _My_data    = _Mypair._Myval2;
; 2101 :         pointer& _Myfirst = _My_data._Myfirst;
; 2102 :         pointer& _Mylast  = _My_data._Mylast;
; 2103 :         pointer& _Myend   = _My_data._Myend;
; 2104 : 
; 2105 :         _My_data._Orphan_all();
; 2106 : 
; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 16		 mov	 edx, DWORD PTR [esi]
  00005	85 d2		 test	 edx, edx
  00007	74 48		 je	 SHORT $LN2@Tidy

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	2b c2		 sub	 eax, edx
  0000e	69 c0 ab aa aa
	aa		 imul	 eax, eax, -1431655765
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00014	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00017	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001d	72 14		 jb	 SHORT $LN20@Tidy

; 147  :     _Bytes += _Non_user_size;

  0001f	57		 push	 edi

; 148  : 
; 149  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 7a fc	 mov	 edi, DWORD PTR [edx-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b d7		 sub	 edx, edi

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 23		 ja	 SHORT $LN17@Tidy

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b d7		 mov	 edx, edi
  00032	5f		 pop	 edi
$LN20@Tidy:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00033	51		 push	 ecx
  00034	52		 push	 edx
  00035	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0003a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00043	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2114 :             _Myend   = nullptr;

  0004a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:

; 2116 :     }

  00051	5e		 pop	 esi
  00052	c3		 ret	 0
$LN17@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@Tidy:
  00058	cc		 int	 3
?_Tidy@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEXXZ ENDP ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@USSashMaterial@@@std@@V?$_Vector_val@U?$_Simple_types@USSashMaterial@@@std@@@2@$00@std@@QAEAAV?$allocator@USSashMaterial@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@USSashMaterial@@@std@@V?$_Vector_val@U?$_Simple_types@USSashMaterial@@@std@@@2@$00@std@@QAEAAV?$allocator@USSashMaterial@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<SSashMaterial>,std::_Vector_val<std::_Simple_types<SSashMaterial> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1384 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1385 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@USSashMaterial@@@std@@V?$_Vector_val@U?$_Simple_types@USSashMaterial@@@std@@@2@$00@std@@QAEAAV?$allocator@USSashMaterial@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<SSashMaterial>,std::_Vector_val<std::_Simple_types<SSashMaterial> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?deallocate@?$allocator@USSashMaterial@@@std@@QAEXQAUSSashMaterial@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@USSashMaterial@@@std@@QAEXQAUSSashMaterial@@I@Z PROC ; std::allocator<SSashMaterial>::deallocate, COMDAT
; _this$dead$ = ecx

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00012	72 12		 jb	 SHORT $LN17@deallocate

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00017	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001a	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00022	77 10		 ja	 SHORT $LN14@deallocate

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00024	8b c2		 mov	 eax, edx
$LN17@deallocate:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00026	51		 push	 ecx
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002d	83 c4 08	 add	 esp, 8

; 831  :     }

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
$LN14@deallocate:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00034	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
  00039	cc		 int	 3
?deallocate@?$allocator@USSashMaterial@@@std@@QAEXQAUSSashMaterial@@I@Z ENDP ; std::allocator<SSashMaterial>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USSashMaterial@@@std@@@std@@YAXPAUSSashMaterial@@QAU1@AAV?$allocator@USSashMaterial@@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$allocator@USSashMaterial@@@std@@@std@@YAXPAUSSashMaterial@@QAU1@AAV?$allocator@USSashMaterial@@@0@@Z PROC ; std::_Destroy_range<std::allocator<SSashMaterial> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 944  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 945  :     using _Ty = typename _Alloc::value_type;
; 946  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 947  :         for (; _First != _Last; ++_First) {
; 948  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 949  :         }
; 950  :     }
; 951  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@USSashMaterial@@@std@@@std@@YAXPAUSSashMaterial@@QAU1@AAV?$allocator@USSashMaterial@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<SSashMaterial> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Newsize$dead$ = 8					; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize@U_Value_init_tag@std@@@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Resize<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1614 :     _CONSTEXPR20 void _Resize(const size_type _Newsize, const _Ty2& _Val) {

  00000	53		 push	 ebx
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 1615 :         // trim or append elements, provide strong guarantee
; 1616 :         auto& _Al           = _Getal();
; 1617 :         auto& _My_data      = _Mypair._Myval2;
; 1618 :         pointer& _Myfirst   = _My_data._Myfirst;
; 1619 :         pointer& _Mylast    = _My_data._Mylast;
; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00004	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  00007	8b c3		 mov	 eax, ebx
  00009	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0000b	2b c1		 sub	 eax, ecx
  0000d	69 d0 ab aa aa
	aa		 imul	 edx, eax, -1431655765

; 1621 :         if (_Newsize < _Oldsize) { // trim

  00013	83 fa 02	 cmp	 edx, 2
  00016	76 0b		 jbe	 SHORT $LN2@Resize

; 1622 :             const pointer _Newlast = _Myfirst + _Newsize;

  00018	8d 41 06	 lea	 eax, DWORD PTR [ecx+6]

; 1623 :             _Orphan_range(_Newlast, _Mylast);
; 1624 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1625 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1626 :             _Mylast = _Newlast;

  0001b	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0001e	5f		 pop	 edi

; 1644 :             }
; 1645 :             _ASAN_VECTOR_RELEASE_GUARD;
; 1646 :             _Orphan_range(_Oldlast, _Oldlast);
; 1647 :         }
; 1648 : 
; 1649 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1650 :     }

  0001f	5b		 pop	 ebx
  00020	c2 08 00	 ret	 8
$LN2@Resize:

; 1627 :             return;
; 1628 :         }
; 1629 : 
; 1630 :         if (_Newsize > _Oldsize) { // append

  00023	73 3e		 jae	 SHORT $LN3@Resize

; 1631 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00025	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00028	2b c1		 sub	 eax, ecx
  0002a	69 c0 ab aa aa
	aa		 imul	 eax, eax, -1431655765

; 1632 :             if (_Newsize > _Oldcapacity) { // reallocate

  00030	83 f8 02	 cmp	 eax, 2
  00033	73 0f		 jae	 SHORT $LN4@Resize

; 1633 :                 _Resize_reallocate(_Newsize, _Val);

  00035	83 ec 08	 sub	 esp, 8
  00038	8b cf		 mov	 ecx, edi
  0003a	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Resize_reallocate<std::_Value_init_tag>
  0003f	5f		 pop	 edi

; 1644 :             }
; 1645 :             _ASAN_VECTOR_RELEASE_GUARD;
; 1646 :             _Orphan_range(_Oldlast, _Oldlast);
; 1647 :         }
; 1648 : 
; 1649 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1650 :     }

  00040	5b		 pop	 ebx
  00041	c2 08 00	 ret	 8
$LN4@Resize:

; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00044	b8 02 00 00 00	 mov	 eax, 2
  00049	2b c2		 sub	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1902 :     for (; 0 < _Count; --_Count) {

  0004b	74 13		 je	 SHORT $LN9@Resize
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  0004d	56		 push	 esi
  0004e	8d 34 40	 lea	 esi, DWORD PTR [eax+eax*2]
  00051	56		 push	 esi
  00052	6a 00		 push	 0
  00054	53		 push	 ebx
  00055	e8 00 00 00 00	 call	 _memset
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005d	03 de		 add	 ebx, esi
  0005f	5e		 pop	 esi
$LN9@Resize:
  00060	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
$LN3@Resize:
  00063	5f		 pop	 edi

; 1644 :             }
; 1645 :             _ASAN_VECTOR_RELEASE_GUARD;
; 1646 :             _Orphan_range(_Oldlast, _Oldlast);
; 1647 :         }
; 1648 : 
; 1649 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1650 :     }

  00064	5b		 pop	 ebx
  00065	c2 08 00	 ret	 8
??$_Resize@U_Value_init_tag@std@@@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@USSashMaterial@@@std@@V?$_Vector_val@U?$_Simple_types@USSashMaterial@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@USSashMaterial@@@std@@V?$_Vector_val@U?$_Simple_types@USSashMaterial@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<SSashMaterial>,std::_Vector_val<std::_Simple_types<SSashMaterial> >,1>::_Compressed_pair<std::allocator<SSashMaterial>,std::_Vector_val<std::_Simple_types<SSashMaterial> >,1><>, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1376 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00006	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1376 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00016	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@USSashMaterial@@@std@@V?$_Vector_val@U?$_Simple_types@USSashMaterial@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<SSashMaterial>,std::_Vector_val<std::_Simple_types<SSashMaterial> >,1>::_Compressed_pair<std::allocator<SSashMaterial>,std::_Vector_val<std::_Simple_types<SSashMaterial> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@USSashMaterial@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@USSashMaterial@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<SSashMaterial> >::_Vector_val<std::_Simple_types<SSashMaterial> >, COMDAT
; _this$ = ecx

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@USSashMaterial@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<SSashMaterial> >::_Vector_val<std::_Simple_types<SSashMaterial> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Orphan_range@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@ABEXPAUSSashMaterial@@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@ABEXPAUSSashMaterial@@0@Z PROC ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 2240 :     _CONSTEXPR20 void _Orphan_range(pointer, pointer) const {}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@ABEXPAUSSashMaterial@@0@Z ENDP ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0?$allocator@USSashMaterial@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@USSashMaterial@@@std@@QAE@XZ PROC	; std::allocator<SSashMaterial>::allocator<SSashMaterial>, COMDAT
; _this$ = ecx

; 819  :     constexpr allocator() noexcept {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@USSashMaterial@@@std@@QAE@XZ ENDP	; std::allocator<SSashMaterial>::allocator<SSashMaterial>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Ptr_container$1$ = -4					; size = 4
__Oldsize$1$ = -4					; size = 4
__Newsize$dead$ = 8					; size = 4
__Val$dead$ = 12					; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1574 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 1575 :         if (_Newsize > max_size()) {
; 1576 :             _Xlength();
; 1577 :         }
; 1578 : 
; 1579 :         auto& _Al         = _Getal();
; 1580 :         auto& _My_data    = _Mypair._Myval2;
; 1581 :         pointer& _Myfirst = _My_data._Myfirst;
; 1582 :         pointer& _Mylast  = _My_data._Mylast;
; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00009	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0000c	2b 07		 sub	 eax, DWORD PTR [edi]
  0000e	69 c0 ab aa aa
	aa		 imul	 eax, eax, -1431655765
  00014	89 45 fc	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00017	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0001a	2b 07		 sub	 eax, DWORD PTR [edi]
  0001c	69 d0 ab aa aa
	aa		 imul	 edx, eax, -1431655765

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00022	b8 55 55 55 55	 mov	 eax, 1431655765		; 55555555H
  00027	8b ca		 mov	 ecx, edx
  00029	d1 e9		 shr	 ecx, 1
  0002b	2b c1		 sub	 eax, ecx
  0002d	3b d0		 cmp	 edx, eax
  0002f	76 13		 jbe	 SHORT $LN10@Resize_rea

; 2030 :             return _Max; // geometric growth would overflow

  00031	83 c8 ff	 or	 eax, -1
  00034	83 cb ff	 or	 ebx, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0003d	83 c4 04	 add	 esp, 4
  00040	8b f0		 mov	 esi, eax
  00042	eb 53		 jmp	 SHORT $LN21@Resize_rea
$LN10@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00044	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]

; 2034 : 
; 2035 :         if (_Geometric < _Newsize) {

  00047	83 f8 02	 cmp	 eax, 2
  0004a	73 14		 jae	 SHORT $LN11@Resize_rea

; 2036 :             return _Newsize; // geometric growth would be insufficient

  0004c	b8 06 00 00 00	 mov	 eax, 6
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00051	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2036 :             return _Newsize; // geometric growth would be insufficient

  00052	8b d8		 mov	 ebx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00054	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00059	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0005c	8b f0		 mov	 esi, eax
  0005e	eb 37		 jmp	 SHORT $LN21@Resize_rea
$LN11@Resize_rea:

; 60   :         if (_Count > _Max_possible) {

  00060	3d 55 55 55 55	 cmp	 eax, 1431655765		; 55555555H
  00065	0f 87 b2 00 00
	00		 ja	 $LN99@Resize_rea

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0006b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0006e	8b d8		 mov	 ebx, eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00070	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00075	72 0d		 jb	 SHORT $LN23@Resize_rea

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	83 c4 04	 add	 esp, 4
  00080	8b f0		 mov	 esi, eax
  00082	eb 13		 jmp	 SHORT $LN21@Resize_rea
$LN23@Resize_rea:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00084	85 c0		 test	 eax, eax
  00086	74 0d		 je	 SHORT $LN24@Resize_rea

; 77   :         return ::operator new(_Bytes);

  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0008e	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00091	8b f0		 mov	 esi, eax
  00093	eb 02		 jmp	 SHORT $LN21@Resize_rea
$LN24@Resize_rea:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00095	33 f6		 xor	 esi, esi
$LN21@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1588 :         const pointer _Appended_first = _Newvec + _Oldsize;

  00097	8b 55 fc	 mov	 edx, DWORD PTR __Oldsize$1$[ebp]

; 1596 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  0009a	b8 02 00 00 00	 mov	 eax, 2
  0009f	8d 0c 56	 lea	 ecx, DWORD PTR [esi+edx*2]
  000a2	03 ca		 add	 ecx, edx
  000a4	2b c2		 sub	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1902 :     for (; 0 < _Count; --_Count) {

  000a6	74 0f		 je	 SHORT $LN32@Resize_rea
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1596 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000a8	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000ab	50		 push	 eax
  000ac	6a 00		 push	 0
  000ae	51		 push	 ecx
  000af	e8 00 00 00 00	 call	 _memset
  000b4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN32@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000b7	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  000ba	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000bc	56		 push	 esi
  000bd	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSSashMaterial@@PAU1@@std@@YAPAUSSashMaterial@@PAU1@00@Z ; std::_Copy_memmove<SSashMaterial *,SSashMaterial *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000c2	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c4	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000c7	85 c9		 test	 ecx, ecx
  000c9	74 36		 je	 SHORT $LN71@Resize_rea

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000cb	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000ce	2b c1		 sub	 eax, ecx
  000d0	69 c0 ab aa aa
	aa		 imul	 eax, eax, -1431655765
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d6	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000d9	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000df	72 16		 jb	 SHORT $LN83@Resize_rea

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000e1	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  000e4	83 c2 23	 add	 edx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000e7	2b c8		 sub	 ecx, eax
  000e9	89 45 fc	 mov	 DWORD PTR __Ptr_container$1$[ebp], eax

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ec	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  000ef	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000f2	77 24		 ja	 SHORT $LN80@Resize_rea

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000f4	8b 4d fc	 mov	 ecx, DWORD PTR __Ptr_container$1$[ebp]
$LN83@Resize_rea:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000f7	52		 push	 edx
  000f8	51		 push	 ecx
  000f9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000fe	83 c4 08	 add	 esp, 8
$LN71@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2092 :         _Myfirst = _Newvec;

  00101	89 37		 mov	 DWORD PTR [edi], esi

; 2093 :         _Mylast  = _Newvec + _Newsize;

  00103	8d 46 06	 lea	 eax, DWORD PTR [esi+6]
  00106	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00109	8d 04 33	 lea	 eax, DWORD PTR [ebx+esi]
  0010c	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx

; 1611 :     }

  00112	8b e5		 mov	 esp, ebp
  00114	5d		 pop	 ebp
  00115	c2 08 00	 ret	 8
$LN80@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00118	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN99@Resize_rea:

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0011d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN97@Resize_rea:
  00122	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@USSashMaterial@@@std@@@std@@YAPAUSSashMaterial@@PAU1@IAAV?$allocator@USSashMaterial@@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@USSashMaterial@@@std@@@std@@YAPAUSSashMaterial@@PAU1@IAAV?$allocator@USSashMaterial@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<SSashMaterial> >, COMDAT
; __First$ = ecx
; __Count$ = edx

; 1887 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1888 :     // value-initialize _Count objects to raw _First, using _Al
; 1889 :     using _Ptrty = typename _Alloc::value_type*;
; 1890 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1891 : #if _HAS_CXX20
; 1892 :         if (!_STD is_constant_evaluated())
; 1893 : #endif // _HAS_CXX20
; 1894 :         {
; 1895 :             auto _PFirst = _Unfancy(_First);
; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1897 :             return _First + _Count;
; 1898 :         }
; 1899 :     }
; 1900 : 
; 1901 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1902 :     for (; 0 < _Count; --_Count) {

  00003	85 d2		 test	 edx, edx
  00005	74 16		 je	 SHORT $LN22@Uninitiali
  00007	56		 push	 esi
  00008	8d 34 52	 lea	 esi, DWORD PTR [edx+edx*2]
  0000b	56		 push	 esi
  0000c	6a 00		 push	 0
  0000e	57		 push	 edi
  0000f	e8 00 00 00 00	 call	 _memset
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	8d 04 3e	 lea	 eax, DWORD PTR [esi+edi]

; 1903 :         _Backout._Emplace_back();
; 1904 :     }
; 1905 : 
; 1906 :     return _Backout._Release();

  0001a	5e		 pop	 esi
  0001b	5f		 pop	 edi

; 1907 : }

  0001c	c3		 ret	 0
$LN22@Uninitiali:

; 1903 :         _Backout._Emplace_back();
; 1904 :     }
; 1905 : 
; 1906 :     return _Backout._Release();

  0001d	8b c7		 mov	 eax, edi
  0001f	5f		 pop	 edi

; 1907 : }

  00020	c3		 ret	 0
??$_Uninitialized_value_construct_n@V?$allocator@USSashMaterial@@@std@@@std@@YAPAUSSashMaterial@@PAU1@IAAV?$allocator@USSashMaterial@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<SSashMaterial> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@USSashMaterial@@@std@@@std@@QAEPAUSSashMaterial@@XZ
_TEXT	SEGMENT
?_Release@?$_Uninitialized_backout_al@V?$allocator@USSashMaterial@@@std@@@std@@QAEPAUSSashMaterial@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<SSashMaterial> >::_Release, COMDAT
; _this$ = ecx

; 1668 :         _First = _Last;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	89 01		 mov	 DWORD PTR [ecx], eax

; 1669 :         return _Last;
; 1670 :     }

  00005	c3		 ret	 0
?_Release@?$_Uninitialized_backout_al@V?$allocator@USSashMaterial@@@std@@@std@@QAEPAUSSashMaterial@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<SSashMaterial> >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@USSashMaterial@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$allocator@USSashMaterial@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<SSashMaterial> >::~_Uninitialized_backout_al<std::allocator<SSashMaterial> >, COMDAT
; _this$ = ecx

; 1658 :         _Destroy_range(_First, _Last, _Al);
; 1659 :     }

  00000	c2 00 00	 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@USSashMaterial@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<SSashMaterial> >::~_Uninitialized_backout_al<std::allocator<SSashMaterial> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@USSashMaterial@@@std@@@std@@QAE@PAUSSashMaterial@@AAV?$allocator@USSashMaterial@@@1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@USSashMaterial@@@std@@@std@@QAE@PAUSSashMaterial@@AAV?$allocator@USSashMaterial@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<SSashMaterial> >::_Uninitialized_backout_al<std::allocator<SSashMaterial> >, COMDAT
; _this$ = ecx

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Al_$[ebp]
  0000e	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00011	8b c1		 mov	 eax, ecx
  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??0?$_Uninitialized_backout_al@V?$allocator@USSashMaterial@@@std@@@std@@QAE@PAUSSashMaterial@@AAV?$allocator@USSashMaterial@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<SSashMaterial> >::_Uninitialized_backout_al<std::allocator<SSashMaterial> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@CAXXZ PROC ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@CAXXZ ENDP ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Change_array@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEXQAUSSashMaterial@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$dead$ = 12					; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEXQAUSSashMaterial@@II@Z PROC ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Change_array, COMDAT
; _this$ = ecx

; 2076 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2077 :         // orphan all iterators, discard old array, acquire new array
; 2078 :         auto& _Al         = _Getal();
; 2079 :         auto& _My_data    = _Mypair._Myval2;
; 2080 :         pointer& _Myfirst = _My_data._Myfirst;
; 2081 :         pointer& _Mylast  = _My_data._Mylast;
; 2082 :         pointer& _Myend   = _My_data._Myend;
; 2083 : 
; 2084 :         _My_data._Orphan_all();
; 2085 : 
; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 16		 mov	 edx, DWORD PTR [esi]
  00008	85 d2		 test	 edx, edx
  0000a	74 34		 je	 SHORT $LN8@Change_arr

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000f	2b c2		 sub	 eax, edx
  00011	69 c0 ab aa aa
	aa		 imul	 eax, eax, -1431655765
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00017	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 14		 jb	 SHORT $LN20@Change_arr

; 147  :     _Bytes += _Non_user_size;

  00022	57		 push	 edi

; 148  : 
; 149  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);
; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00023	8b 7a fc	 mov	 edi, DWORD PTR [edx-4]
  00026	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00029	2b d7		 sub	 edx, edi

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002b	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  0002e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00031	77 28		 ja	 SHORT $LN17@Change_arr

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00033	8b d7		 mov	 edx, edi
  00035	5f		 pop	 edi
$LN20@Change_arr:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00036	51		 push	 ecx
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003d	83 c4 08	 add	 esp, 8
$LN8@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2092 :         _Myfirst = _Newvec;

  00040	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00043	89 0e		 mov	 DWORD PTR [esi], ecx

; 2093 :         _Mylast  = _Newvec + _Newsize;

  00045	8d 41 06	 lea	 eax, DWORD PTR [ecx+6]
  00048	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  0004b	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  0004e	8d 0c 41	 lea	 ecx, DWORD PTR [ecx+eax*2]
  00051	03 c8		 add	 ecx, eax
  00053	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00056	5e		 pop	 esi

; 2096 :     }

  00057	5d		 pop	 ebp
  00058	c2 0c 00	 ret	 12			; 0000000cH
$LN17@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@Change_arr:
  00060	cc		 int	 3
?_Change_array@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@AAEXQAUSSashMaterial@@II@Z ENDP ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Calculate_growth@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$dead$ = 8					; size = 4
?_Calculate_growth@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@ABEII@Z PROC ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]

; 2025 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 2026 :         const size_type _Oldcapacity = capacity();
; 2027 :         const auto _Max              = max_size();
; 2028 : 
; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00005	b9 55 55 55 55	 mov	 ecx, 1431655765		; 55555555H
  0000a	56		 push	 esi

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0000b	69 f0 ab aa aa
	aa		 imul	 esi, eax, -1431655765

; 2025 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 2026 :         const size_type _Oldcapacity = capacity();
; 2027 :         const auto _Max              = max_size();
; 2028 : 
; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00011	8b d6		 mov	 edx, esi
  00013	d1 ea		 shr	 edx, 1
  00015	2b ca		 sub	 ecx, edx
  00017	3b f1		 cmp	 esi, ecx
  00019	76 09		 jbe	 SHORT $LN2@Calculate_

; 2030 :             return _Max; // geometric growth would overflow

  0001b	b8 55 55 55 55	 mov	 eax, 1431655765		; 55555555H
  00020	5e		 pop	 esi

; 2036 :             return _Newsize; // geometric growth would be insufficient
; 2037 :         }
; 2038 : 
; 2039 :         return _Geometric; // geometric growth is sufficient
; 2040 :     }

  00021	c2 04 00	 ret	 4
$LN2@Calculate_:

; 2031 :         }
; 2032 : 
; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00024	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]

; 2034 : 
; 2035 :         if (_Geometric < _Newsize) {

  00027	b9 02 00 00 00	 mov	 ecx, 2
  0002c	3b c1		 cmp	 eax, ecx
  0002e	5e		 pop	 esi
  0002f	0f 42 c1	 cmovb	 eax, ecx

; 2036 :             return _Newsize; // geometric growth would be insufficient
; 2037 :         }
; 2038 : 
; 2039 :         return _Geometric; // geometric growth is sufficient
; 2040 :     }

  00032	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@ABEII@Z ENDP ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?max_size@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QBEIXZ PROC ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::max_size, COMDAT
; _this$dead$ = ecx

; 1936 :         return (_STD min)(

  00000	b8 55 55 55 55	 mov	 eax, 1431655765		; 55555555H

; 1937 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1938 :     }

  00005	c3		 ret	 0
?max_size@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QBEIXZ ENDP ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?allocate@?$allocator@USSashMaterial@@@std@@QAEPAUSSashMaterial@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@USSashMaterial@@@std@@QAEPAUSSashMaterial@@I@Z PROC ; std::allocator<SSashMaterial>::allocate, COMDAT
; _this$dead$ = ecx

; 833  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   :         if (_Count > _Max_possible) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	3d 55 55 55 55	 cmp	 eax, 1431655765		; 55555555H
  0000b	77 2e		 ja	 SHORT $LN16@allocate

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0000d	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00010	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00015	72 0d		 jb	 SHORT $LN9@allocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0001d	83 c4 04	 add	 esp, 4

; 834  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 836  :     }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN9@allocate:

; 234  :     if (_Bytes != 0) {

  00024	85 c0		 test	 eax, eax
  00026	74 0d		 je	 SHORT $LN10@allocate

; 77   :         return ::operator new(_Bytes);

  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002e	83 c4 04	 add	 esp, 4

; 834  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 836  :     }

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN10@allocate:

; 238  :     return nullptr;

  00035	33 c0		 xor	 eax, eax

; 834  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 836  :     }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
$LN16@allocate:

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0003b	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN14@allocate:
  00040	cc		 int	 3
?allocate@?$allocator@USSashMaterial@@@std@@QAEPAUSSashMaterial@@I@Z ENDP ; std::allocator<SSashMaterial>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Getal@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@ABEABV?$allocator@USSashMaterial@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@ABEABV?$allocator@USSashMaterial@@@2@XZ PROC ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Getal, COMDAT
; _this$ = ecx

; 2248 :         return _Mypair._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 2249 :     }

  00002	c3		 ret	 0
?_Getal@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@ABEABV?$allocator@USSashMaterial@@@2@XZ ENDP ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?capacity@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QBEIXZ PROC ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::capacity, COMDAT
; _this$ = ecx

; 1941 :         auto& _My_data = _Mypair._Myval2;
; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	69 c0 ab aa aa
	aa		 imul	 eax, eax, -1431655765

; 1943 :     }

  0000b	c3		 ret	 0
?capacity@?$vector@USSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@QBEIXZ ENDP ; std::vector<SSashMaterial,std::allocator<SSashMaterial> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@USSashMaterial@@@std@@@std@@SAIABV?$allocator@USSashMaterial@@@2@@Z
_TEXT	SEGMENT
?max_size@?$_Default_allocator_traits@V?$allocator@USSashMaterial@@@std@@@std@@SAIABV?$allocator@USSashMaterial@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<SSashMaterial> >::max_size, COMDAT
; ___formal$dead$ = ecx

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00000	b8 55 55 55 55	 mov	 eax, 1431655765		; 55555555H

; 695  :     }

  00005	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@USSashMaterial@@@std@@@std@@SAIABV?$allocator@USSashMaterial@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<SSashMaterial> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@USSashMaterial@@@std@@V?$_Vector_val@U?$_Simple_types@USSashMaterial@@@std@@@2@$00@std@@QBEABV?$allocator@USSashMaterial@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@USSashMaterial@@@std@@V?$_Vector_val@U?$_Simple_types@USSashMaterial@@@std@@@2@$00@std@@QBEABV?$allocator@USSashMaterial@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<SSashMaterial>,std::_Vector_val<std::_Simple_types<SSashMaterial> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1388 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1389 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@USSashMaterial@@@std@@V?$_Vector_val@U?$_Simple_types@USSashMaterial@@@std@@@2@$00@std@@QBEABV?$allocator@USSashMaterial@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<SSashMaterial>,std::_Vector_val<std::_Simple_types<SSashMaterial> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAUSSashMaterial@@@std@@YA?A_TABQAUSSashMaterial@@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABQAUSSashMaterial@@@std@@YA?A_TABQAUSSashMaterial@@@Z PROC ; std::_Get_unwrapped<SSashMaterial * const &>, COMDAT
; __It$ = ecx

; 912  :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 913  :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 914  :         return _It + 0;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 915  :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 916  :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 917  :     } else {
; 918  :         return static_cast<_Iter&&>(_It);
; 919  :     }
; 920  : }

  00002	c3		 ret	 0
??$_Get_unwrapped@ABQAUSSashMaterial@@@std@@YA?A_TABQAUSSashMaterial@@@Z ENDP ; std::_Get_unwrapped<SSashMaterial * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@YAPAUSSashMaterial@@QAU1@0PAU1@AAV?$allocator@USSashMaterial@@@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAUSSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@YAPAUSSashMaterial@@QAU1@0PAU1@AAV?$allocator@USSashMaterial@@@0@@Z PROC ; std::_Uninitialized_move<SSashMaterial *,std::allocator<SSashMaterial> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1788 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1789 :     // move [_First, _Last) to raw _Dest, using _Al
; 1790 :     // note: only called internally from elsewhere in the STL
; 1791 :     using _Ptrval     = typename _Alloc::value_type*;
; 1792 :     auto _UFirst      = _Get_unwrapped(_First);
; 1793 :     const auto _ULast = _Get_unwrapped(_Last);
; 1794 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1795 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1796 : #if _HAS_CXX20
; 1797 :         if (!_STD is_constant_evaluated())
; 1798 : #endif // _HAS_CXX20
; 1799 :         {
; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Dest$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	53		 push	 ebx
  0000a	8b fa		 mov	 edi, edx
  0000c	8b f1		 mov	 esi, ecx
  0000e	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSSashMaterial@@PAU1@@std@@YAPAUSSashMaterial@@PAU1@00@Z ; std::_Copy_memmove<SSashMaterial *,SSashMaterial *>

; 1801 :             return _Dest + (_ULast - _UFirst);

  00013	2b fe		 sub	 edi, esi
  00015	b8 56 55 55 55	 mov	 eax, 1431655766		; 55555556H
  0001a	f7 ef		 imul	 edi
  0001c	83 c4 04	 add	 esp, 4
  0001f	8b ca		 mov	 ecx, edx
  00021	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00024	03 ca		 add	 ecx, edx
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	8d 04 4b	 lea	 eax, DWORD PTR [ebx+ecx*2]
  0002b	03 c1		 add	 eax, ecx
  0002d	5b		 pop	 ebx

; 1802 :         }
; 1803 :     }
; 1804 : 
; 1805 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {
; 1807 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1808 :     }
; 1809 : 
; 1810 :     return _Backout._Release();
; 1811 : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
??$_Uninitialized_move@PAUSSashMaterial@@V?$allocator@USSashMaterial@@@std@@@std@@YAPAUSSashMaterial@@QAU1@0PAU1@AAV?$allocator@USSashMaterial@@@0@@Z ENDP ; std::_Uninitialized_move<SSashMaterial *,std::allocator<SSashMaterial> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@USSashMaterial@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@USSashMaterial@@@std@@@std@@QAEXXZ PROC ; std::_Uninitialized_backout_al<std::allocator<SSashMaterial> >::_Emplace_back<>, COMDAT
; _this$ = ecx

; 1663 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00003	33 d2		 xor	 edx, edx
  00005	66 89 10	 mov	 WORD PTR [eax], dx
  00008	88 50 02	 mov	 BYTE PTR [eax+2], dl

; 1664 :         ++_Last;

  0000b	83 41 04 03	 add	 DWORD PTR [ecx+4], 3

; 1665 :     }

  0000f	c3		 ret	 0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@USSashMaterial@@@std@@@std@@QAEXXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<SSashMaterial> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Get_size_of_n@$02@std@@YAII@Z
_TEXT	SEGMENT
??$_Get_size_of_n@$02@std@@YAII@Z PROC			; std::_Get_size_of_n<3>, COMDAT
; __Count$ = ecx

; 56   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;
; 57   : 
; 58   :     if constexpr (_Overflow_is_possible) {
; 59   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 60   :         if (_Count > _Max_possible) {

  00000	81 f9 55 55 55
	55		 cmp	 ecx, 1431655765		; 55555555H
  00006	0f 87 00 00 00
	00		 ja	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 61   :             _Throw_bad_array_new_length(); // multiply overflow
; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0000c	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]

; 66   : }

  0000f	c3		 ret	 0
??$_Get_size_of_n@$02@std@@YAII@Z ENDP			; std::_Get_size_of_n<3>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$move@AAUSSashMaterial@@@std@@YA$$QAUSSashMaterial@@AAU1@@Z
_TEXT	SEGMENT
??$move@AAUSSashMaterial@@@std@@YA$$QAUSSashMaterial@@AAU1@@Z PROC ; std::move<SSashMaterial &>, COMDAT
; __Arg$ = ecx

; 1437 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1438 : }

  00002	c3		 ret	 0
??$move@AAUSSashMaterial@@@std@@YA$$QAUSSashMaterial@@AAU1@@Z ENDP ; std::move<SSashMaterial &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$_Unfancy@USSashMaterial@@@std@@YAPAUSSashMaterial@@PAU1@@Z
_TEXT	SEGMENT
??$_Unfancy@USSashMaterial@@@std@@YAPAUSSashMaterial@@PAU1@@Z PROC ; std::_Unfancy<SSashMaterial>, COMDAT
; __Ptr$ = ecx

; 294  :     return _Ptr;

  00000	8b c1		 mov	 eax, ecx

; 295  : }

  00002	c3		 ret	 0
??$_Unfancy@USSashMaterial@@@std@@YAPAUSSashMaterial@@PAU1@@Z ENDP ; std::_Unfancy<SSashMaterial>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAUSSashMaterial@@PAU1@@std@@YAPAUSSashMaterial@@PAU1@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_memmove@PAUSSashMaterial@@PAU1@@std@@YAPAUSSashMaterial@@PAU1@00@Z PROC ; std::_Copy_memmove<SSashMaterial *,SSashMaterial *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);
; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx
  0000a	2b f9		 sub	 edi, ecx
  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  00017	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Copy_memmove@PAUSSashMaterial@@PAU1@@std@@YAPAUSSashMaterial@@PAU1@00@Z ENDP ; std::_Copy_memmove<SSashMaterial *,SSashMaterial *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_To_address@PAUSSashMaterial@@@std@@YA?A_PABQAUSSashMaterial@@@Z
_TEXT	SEGMENT
??$_To_address@PAUSSashMaterial@@@std@@YA?A_PABQAUSSashMaterial@@@Z PROC ; std::_To_address<SSashMaterial *>, COMDAT
; __Val$ = ecx

; 3703 :     _STL_INTERNAL_STATIC_ASSERT(contiguous_iterator<_Iter>);
; 3704 :     return _STD to_address(_Val);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 3705 : }

  00002	c3		 ret	 0
??$_To_address@PAUSSashMaterial@@@std@@YA?A_PABQAUSSashMaterial@@@Z ENDP ; std::_To_address<SSashMaterial *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Emplace_back@USSashMaterial@@@?$_Uninitialized_backout_al@V?$allocator@USSashMaterial@@@std@@@std@@QAEX$$QAUSSashMaterial@@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@USSashMaterial@@@?$_Uninitialized_backout_al@V?$allocator@USSashMaterial@@@std@@@std@@QAEX$$QAUSSashMaterial@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<SSashMaterial> >::_Emplace_back<SSashMaterial>, COMDAT
; _this$ = ecx

; 1662 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 55 08	 mov	 edx, DWORD PTR _<_Vals_0>$[ebp]

; 1662 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00006	56		 push	 esi

; 1663 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00007	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  0000a	66 8b 02	 mov	 ax, WORD PTR [edx]
  0000d	66 89 06	 mov	 WORD PTR [esi], ax
  00010	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00013	88 46 02	 mov	 BYTE PTR [esi+2], al

; 1664 :         ++_Last;

  00016	83 41 04 03	 add	 DWORD PTR [ecx+4], 3
  0001a	5e		 pop	 esi

; 1665 :     }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
??$_Emplace_back@USSashMaterial@@@?$_Uninitialized_backout_al@V?$allocator@USSashMaterial@@@std@@@std@@QAEX$$QAUSSashMaterial@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<SSashMaterial> >::_Emplace_back<SSashMaterial>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$construct@USSashMaterial@@$$V@?$_Default_allocator_traits@V?$allocator@USSashMaterial@@@std@@@std@@SAXAAV?$allocator@USSashMaterial@@@1@QAUSSashMaterial@@@Z
_TEXT	SEGMENT
??$construct@USSashMaterial@@$$V@?$_Default_allocator_traits@V?$allocator@USSashMaterial@@@std@@@std@@SAXAAV?$allocator@USSashMaterial@@@1@QAUSSashMaterial@@@Z PROC ; std::_Default_allocator_traits<std::allocator<SSashMaterial> >::construct<SSashMaterial>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00000	33 c0		 xor	 eax, eax
  00002	66 89 02	 mov	 WORD PTR [edx], ax
  00005	88 42 02	 mov	 BYTE PTR [edx+2], al

; 681  :         }
; 682  :     }

  00008	c3		 ret	 0
??$construct@USSashMaterial@@$$V@?$_Default_allocator_traits@V?$allocator@USSashMaterial@@@std@@@std@@SAXAAV?$allocator@USSashMaterial@@@1@QAUSSashMaterial@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<SSashMaterial> >::construct<SSashMaterial>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$to_address@USSashMaterial@@@std@@YAPAUSSashMaterial@@QAU1@@Z
_TEXT	SEGMENT
??$to_address@USSashMaterial@@@std@@YAPAUSSashMaterial@@QAU1@@Z PROC ; std::to_address<SSashMaterial>, COMDAT
; __Val$ = ecx

; 290  :     static_assert(!is_function_v<_Ty>,
; 291  :         "N4810 20.10.4 [pointer.conversion]/2: The program is ill-formed if T is a function type.");
; 292  :     return _Val;

  00000	8b c1		 mov	 eax, ecx

; 293  : }

  00002	c3		 ret	 0
??$to_address@USSashMaterial@@@std@@YAPAUSSashMaterial@@QAU1@@Z ENDP ; std::to_address<SSashMaterial>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@USSashMaterial@@@std@@YA$$QAUSSashMaterial@@AAU1@@Z
_TEXT	SEGMENT
??$forward@USSashMaterial@@@std@@YA$$QAUSSashMaterial@@AAU1@@Z PROC ; std::forward<SSashMaterial>, COMDAT
; __Arg$ = ecx

; 1426 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1427 : }

  00002	c3		 ret	 0
??$forward@USSashMaterial@@@std@@YA$$QAUSSashMaterial@@AAU1@@Z ENDP ; std::forward<SSashMaterial>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$construct@USSashMaterial@@U1@@?$_Default_allocator_traits@V?$allocator@USSashMaterial@@@std@@@std@@SAXAAV?$allocator@USSashMaterial@@@1@QAUSSashMaterial@@$$QAU3@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@USSashMaterial@@U1@@?$_Default_allocator_traits@V?$allocator@USSashMaterial@@@std@@@std@@SAXAAV?$allocator@USSashMaterial@@@1@QAUSSashMaterial@@$$QAU3@@Z PROC ; std::_Default_allocator_traits<std::allocator<SSashMaterial> >::construct<SSashMaterial,SSashMaterial>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00006	66 8b 01	 mov	 ax, WORD PTR [ecx]
  00009	66 89 02	 mov	 WORD PTR [edx], ax
  0000c	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  0000f	88 42 02	 mov	 BYTE PTR [edx+2], al

; 681  :         }
; 682  :     }

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??$construct@USSashMaterial@@U1@@?$_Default_allocator_traits@V?$allocator@USSashMaterial@@@std@@@std@@SAXAAV?$allocator@USSashMaterial@@@1@QAUSSashMaterial@@$$QAU3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<SSashMaterial> >::construct<SSashMaterial,SSashMaterial>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$construct_at@USSashMaterial@@$$V$0A@@std@@YAPAUSSashMaterial@@QAU1@@Z
_TEXT	SEGMENT
??$construct_at@USSashMaterial@@$$V$0A@@std@@YAPAUSSashMaterial@@QAU1@@Z PROC ; std::construct_at<SSashMaterial,0>, COMDAT
; __Location$ = ecx

; 218  :     _MSVC_CONSTEXPR return ::new (_Voidify_iter(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00000	33 c0		 xor	 eax, eax
  00002	66 89 01	 mov	 WORD PTR [ecx], ax
  00005	88 41 02	 mov	 BYTE PTR [ecx+2], al
  00008	8b c1		 mov	 eax, ecx

; 219  : }

  0000a	c3		 ret	 0
??$construct_at@USSashMaterial@@$$V$0A@@std@@YAPAUSSashMaterial@@QAU1@@Z ENDP ; std::construct_at<SSashMaterial,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Voidify_iter@PAUSSashMaterial@@@std@@YAPAXPAUSSashMaterial@@@Z
_TEXT	SEGMENT
??$_Voidify_iter@PAUSSashMaterial@@@std@@YAPAXPAUSSashMaterial@@@Z PROC ; std::_Voidify_iter<SSashMaterial *>, COMDAT
; __It$ = ecx

; 201  :     if constexpr (is_pointer_v<_Iter>) {
; 202  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  00000	8b c1		 mov	 eax, ecx

; 203  :     } else {
; 204  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 205  :     }
; 206  : }

  00002	c3		 ret	 0
??$_Voidify_iter@PAUSSashMaterial@@@std@@YAPAXPAUSSashMaterial@@@Z ENDP ; std::_Voidify_iter<SSashMaterial *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$construct_at@USSashMaterial@@U1@$0A@@std@@YAPAUSSashMaterial@@QAU1@$$QAU1@@Z
_TEXT	SEGMENT
??$construct_at@USSashMaterial@@U1@$0A@@std@@YAPAUSSashMaterial@@QAU1@$$QAU1@@Z PROC ; std::construct_at<SSashMaterial,SSashMaterial,0>, COMDAT
; __Location$ = ecx
; _<_Args_0>$ = edx

; 218  :     _MSVC_CONSTEXPR return ::new (_Voidify_iter(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00000	66 8b 02	 mov	 ax, WORD PTR [edx]
  00003	66 89 01	 mov	 WORD PTR [ecx], ax
  00006	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00009	88 41 02	 mov	 BYTE PTR [ecx+2], al
  0000c	8b c1		 mov	 eax, ecx

; 219  : }

  0000e	c3		 ret	 0
??$construct_at@USSashMaterial@@U1@$0A@@std@@YAPAUSSashMaterial@@QAU1@$$QAU1@@Z ENDP ; std::construct_at<SSashMaterial,SSashMaterial,0>
_TEXT	ENDS
END
