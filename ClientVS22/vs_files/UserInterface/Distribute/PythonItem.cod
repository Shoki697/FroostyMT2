; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

	TITLE	e:\metin2_server\solwaynesf v6\clientvs22\vs_files\userinterface\distribute\pythonitem.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BH@BBCPOMJB@Item?3?5Inst?5?$CFd?0?5Pool?5?$CFd@ ; `string'
PUBLIC	??_C@_0BJ@CMCGILDJ@SetDropSoundFile?5?$CFd?5?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0CO@ILCHIEAM@d?3?1ymir?5work?1effect?1etc?1dropite@ ; `string'
PUBLIC	??_C@_0CC@LIGJBHKC@CDynamicPool?$DMTGroundItemInstanc@ ; `string'
PUBLIC	??_R2?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8 ; CDynamicPool<CPythonItem::SGroundItemInstance>::`RTTI Base Class Array'
PUBLIC	??_R2SGroundItemInstance@CPythonItem@@8		; CPythonItem::SGroundItemInstance::`RTTI Base Class Array'
PUBLIC	??_R2CPythonItem@@8				; CPythonItem::`RTTI Base Class Array'
PUBLIC	??_R2?$CSingleton@VCPythonItem@@@@8		; CSingleton<CPythonItem>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8 ; CDynamicPool<CPythonItem::SGroundItemInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@SGroundItemInstance@CPythonItem@@8 ; CPythonItem::SGroundItemInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CPythonItem@@8			; CPythonItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCPythonItem@@@@8	; CSingleton<CPythonItem>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8 ; CDynamicPool<CPythonItem::SGroundItemInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AV?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@@8 ; CDynamicPool<CPythonItem::SGroundItemInstance> `RTTI Type Descriptor'
PUBLIC	??_R3SGroundItemInstance@CPythonItem@@8		; CPythonItem::SGroundItemInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AUSGroundItemInstance@CPythonItem@@@8	; CPythonItem::SGroundItemInstance `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCPythonItem@@@@8		; CSingleton<CPythonItem>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AV?$CSingleton@VCPythonItem@@@@@8		; CSingleton<CPythonItem> `RTTI Type Descriptor'
PUBLIC	??_R3CPythonItem@@8				; CPythonItem::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVCPythonItem@@@8				; CPythonItem `RTTI Type Descriptor'
PUBLIC	??_R4?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@ ; CDynamicPool<CPythonItem::SGroundItemInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R4SGroundItemInstance@CPythonItem@@6B@	; CPythonItem::SGroundItemInstance::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CSingleton@VCPythonItem@@@@6B@		; CSingleton<CPythonItem>::`RTTI Complete Object Locator'
PUBLIC	??_R4CPythonItem@@6B@				; CPythonItem::`RTTI Complete Object Locator'
PUBLIC	?unordered@partial_ordering@std@@2U12@B		; std::partial_ordering::unordered
PUBLIC	?equivalent@partial_ordering@std@@2U12@B	; std::partial_ordering::equivalent
PUBLIC	?greater@partial_ordering@std@@2U12@B		; std::partial_ordering::greater
PUBLIC	?less@partial_ordering@std@@2U12@B		; std::partial_ordering::less
PUBLIC	?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A ; CSingleton<CSoundManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCPythonItem@@@@6B@		; CSingleton<CPythonItem>::`vftable'
PUBLIC	??_7?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@ ; CDynamicPool<CPythonItem::SGroundItemInstance>::`vftable'
PUBLIC	??_7CPythonItem@@6B@				; CPythonItem::`vftable'
PUBLIC	??_7SGroundItemInstance@CPythonItem@@6B@	; CPythonItem::SGroundItemInstance::`vftable'
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	_D3DXMatrixRotationQuaternion@8:PROC
EXTRN	?Show@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Show
EXTRN	?Update@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Update
EXTRN	?random@@YAKXZ:PROC				; random
EXTRN	?RegisterModelThing@CGraphicThingInstance@@QAEXHPAVCGraphicThing@@@Z:PROC ; CGraphicThingInstance::RegisterModelThing
EXTRN	?SetModelInstance@CGraphicThingInstance@@QAE_NHHHH@Z:PROC ; CGraphicThingInstance::SetModelInstance
EXTRN	?ReserveModelThing@CGraphicThingInstance@@QAEXH@Z:PROC ; CGraphicThingInstance::ReserveModelThing
EXTRN	?ReserveModelInstance@CGraphicThingInstance@@QAEXH@Z:PROC ; CGraphicThingInstance::ReserveModelInstance
EXTRN	?GetDropModelThing@CItemData@@QAEPAVCGraphicThing@@XZ:PROC ; CItemData::GetDropModelThing
EXTRN	?GetNormal@CMapManager@@QAE_NHHPAUD3DXVECTOR3@@@Z:PROC ; CMapManager::GetNormal
EXTRN	?PlaySound2D@CSoundManager@@QAEXPBD@Z:PROC	; CSoundManager::PlaySound2D
EXTRN	?BlendRender@CGraphicObjectInstance@@QAEXXZ:PROC ; CGraphicObjectInstance::BlendRender
EXTRN	?Deform@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Deform
EXTRN	?SetDiffuseOperation@CScreen@@QAEXXZ:PROC	; CScreen::SetDiffuseOperation
EXTRN	_D3DXQuaternionRotationAxis@12:PROC
EXTRN	?Transform@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Transform
EXTRN	_D3DXQuaternionMultiply@12:PROC
EXTRN	?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z:PROC ; CGraphicObjectInstance::SetPosition
EXTRN	?PlaySound3D@CSoundManager@@QAEXMMMPBDH@Z:PROC	; CSoundManager::PlaySound3D
EXTRN	?SetRotationQuaternion@CGraphicObjectInstance@@QAEXABUD3DXQUATERNION@@@Z:PROC ; CGraphicObjectInstance::SetRotationQuaternion
EXTRN	??0CGraphicThingInstance@@QAE@XZ:PROC		; CGraphicThingInstance::CGraphicThingInstance
EXTRN	??1CGraphicThingInstance@@UAE@XZ:PROC		; CGraphicThingInstance::~CGraphicThingInstance
EXTRN	?Clear@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Clear
;	COMDAT ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A DD 01H DUP (?) ; CSingleton<CSoundManager>::ms_singleton
_BSS	ENDS
;	COMDAT ??_7SGroundItemInstance@CPythonItem@@6B@
CONST	SEGMENT
??_7SGroundItemInstance@CPythonItem@@6B@ DD FLAT:??_R4SGroundItemInstance@CPythonItem@@6B@ ; CPythonItem::SGroundItemInstance::`vftable'
	DD	FLAT:??_ESGroundItemInstance@CPythonItem@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CPythonItem@@6B@
CONST	SEGMENT
??_7CPythonItem@@6B@ DD FLAT:??_R4CPythonItem@@6B@	; CPythonItem::`vftable'
	DD	FLAT:??_ECPythonItem@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@ DD FLAT:??_R4?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@ ; CDynamicPool<CPythonItem::SGroundItemInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCPythonItem@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCPythonItem@@@@6B@ DD FLAT:??_R4?$CSingleton@VCPythonItem@@@@6B@ ; CSingleton<CPythonItem>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCPythonItem@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ?less@partial_ordering@std@@2U12@B
CONST	SEGMENT
?less@partial_ordering@std@@2U12@B DB 0ffH		; std::partial_ordering::less
CONST	ENDS
;	COMDAT ?greater@partial_ordering@std@@2U12@B
CONST	SEGMENT
?greater@partial_ordering@std@@2U12@B DB 01H		; std::partial_ordering::greater
CONST	ENDS
;	COMDAT ?equivalent@partial_ordering@std@@2U12@B
CONST	SEGMENT
?equivalent@partial_ordering@std@@2U12@B DB 00H		; std::partial_ordering::equivalent
CONST	ENDS
;	COMDAT ?unordered@partial_ordering@std@@2U12@B
CONST	SEGMENT
?unordered@partial_ordering@std@@2U12@B DB 080H		; std::partial_ordering::unordered
CONST	ENDS
;	COMDAT ??_R4CPythonItem@@6B@
rdata$r	SEGMENT
??_R4CPythonItem@@6B@ DD 00H				; CPythonItem::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPythonItem@@@8
	DD	FLAT:??_R3CPythonItem@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CSingleton@VCPythonItem@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCPythonItem@@@@6B@ DD 00H		; CSingleton<CPythonItem>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCPythonItem@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCPythonItem@@@@8
rdata$r	ENDS
;	COMDAT ??_R4SGroundItemInstance@CPythonItem@@6B@
rdata$r	SEGMENT
??_R4SGroundItemInstance@CPythonItem@@6B@ DD 00H	; CPythonItem::SGroundItemInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSGroundItemInstance@CPythonItem@@@8
	DD	FLAT:??_R3SGroundItemInstance@CPythonItem@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@ DD 00H ; CDynamicPool<CPythonItem::SGroundItemInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPythonItem@@@8
data$rs	SEGMENT
??_R0?AVCPythonItem@@@8 DD FLAT:??_7type_info@@6B@	; CPythonItem `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPythonItem@@', 00H
data$rs	ENDS
;	COMDAT ??_R3CPythonItem@@8
rdata$r	SEGMENT
??_R3CPythonItem@@8 DD 00H				; CPythonItem::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CPythonItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCPythonItem@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCPythonItem@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CPythonItem> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCPythonItem@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R3?$CSingleton@VCPythonItem@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCPythonItem@@@@8 DD 00H		; CSingleton<CPythonItem>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCPythonItem@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSGroundItemInstance@CPythonItem@@@8
data$rs	SEGMENT
??_R0?AUSGroundItemInstance@CPythonItem@@@8 DD FLAT:??_7type_info@@6B@ ; CPythonItem::SGroundItemInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSGroundItemInstance@CPythonItem@@', 00H
data$rs	ENDS
;	COMDAT ??_R3SGroundItemInstance@CPythonItem@@8
rdata$r	SEGMENT
??_R3SGroundItemInstance@CPythonItem@@8 DD 00H		; CPythonItem::SGroundItemInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2SGroundItemInstance@CPythonItem@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CPythonItem::SGroundItemInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R3?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8 DD 00H ; CDynamicPool<CPythonItem::SGroundItemInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCPythonItem@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCPythonItem@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCPythonItem@@@@@8 ; CSingleton<CPythonItem>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCPythonItem@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CPythonItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPythonItem@@8 DD FLAT:??_R0?AVCPythonItem@@@8 ; CPythonItem::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPythonItem@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SGroundItemInstance@CPythonItem@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SGroundItemInstance@CPythonItem@@8 DD FLAT:??_R0?AUSGroundItemInstance@CPythonItem@@@8 ; CPythonItem::SGroundItemInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SGroundItemInstance@CPythonItem@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@@8 ; CDynamicPool<CPythonItem::SGroundItemInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCPythonItem@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCPythonItem@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCPythonItem@@@@8 ; CSingleton<CPythonItem>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R2CPythonItem@@8
rdata$r	SEGMENT
??_R2CPythonItem@@8 DD FLAT:??_R1A@?0A@EA@CPythonItem@@8 ; CPythonItem::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCPythonItem@@@@8
rdata$r	ENDS
;	COMDAT ??_R2SGroundItemInstance@CPythonItem@@8
rdata$r	SEGMENT
??_R2SGroundItemInstance@CPythonItem@@8 DD FLAT:??_R1A@?0A@EA@SGroundItemInstance@CPythonItem@@8 ; CPythonItem::SGroundItemInstance::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@8 ; CDynamicPool<CPythonItem::SGroundItemInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_C@_0CC@LIGJBHKC@CDynamicPool?$DMTGroundItemInstanc@
CONST	SEGMENT
??_C@_0CC@LIGJBHKC@CDynamicPool?$DMTGroundItemInstanc@ DB 'CDynamicPool<T'
	DB	'GroundItemInstance>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@ILCHIEAM@d?3?1ymir?5work?1effect?1etc?1dropite@
CONST	SEGMENT
??_C@_0CO@ILCHIEAM@d?3?1ymir?5work?1effect?1etc?1dropite@ DB 'd:/ymir wor'
	DB	'k/effect/etc/dropitem/dropitem.mse', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CMCGILDJ@SetDropSoundFile?5?$CFd?5?3?5?$CFs@
CONST	SEGMENT
??_C@_0BJ@CMCGILDJ@SetDropSoundFile?5?$CFd?5?3?5?$CFs@ DB 'SetDropSoundFi'
	DB	'le %d : %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BBCPOMJB@Item?3?5Inst?5?$CFd?0?5Pool?5?$CFd@
CONST	SEGMENT
??_C@_0BH@BBCPOMJB@Item?3?5Inst?5?$CFd?0?5Pool?5?$CFd@ DB 'Item: Inst %d,'
	DB	' Pool %d', 00H				; `string'
PUBLIC	??0D3DXQUATERNION@@QAE@MMMM@Z			; D3DXQUATERNION::D3DXQUATERNION
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@XZ			; D3DXVECTOR3::operator-
PUBLIC	??0D3DXQUATERNION@@QAE@XZ			; D3DXQUATERNION::D3DXQUATERNION
PUBLIC	?D3DXQuaternionConjugate@@YAPAUD3DXQUATERNION@@PAU1@PBU1@@Z ; D3DXQuaternionConjugate
PUBLIC	_sinf
PUBLIC	_cosf
PUBLIC	??Mstd@@YA_NUpartial_ordering@0@$$T@Z		; std::operator<
PUBLIC	??8std@@YA_NUpartial_ordering@0@$$T@Z		; std::operator==
PUBLIC	??Bstrong_ordering@std@@QBE?AUpartial_ordering@1@XZ ; std::strong_ordering::operator std::partial_ordering
PUBLIC	??$swap@M$0A@@std@@YAXAAM0@Z			; std::swap<float,0>
PUBLIC	??$move@AAM@std@@YA$$QAMAAM@Z			; std::move<float &>
PUBLIC	??$swap@H$0A@@std@@YAXAAH0@Z			; std::swap<int,0>
PUBLIC	??$_Swap_adl@H@std@@YAXAAH0@Z			; std::_Swap_adl<int>
PUBLIC	??$_Swap_adl@M@std@@YAXAAM0@Z			; std::_Swap_adl<float>
PUBLIC	??$addressof@U?$pair@MH@std@@@std@@YAPAU?$pair@MH@0@AAU10@@Z ; std::addressof<std::pair<float,int> >
PUBLIC	?swap@?$pair@MH@std@@QAEXAAU12@@Z		; std::pair<float,int>::swap
PUBLIC	??$construct_at@PAUSGroundItemInstance@CPythonItem@@PAU12@$0A@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@$$QAPAU12@@Z ; std::construct_at<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance *,0>
PUBLIC	??$forward@AAPAU?$pair@MH@std@@@std@@YAAAPAU?$pair@MH@0@AAPAU10@@Z ; std::forward<std::pair<float,int> * &>
PUBLIC	??$swap@MH$0A@@std@@YAXAAU?$pair@MH@0@0@Z	; std::swap<float,int,0>
PUBLIC	??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >
PUBLIC	??$_Pop_heap_hole_unchecked@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00$$QAU10@U?$less@X@0@@Z ; std::_Pop_heap_hole_unchecked<std::pair<float,int> *,std::pair<float,int>,std::less<void> >
PUBLIC	??$_Push_heap_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Push_heap_by_index<std::pair<float,int> *,std::pair<float,int>,std::less<void> >
PUBLIC	??$forward@U?$pair@MH@std@@@std@@YA$$QAU?$pair@MH@0@AAU10@@Z ; std::forward<std::pair<float,int> >
PUBLIC	??$?__MMH@std@@YA?AUpartial_ordering@0@ABU?$pair@MH@0@0@Z ; std::operator<=><float,int>
PUBLIC	??$construct@PAUSGroundItemInstance@CPythonItem@@PAU12@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@$$QAPAU34@@Z ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::construct<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance *>
PUBLIC	??$forward@PAUSGroundItemInstance@CPythonItem@@@std@@YA$$QAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z ; std::forward<CPythonItem::SGroundItemInstance *>
PUBLIC	??$to_address@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@@Z ; std::to_address<CPythonItem::SGroundItemInstance *>
PUBLIC	??$construct_at@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@$0A@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@QAPAU10@AAPAU10@@Z ; std::construct_at<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &,0>
PUBLIC	??$_Voidify_iter@PAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAXPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@@Z ; std::_Voidify_iter<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> *>
PUBLIC	??$construct_at@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@U12@$0A@@std@@YAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@QAU10@$$QAU10@@Z ; std::construct_at<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,0>
PUBLIC	??$?0AAPAU?$pair@MH@std@@AAPAU01@$0A@@?$pair@PAU?$pair@MH@std@@PAU12@@std@@QAE@AAPAU?$pair@MH@1@0@Z ; std::pair<std::pair<float,int> *,std::pair<float,int> *>::pair<std::pair<float,int> *,std::pair<float,int> *><std::pair<float,int> * &,std::pair<float,int> * &,0>
PUBLIC	??$iter_swap@PAU?$pair@MH@std@@PAU12@@std@@YAXPAU?$pair@MH@0@0@Z ; std::iter_swap<std::pair<float,int> *,std::pair<float,int> *>
PUBLIC	??$_Next_iter@PAU?$pair@MH@std@@@std@@YAPAU?$pair@MH@0@PAU10@@Z ; std::_Next_iter<std::pair<float,int> *>
PUBLIC	??$_Guess_median_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Guess_median_unchecked<std::pair<float,int> *,std::less<void> >
PUBLIC	??$_Prev_iter@PAU?$pair@MH@std@@@std@@YAPAU?$pair@MH@0@PAU10@@Z ; std::_Prev_iter<std::pair<float,int> *>
PUBLIC	??$_Pop_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z ; std::_Pop_heap_unchecked<std::pair<float,int> *,std::less<void> >
PUBLIC	??$_Pop_heap_hole_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<std::pair<float,int> *,std::pair<float,int>,std::less<void> >
PUBLIC	??$?4U?$pair@MH@std@@$0A@@?$pair@MH@std@@QAEAAU01@$$QAU01@@Z ; std::pair<float,int>::operator=<std::pair<float,int>,0>
PUBLIC	??$_Move_backward_unchecked@PAU?$pair@MH@std@@PAU12@@std@@YAPAU?$pair@MH@0@PAU10@00@Z ; std::_Move_backward_unchecked<std::pair<float,int> *,std::pair<float,int> *>
PUBLIC	??$?RAAU?$pair@MH@std@@AAU01@@?$less@X@std@@QBE_NAAU?$pair@MH@1@0@Z ; std::less<void>::operator()<std::pair<float,int> &,std::pair<float,int> &>
PUBLIC	??$move@AAU?$pair@MH@std@@@std@@YA$$QAU?$pair@MH@0@AAU10@@Z ; std::move<std::pair<float,int> &>
PUBLIC	??$_Emplace_back@PAUSGroundItemInstance@CPythonItem@@@?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEX$$QAPAUSGroundItemInstance@CPythonItem@@@Z ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_back<CPythonItem::SGroundItemInstance *>
PUBLIC	??$_To_address@PAPAUSGroundItemInstance@CPythonItem@@@std@@YA?A_PABQAPAUSGroundItemInstance@CPythonItem@@@Z ; std::_To_address<CPythonItem::SGroundItemInstance * *>
PUBLIC	??$_Copy_memmove@PAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@00@Z ; std::_Copy_memmove<CPythonItem::SGroundItemInstance * *,CPythonItem::SGroundItemInstance * *>
PUBLIC	??$move@AAPAUSGroundItemInstance@CPythonItem@@@std@@YA$$QAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z ; std::move<CPythonItem::SGroundItemInstance * &>
PUBLIC	??$_Voidify_iter@PAPAUSGroundItemInstance@CPythonItem@@@std@@YAPAXPAPAUSGroundItemInstance@CPythonItem@@@Z ; std::_Voidify_iter<CPythonItem::SGroundItemInstance * *>
PUBLIC	??$construct_at@PAUSGroundItemInstance@CPythonItem@@ABQAU12@$0A@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@ABQAU12@@Z ; std::construct_at<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance * const &,0>
PUBLIC	??$addressof@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z ; std::addressof<CPythonItem::SGroundItemInstance *>
PUBLIC	??$destroy_at@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAXQAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@@Z ; std::destroy_at<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
PUBLIC	??$forward@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *>
PUBLIC	??$forward@AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &>
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &>
PUBLIC	??$construct@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@U12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::construct<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
PUBLIC	??$_Partition_by_median_guess_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MH@std@@PAU12@@0@PAU?$pair@MH@0@0U?$less@X@0@@Z ; std::_Partition_by_median_guess_unchecked<std::pair<float,int> *,std::less<void> >
PUBLIC	??$_Sort_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z ; std::_Sort_heap_unchecked<std::pair<float,int> *,std::less<void> >
PUBLIC	??$_Make_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z ; std::_Make_heap_unchecked<std::pair<float,int> *,std::less<void> >
PUBLIC	??$?RHH@_Synth_three_way@std@@QBE?A_PABH0@Z	; std::_Synth_three_way::operator()<int,int>
PUBLIC	??$?RMM@_Synth_three_way@std@@QBE?A_PABM0@Z	; std::_Synth_three_way::operator()<float,float>
PUBLIC	??$_Insertion_sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAPAU?$pair@MH@0@QAU10@0U?$less@X@0@@Z ; std::_Insertion_sort_unchecked<std::pair<float,int> *,std::less<void> >
PUBLIC	??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
PUBLIC	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Allocate
PUBLIC	??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@PAPAUSGroundItemInstance@CPythonItem@@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::~_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::_Release
PUBLIC	??$exchange@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::nullptr_t>
PUBLIC	??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@@Z ; std::_Voidify_iter<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * *>
PUBLIC	??$construct_at@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@ABQAU12@$0A@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@QAPAU10@ABQAU10@@Z ; std::construct_at<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * const &,0>
PUBLIC	??$forward@ABQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@ABQAU10@@Z ; std::forward<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * const &>
PUBLIC	??$addressof@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *>
PUBLIC	??$_Uninitialized_move@PAPAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@0PAPAU12@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@0@@Z ; std::_Uninitialized_move<CPythonItem::SGroundItemInstance * *,std::allocator<CPythonItem::SGroundItemInstance *> >
PUBLIC	??$_Get_unwrapped@ABQAPAUSGroundItemInstance@CPythonItem@@@std@@YA?A_TABQAPAUSGroundItemInstance@CPythonItem@@@Z ; std::_Get_unwrapped<CPythonItem::SGroundItemInstance * * const &>
PUBLIC	??$construct@PAUSGroundItemInstance@CPythonItem@@ABQAU12@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@ABQAU34@@Z ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::construct<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance * const &>
PUBLIC	??$_Construct_in_place@PAUSGroundItemInstance@CPythonItem@@ABQAU12@@std@@YAXAAPAUSGroundItemInstance@CPythonItem@@ABQAU12@@Z ; std::_Construct_in_place<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance * const &>
PUBLIC	??$construct@KABK@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@QAKABK@Z ; std::_Default_allocator_traits<std::allocator<unsigned long> >::construct<unsigned long,unsigned long const &>
PUBLIC	??$_Construct_in_place@KABK@std@@YAXAAKABK@Z	; std::_Construct_in_place<unsigned long,unsigned long const &>
PUBLIC	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *>
PUBLIC	??$destroy@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::destroy<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
PUBLIC	??$_Kfn@$$CBKPAUSGroundItemInstance@CPythonItem@@@?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@SAABKABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z ; std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0>::_Kfn<unsigned long const ,CPythonItem::SGroundItemInstance *>
PUBLIC	??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > > >
PUBLIC	??$?0PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool>::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool><std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool,0>
PUBLIC	??$?0AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@std@@QAE@AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool>::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool><std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &,bool,0>
PUBLIC	??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > ><std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
PUBLIC	??$forward@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YA$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z ; std::forward<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
PUBLIC	??$_Sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,int> *,std::less<void> >
PUBLIC	??$_Pass_fn@U?$less@X@std@@$0A@@std@@YA?AU?$less@X@0@U10@@Z ; std::_Pass_fn<std::less<void>,0>
PUBLIC	??$_Adl_verify_range@PAU?$pair@MH@std@@PAU12@@std@@YAXABQAU?$pair@MH@0@0@Z ; std::_Adl_verify_range<std::pair<float,int> *,std::pair<float,int> *>
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>::_Get_first
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::max_size
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QBEABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ ; std::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1>::_Get_first
PUBLIC	?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >::deallocate
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@K@2@XZ ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>,1>::_Get_first
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAIABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@@Z ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::max_size
PUBLIC	?capacity@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::capacity
PUBLIC	?_Getal@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Getal
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
PUBLIC	??0?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::deallocate
PUBLIC	?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Check_grow_by_1
PUBLIC	?_Getcomp@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEABU?$less@K@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Getcomp
PUBLIC	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Insert_node
PUBLIC	?allocate@?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@I@Z ; std::allocator<CPythonItem::SGroundItemInstance *>::allocate
PUBLIC	?max_size@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::max_size
PUBLIC	?_Calculate_growth@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEII@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEXQAPAUSGroundItemInstance@CPythonItem@@II@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@CAXXZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Xlength
PUBLIC	?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Release
PUBLIC	??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
PUBLIC	?_Extract@?$_In_place_key_extract_map@KU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAABKABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@2@@Z ; std::_In_place_key_extract_map<unsigned long,std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >::_Extract
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * const &>
PUBLIC	??$_Emplace_reallocate@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEPAPAUSGroundItemInstance@CPythonItem@@QAPAU23@ABQAU23@@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_reallocate<CPythonItem::SGroundItemInstance * const &>
PUBLIC	??$_Emplace_back_with_unused_capacity@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAPAUSGroundItemInstance@CPythonItem@@ABQAU23@@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_back_with_unused_capacity<CPythonItem::SGroundItemInstance * const &>
PUBLIC	??$forward@ABQAUSGroundItemInstance@CPythonItem@@@std@@YAABQAUSGroundItemInstance@CPythonItem@@ABQAU12@@Z ; std::forward<CPythonItem::SGroundItemInstance * const &>
PUBLIC	??$destroy_at@PAUSGroundItemInstance@CPythonItem@@@std@@YAXQAPAUSGroundItemInstance@CPythonItem@@@Z ; std::destroy_at<CPythonItem::SGroundItemInstance *>
PUBLIC	??$_Emplace_reallocate@ABK@?$vector@KV?$allocator@K@std@@@std@@AAEPAKQAKABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long const &>
PUBLIC	??$_Emplace_back_with_unused_capacity@ABK@?$vector@KV?$allocator@K@std@@@std@@AAEAAKABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_back_with_unused_capacity<unsigned long const &>
PUBLIC	??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
PUBLIC	??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
PUBLIC	??$exchange@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@0@Z ; std::exchange<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &>
PUBLIC	??$_Lower_bound_duplicate@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Lower_bound_duplicate<unsigned long>
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@AB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@1@AB_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,bool const &,0>
PUBLIC	??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Emplace<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
PUBLIC	??$move@AAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YA$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z ; std::move<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> &>
PUBLIC	??$forward@AAPAUSGroundItemInstance@CPythonItem@@@std@@YAAAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z ; std::forward<CPythonItem::SGroundItemInstance * &>
PUBLIC	??$_Get_unwrapped@ABQAU?$pair@MH@std@@@std@@YA?A_TABQAU?$pair@MH@0@@Z ; std::_Get_unwrapped<std::pair<float,int> * const &>
PUBLIC	??$sort@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXQAU?$pair@MH@0@0U?$less@X@0@@Z ; std::sort<std::pair<float,int> *,std::less<void> >
PUBLIC	??$?0MH$0A@@?$pair@MH@std@@QAE@$$QAM$$QAH@Z	; std::pair<float,int>::pair<float,int><float,int,0>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1><>
PUBLIC	?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Max
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Extract
PUBLIC	??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
PUBLIC	?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
PUBLIC	??0?$allocator@PAVCItemData@@@std@@QAE@XZ	; std::allocator<CItemData *>::allocator<CItemData *>
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CItemData *> >::_Vector_val<std::_Simple_types<CItemData *> >
PUBLIC	?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >::allocate
PUBLIC	?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@AAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Erase_unchecked
PUBLIC	??0?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAE@XZ ; std::allocator<CPythonItem::SGroundItemInstance *>::allocator<CPythonItem::SGroundItemInstance *>
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >
PUBLIC	?_Unwrapped@?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Unwrapped
PUBLIC	??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z ; std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
PUBLIC	??$_Destroy_range@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAXPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@0@@Z ; std::_Destroy_range<std::allocator<CPythonItem::SGroundItemInstance *> >
PUBLIC	??$_Destroy_range@V?$allocator@PAVCItemData@@@std@@@std@@YAXPAPAVCItemData@@QAPAV1@AAV?$allocator@PAVCItemData@@@0@@Z ; std::_Destroy_range<std::allocator<CItemData *> >
PUBLIC	??$?0ABU?$less@K@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@K@1@$$QAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>,1>::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>,1><std::less<unsigned long> const &,std::_Zero_then_variadic_args_t>
PUBLIC	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
PUBLIC	??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@0@ABV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > const >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1>::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1><>
PUBLIC	??$_Emplace_one_at_back@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAPAUSGroundItemInstance@CPythonItem@@ABQAU23@@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_one_at_back<CPythonItem::SGroundItemInstance * const &>
PUBLIC	??$destroy@PAUSGroundItemInstance@CPythonItem@@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@@Z ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::destroy<CPythonItem::SGroundItemInstance *>
PUBLIC	??$_Unfancy@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@Z ; std::_Unfancy<CPythonItem::SGroundItemInstance *>
PUBLIC	??$addressof@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z ; std::addressof<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
PUBLIC	??$_Emplace_one_at_back@ABK@?$vector@KV?$allocator@K@std@@@std@@AAEAAKABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_one_at_back<unsigned long const &>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@PAVCItemData@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<CItemData *>,std::_Vector_val<std::_Simple_types<CItemData *> >,1>::_Compressed_pair<std::allocator<CItemData *>,std::_Vector_val<std::_Simple_types<CItemData *> >,1><>
PUBLIC	??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
PUBLIC	??$_Find@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find<unsigned long>
PUBLIC	??$erase@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@1@V21@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::erase<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,0>
PUBLIC	??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::insert<0,0>
PUBLIC	??$?0AAKAAPAUSGroundItemInstance@CPythonItem@@$0A@@?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@QAE@AAKAAPAUSGroundItemInstance@CPythonItem@@@Z ; std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>::pair<unsigned long const ,CPythonItem::SGroundItemInstance *><unsigned long &,CPythonItem::SGroundItemInstance * &,0>
PUBLIC	??$sort@PAU?$pair@MH@std@@@std@@YAXQAU?$pair@MH@0@0@Z ; std::sort<std::pair<float,int> *>
PUBLIC	??$make_pair@MH@std@@YA?AU?$pair@MH@0@$$QAM$$QAH@Z ; std::make_pair<float,int>
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PAVCItemData@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVCItemData@@@2@XZ ; std::_Compressed_pair<std::allocator<CItemData *>,std::_Vector_val<std::_Simple_types<CItemData *> >,1>::_Get_first
PUBLIC	?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Min
PUBLIC	?deallocate@?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAEXQAPAUSGroundItemInstance@CPythonItem@@I@Z ; std::allocator<CPythonItem::SGroundItemInstance *>::deallocate
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QAEAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ ; std::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1>::_Get_first
PUBLIC	?deallocate@?$allocator@PAVCItemData@@@std@@QAEXQAPAVCItemData@@I@Z ; std::allocator<CItemData *>::deallocate
PUBLIC	?_Getal@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEAAV?$allocator@PAVCItemData@@@2@XZ ; std::vector<CItemData *,std::allocator<CItemData *> >::_Getal
PUBLIC	?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Alloc_sentinel_and_proxy
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>::_Get_first
PUBLIC	?Delete@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@KAXPAUSGroundItemInstance@CPythonItem@@@Z ; CDynamicPool<CPythonItem::SGroundItemInstance>::Delete
PUBLIC	?clear@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXXZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::clear
PUBLIC	?_Unchecked_begin@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Unchecked_end
PUBLIC	?_Tidy@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEXXZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Tidy
PUBLIC	?_Orphan_range@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEXPAPAUSGroundItemInstance@CPythonItem@@0@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Orphan_range
PUBLIC	?_Getal@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Getal
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator*
PUBLIC	?_Tidy@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEXXZ ; std::vector<CItemData *,std::allocator<CItemData *> >::_Tidy
PUBLIC	??0?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@K@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Getal
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Get_scary
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Get_scary
PUBLIC	?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Orphan_ptr
PUBLIC	?Destroy@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXXZ ; CDynamicPool<CPythonItem::SGroundItemInstance>::Destroy
PUBLIC	??0?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >
PUBLIC	??1?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::~vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >
PUBLIC	?push_back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXABQAUSGroundItemInstance@CPythonItem@@@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::push_back
PUBLIC	?pop_back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXXZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::pop_back
PUBLIC	?empty@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBE_NXZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::empty
PUBLIC	?size@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::size
PUBLIC	?back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEAAPAUSGroundItemInstance@CPythonItem@@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::back
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator++
PUBLIC	??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator*
PUBLIC	?pointer_to@?$pointer_traits@PAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@2@AAU32@@Z ; std::pointer_traits<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> *>::pointer_to
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
PUBLIC	??_G?$CSingleton@VCPythonItem@@@@UAEPAXI@Z	; CSingleton<CPythonItem>::`scalar deleting destructor'
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
PUBLIC	??_G?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@UAEPAXI@Z ; CDynamicPool<CPythonItem::SGroundItemInstance>::`scalar deleting destructor'
PUBLIC	?push_back@?$vector@KV?$allocator@K@std@@@std@@QAEXABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::push_back
PUBLIC	?Instance@?$CSingleton@VCSoundManager@@@@SAAAVCSoundManager@@XZ ; CSingleton<CSoundManager>::Instance
PUBLIC	??0?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAE@XZ ; std::vector<CItemData *,std::allocator<CItemData *> >::vector<CItemData *,std::allocator<CItemData *> >
PUBLIC	??1?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAE@XZ ; std::vector<CItemData *,std::allocator<CItemData *> >::~vector<CItemData *,std::allocator<CItemData *> >
PUBLIC	??0?$CSingleton@VCPythonItem@@@@QAE@XZ		; CSingleton<CPythonItem>::CSingleton<CPythonItem>
PUBLIC	??1?$CSingleton@VCPythonItem@@@@UAE@XZ		; CSingleton<CPythonItem>::~CSingleton<CPythonItem>
PUBLIC	??1?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::begin
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::end
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::size
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::clear
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::find
PUBLIC	??0?$map@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@@std@@QAE@XZ ; std::map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >
PUBLIC	??0?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAE@XZ ; CDynamicPool<CPythonItem::SGroundItemInstance>::CDynamicPool<CPythonItem::SGroundItemInstance>
PUBLIC	??1?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@UAE@XZ ; CDynamicPool<CPythonItem::SGroundItemInstance>::~CDynamicPool<CPythonItem::SGroundItemInstance>
PUBLIC	?SetName@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXPBD@Z ; CDynamicPool<CPythonItem::SGroundItemInstance>::SetName
PUBLIC	?Clear@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXXZ ; CDynamicPool<CPythonItem::SGroundItemInstance>::Clear
PUBLIC	?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ ; CDynamicPool<CPythonItem::SGroundItemInstance>::Alloc
PUBLIC	?Free@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXPAUSGroundItemInstance@CPythonItem@@@Z ; CDynamicPool<CPythonItem::SGroundItemInstance>::Free
PUBLIC	?GetCapacity@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEKXZ ; CDynamicPool<CPythonItem::SGroundItemInstance>::GetCapacity
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator==
PUBLIC	??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator->
PUBLIC	??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator++
PUBLIC	??1?$map@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@@std@@QAE@XZ ; std::map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::~map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >
PUBLIC	??_GCPythonItem@@UAEPAXI@Z			; CPythonItem::`scalar deleting destructor'
PUBLIC	?GetVirtualNumberOfGroundItem@CPythonItem@@QAEKK@Z ; CPythonItem::GetVirtualNumberOfGroundItem
PUBLIC	?GetPickedItemID@CPythonItem@@QAE_NPAK@Z	; CPythonItem::GetPickedItemID
PUBLIC	?__Pick@CPythonItem@@IAEKABUtagPOINT@@@Z	; CPythonItem::__Pick
PUBLIC	?GetGroundItemPosition@CPythonItem@@QAEHKPAUD3DXVECTOR3@@@Z ; CPythonItem::GetGroundItemPosition
PUBLIC	?GetCloseItemVector@CPythonItem@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUD3DXVECTOR3@@AAV?$vector@KV?$allocator@K@std@@@3@@Z ; CPythonItem::GetCloseItemVector
PUBLIC	?GetCloseItem@CPythonItem@@QAE_NABUD3DXVECTOR3@@PAKK@Z ; CPythonItem::GetCloseItem
PUBLIC	?DISTANCE_APPROX@@YAHHH@Z			; DISTANCE_APPROX
PUBLIC	?DeleteItem@CPythonItem@@QAEXK@Z		; CPythonItem::DeleteItem
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
PUBLIC	?GetOwnership@CPythonItem@@QAE_NKPAPBD@Z	; CPythonItem::GetOwnership
PUBLIC	?SetOwnership@CPythonItem@@QAEXKPBD@Z		; CPythonItem::SetOwnership
PUBLIC	?CreateItem@CPythonItem@@QAEXKKMMM_N@Z		; CPythonItem::CreateItem
PUBLIC	?__GetUseSoundType@CPythonItem@@IAEKABVCItemData@@@Z ; CPythonItem::__GetUseSoundType
PUBLIC	?__GetDropSoundType@CPythonItem@@IAEKABVCItemData@@@Z ; CPythonItem::__GetDropSoundType
PUBLIC	?PlayUsePotionSound@CPythonItem@@QAEXXZ		; CPythonItem::PlayUsePotionSound
PUBLIC	?PlayDropSound@CPythonItem@@QAEXK@Z		; CPythonItem::PlayDropSound
PUBLIC	?PlayUseSound@CPythonItem@@QAEXK@Z		; CPythonItem::PlayUseSound
PUBLIC	?SetDropSoundFileName@CPythonItem@@QAEXKABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CPythonItem::SetDropSoundFileName
PUBLIC	?SetUseSoundFileName@CPythonItem@@QAEXKABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CPythonItem::SetUseSoundFileName
PUBLIC	?Update@SGroundItemInstance@CPythonItem@@QAE_NXZ ; CPythonItem::SGroundItemInstance::Update
PUBLIC	?__PlayDropSound@SGroundItemInstance@CPythonItem@@SAXKABUD3DXVECTOR3@@@Z ; CPythonItem::SGroundItemInstance::__PlayDropSound
PUBLIC	?Clear@SGroundItemInstance@CPythonItem@@QAEXXZ	; CPythonItem::SGroundItemInstance::Clear
PUBLIC	??_GSGroundItemInstance@CPythonItem@@UAEPAXI@Z	; CPythonItem::SGroundItemInstance::`scalar deleting destructor'
PUBLIC	??1SGroundItemInstance@CPythonItem@@UAE@XZ	; CPythonItem::SGroundItemInstance::~SGroundItemInstance
PUBLIC	??0SGroundItemInstance@CPythonItem@@QAE@XZ	; CPythonItem::SGroundItemInstance::SGroundItemInstance
PUBLIC	?RotationArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ; RotationArc
PUBLIC	?RotationNormalizedArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ; RotationNormalizedArc
PUBLIC	??0CPythonItem@@QAE@XZ				; CPythonItem::CPythonItem
PUBLIC	??1CPythonItem@@UAE@XZ				; CPythonItem::~CPythonItem
PUBLIC	?GetInfo@CPythonItem@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CPythonItem::GetInfo
PUBLIC	?Render@CPythonItem@@QAEXXZ			; CPythonItem::Render
PUBLIC	?Update@CPythonItem@@QAEXABUtagPOINT@@@Z	; CPythonItem::Update
PUBLIC	?Create@CPythonItem@@QAEXXZ			; CPythonItem::Create
PUBLIC	?Destroy@CPythonItem@@QAEXXZ			; CPythonItem::Destroy
PUBLIC	?DeleteAllItems@CPythonItem@@QAEXXZ		; CPythonItem::DeleteAllItems
PUBLIC	?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; CPythonItem::SGroundItemInstance::ms_astDropSoundFileName
EXTRN	??_ECPythonItem@@UAEPAXI@Z:PROC			; CPythonItem::`vector deleting destructor'
EXTRN	??_E?$CSingleton@VCPythonItem@@@@UAEPAXI@Z:PROC	; CSingleton<CPythonItem>::`vector deleting destructor'
EXTRN	??_ESGroundItemInstance@CPythonItem@@UAEPAXI@Z:PROC ; CPythonItem::SGroundItemInstance::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@UAEPAXI@Z:PROC ; CDynamicPool<CPythonItem::SGroundItemInstance>::`vector deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CPythonItem@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CPythonItem@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CPythonItem@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CPythonItem@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CPythonItem@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CPythonItem@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CPythonItem@@QAE@XZ$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?CreateItem@CPythonItem@@QAEXKKMMM_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateItem@CPythonItem@@QAEXKKMMM_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?CreateItem@CPythonItem@@QAEXKKMMM_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateItem@CPythonItem@@QAEXKKMMM_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateItem@CPythonItem@@QAEXKKMMM_N@Z$8
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z$0
?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 00H ; CPythonItem::SGroundItemInstance::ms_astDropSoundFileName
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DD	00H
	DD	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DD	00H
	DD	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DD	00H
	DD	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DD	00H
	DD	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DD	00H
	DD	0fH
??ms_astDropSoundFileName$initializer$@SGroundItemInstance@CPythonItem@@2P6AXXZA@@3P6AXXZA DD FLAT:??__F?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A@@YAXXZ ; ??ms_astDropSoundFileName$initializer$@SGroundItemInstance@CPythonItem@@2P6AXXZA@@3P6AXXZA
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?DeleteAllItems@CPythonItem@@QAEXXZ
_TEXT	SEGMENT
_rkTextTail$1$ = -12					; size = 4
_pkData$ = -8						; size = 4
_i$ = -4						; size = 4
?DeleteAllItems@CPythonItem@@QAEXXZ PROC		; CPythonItem::DeleteAllItems, COMDAT
; _this$ = ecx

; 526  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 527  : 	CPythonTextTail& rkTextTail=CPythonTextTail::Instance();

  00006	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonTextTail@@@@0PAVCPythonTextTail@@A ; CSingleton<CPythonTextTail>::ms_singleton
  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx
  00011	89 55 f4	 mov	 DWORD PTR _rkTextTail$1$[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1126 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00014	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00017	8d 5f 04	 lea	 ebx, DWORD PTR [edi+4]

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0001a	8b 06		 mov	 eax, DWORD PTR [esi]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 530  : 	for (i= m_GroundItemInstanceMap.begin(); i!=m_GroundItemInstanceMap.end(); ++i)

  0001c	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0001f	3b c6		 cmp	 eax, esi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 530  : 	for (i= m_GroundItemInstanceMap.begin(); i!=m_GroundItemInstanceMap.end(); ++i)

  00021	74 48		 je	 SHORT $LN3@DeleteAllI
$LL19@DeleteAllI:

; 531  : 	{
; 532  : 		TGroundItemInstance* pGroundItemInst=i->second;
; 533  : 		rkTextTail.DeleteItemTextTail(i->first);

  00023	ff 70 10	 push	 DWORD PTR [eax+16]
  00026	8b 70 14	 mov	 esi, DWORD PTR [eax+20]
  00029	8b ca		 mov	 ecx, edx
  0002b	e8 00 00 00 00	 call	 ?DeleteItemTextTail@CPythonTextTail@@QAEXK@Z ; CPythonTextTail::DeleteItemTextTail

; 534  : 		pGroundItemInst->Clear();

  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ?Clear@SGroundItemInstance@CPythonItem@@QAEXXZ ; CPythonItem::SGroundItemInstance::Clear
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00037	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 535  : 		m_GroundItemInstancePool.Free(pGroundItemInst);

  0003a	89 75 f8	 mov	 DWORD PTR _pkData$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0003d	3b 47 24	 cmp	 eax, DWORD PTR [edi+36]
  00040	74 08		 je	 SHORT $LN37@DeleteAllI

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00042	89 30		 mov	 DWORD PTR [eax], esi

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00044	83 47 20 04	 add	 DWORD PTR [edi+32], 4

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00048	eb 0d		 jmp	 SHORT $LN2@DeleteAllI
$LN37@DeleteAllI:

; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0004a	8d 4d f8	 lea	 ecx, DWORD PTR _pkData$[ebp]
  0004d	51		 push	 ecx
  0004e	50		 push	 eax
  0004f	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
  00052	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEPAPAUSGroundItemInstance@CPythonItem@@QAPAU23@ABQAU23@@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_reallocate<CPythonItem::SGroundItemInstance * const &>
$LN2@DeleteAllI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 199  :         _Mybase::operator++();

  00057	8d 4d fc	 lea	 ecx, DWORD PTR _i$[ebp]
  0005a	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0005f	8b 33		 mov	 esi, DWORD PTR [ebx]

; 233  :         return this->_Ptr == _Right._Ptr;

  00061	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 530  : 	for (i= m_GroundItemInstanceMap.begin(); i!=m_GroundItemInstanceMap.end(); ++i)

  00064	8b 55 f4	 mov	 edx, DWORD PTR _rkTextTail$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 233  :         return this->_Ptr == _Right._Ptr;

  00067	3b c6		 cmp	 eax, esi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 530  : 	for (i= m_GroundItemInstanceMap.begin(); i!=m_GroundItemInstanceMap.end(); ++i)

  00069	75 b8		 jne	 SHORT $LL19@DeleteAllI
$LN3@DeleteAllI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1357 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  0006b	ff 76 04	 push	 DWORD PTR [esi+4]
  0006e	8b cb		 mov	 ecx, ebx
  00070	53		 push	 ebx
  00071	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >

; 1358 :         _Head->_Parent  = _Head;
; 1359 :         _Head->_Left    = _Head;
; 1360 :         _Head->_Right   = _Head;
; 1361 :         _Scary->_Mysize = 0;

  00076	5f		 pop	 edi
  00077	89 76 04	 mov	 DWORD PTR [esi+4], esi
  0007a	89 36		 mov	 DWORD PTR [esi], esi
  0007c	89 76 08	 mov	 DWORD PTR [esi+8], esi
  0007f	5e		 pop	 esi
  00080	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00087	5b		 pop	 ebx
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 538  : }

  00088	8b e5		 mov	 esp, ebp
  0008a	5d		 pop	 ebp
  0008b	c3		 ret	 0
?DeleteAllItems@CPythonItem@@QAEXXZ ENDP		; CPythonItem::DeleteAllItems
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?Destroy@CPythonItem@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CPythonItem@@QAEXXZ PROC			; CPythonItem::Destroy, COMDAT
; _this$ = ecx

; 782  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 783  : 	DeleteAllItems();

  00005	e8 00 00 00 00	 call	 ?DeleteAllItems@CPythonItem@@QAEXXZ ; CPythonItem::DeleteAllItems
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 50   : 			for (auto v : m_kVct_pkData)

  0000a	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  0000d	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
  00010	3b f3		 cmp	 esi, ebx
  00012	74 13		 je	 SHORT $LN7@Destroy
$LL8@Destroy:

; 111  : 			delete pkData;

  00014	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00016	85 c9		 test	 ecx, ecx
  00018	74 06		 je	 SHORT $LN6@Destroy
  0001a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001c	6a 01		 push	 1
  0001e	ff 10		 call	 DWORD PTR [eax]
$LN6@Destroy:

; 50   : 			for (auto v : m_kVct_pkData)

  00020	83 c6 04	 add	 esi, 4
  00023	3b f3		 cmp	 esi, ebx
  00025	75 ed		 jne	 SHORT $LL8@Destroy
$LN7@Destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00027	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002a	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  0002d	74 03		 je	 SHORT $LN14@Destroy

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0002f	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN14@Destroy:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00032	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00035	3b 47 20	 cmp	 eax, DWORD PTR [edi+32]
  00038	74 03		 je	 SHORT $LN17@Destroy

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0003a	89 47 20	 mov	 DWORD PTR [edi+32], eax
$LN17@Destroy:
  0003d	5f		 pop	 edi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 785  : }

  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	c3		 ret	 0
?Destroy@CPythonItem@@QAEXXZ ENDP			; CPythonItem::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?Create@CPythonItem@@QAEXXZ
_TEXT	SEGMENT
?Create@CPythonItem@@QAEXXZ PROC			; CPythonItem::Create, COMDAT
; _this$ = ecx

; 789  : 	CEffectManager::Instance().RegisterEffect2("d:/ymir work/effect/etc/dropitem/dropitem.mse", &m_dwDropItemEffectID);

  00000	6a 00		 push	 0
  00002	8d 41 30	 lea	 eax, DWORD PTR [ecx+48]
  00005	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
  0000b	50		 push	 eax
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@ILCHIEAM@d?3?1ymir?5work?1effect?1etc?1dropite@
  00011	e8 00 00 00 00	 call	 ?RegisterEffect2@CEffectManager@@QAEHPBDPAK_N@Z ; CEffectManager::RegisterEffect2

; 790  : }

  00016	c3		 ret	 0
?Create@CPythonItem@@QAEXXZ ENDP			; CPythonItem::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?Update@CPythonItem@@QAEXABUtagPOINT@@@Z
_TEXT	SEGMENT
_itor$ = -4						; size = 4
_c_rkPtMouse$ = 8					; size = 4
?Update@CPythonItem@@QAEXABUtagPOINT@@@Z PROC		; CPythonItem::Update, COMDAT
; _this$ = ecx

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1126 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  0000a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0000d	8b 02		 mov	 eax, DWORD PTR [edx]
  0000f	89 44 24 04	 mov	 DWORD PTR _itor$[esp+8], eax
  00013	3b c2		 cmp	 eax, edx
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 113  : 	for(; itor != m_GroundItemInstanceMap.end(); ++itor)

  00015	74 1a		 je	 SHORT $LN3@Update
$LL19@Update:

; 114  : 	{
; 115  : 		itor->second->Update();

  00017	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0001a	e8 00 00 00 00	 call	 ?Update@SGroundItemInstance@CPythonItem@@QAE_NXZ ; CPythonItem::SGroundItemInstance::Update
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 199  :         _Mybase::operator++();

  0001f	8d 4c 24 04	 lea	 ecx, DWORD PTR _itor$[esp+8]
  00023	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++

; 233  :         return this->_Ptr == _Right._Ptr;

  00028	8b 44 24 04	 mov	 eax, DWORD PTR _itor$[esp+8]
  0002c	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 113  : 	for(; itor != m_GroundItemInstanceMap.end(); ++itor)

  0002f	75 e6		 jne	 SHORT $LL19@Update
$LN3@Update:

; 116  : 	}
; 117  : 
; 118  : 	m_dwPickedItemID=__Pick(c_rkPtMouse);

  00031	ff 75 08	 push	 DWORD PTR _c_rkPtMouse$[ebp]
  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?__Pick@CPythonItem@@IAEKABUtagPOINT@@@Z ; CPythonItem::__Pick
  0003b	89 46 34	 mov	 DWORD PTR [esi+52], eax

; 119  : }

  0003e	5e		 pop	 esi
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?Update@CPythonItem@@QAEXABUtagPOINT@@@Z ENDP		; CPythonItem::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?Render@CPythonItem@@QAEXXZ
_TEXT	SEGMENT
_itor$ = -4						; size = 4
?Render@CPythonItem@@QAEXXZ PROC			; CPythonItem::Render, COMDAT
; _this$ = ecx

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 123  : 	CPythonGraphic::Instance().SetDiffuseOperation();

  00007	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
  0000d	e8 00 00 00 00	 call	 ?SetDiffuseOperation@CScreen@@QAEXXZ ; CScreen::SetDiffuseOperation
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1126 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00012	8b 57 04	 mov	 edx, DWORD PTR [edi+4]

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00015	8b 02		 mov	 eax, DWORD PTR [edx]
  00017	89 45 fc	 mov	 DWORD PTR _itor$[ebp], eax
  0001a	3b c2		 cmp	 eax, edx
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 125  : 	for (; itor != m_GroundItemInstanceMap.end(); ++itor)

  0001c	74 26		 je	 SHORT $LN3@Render
  0001e	56		 push	 esi
  0001f	90		 npad	 1
$LL19@Render:

; 126  : 	{
; 127  : 		CGraphicThingInstance & rInstance = itor->second->ThingInstance;

  00020	8b 70 14	 mov	 esi, DWORD PTR [eax+20]

; 128  : 		//rInstance.Update();
; 129  : 		rInstance.Render();

  00023	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  00026	e8 00 00 00 00	 call	 ?Render@CGraphicObjectInstance@@QAE_NXZ ; CGraphicObjectInstance::Render

; 130  : 		rInstance.BlendRender();

  0002b	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  0002e	e8 00 00 00 00	 call	 ?BlendRender@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::BlendRender
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 199  :         _Mybase::operator++();

  00033	8d 4d fc	 lea	 ecx, DWORD PTR _itor$[ebp]
  00036	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++

; 233  :         return this->_Ptr == _Right._Ptr;

  0003b	8b 45 fc	 mov	 eax, DWORD PTR _itor$[ebp]
  0003e	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 125  : 	for (; itor != m_GroundItemInstanceMap.end(); ++itor)

  00041	75 dd		 jne	 SHORT $LL19@Render
  00043	5e		 pop	 esi
$LN3@Render:
  00044	5f		 pop	 edi

; 131  : 	}
; 132  : }

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?Render@CPythonItem@@QAEXXZ ENDP			; CPythonItem::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?GetInfo@CPythonItem@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T1 = -264						; size = 1
_szInfo$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
_pstInfo$ = 8						; size = 4
?GetInfo@CPythonItem@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CPythonItem::GetInfo, COMDAT
; _this$ = ecx

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00013	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00016	2b 41 10	 sub	 eax, DWORD PTR [ecx+16]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 16   : {

  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8b 7d 08	 mov	 edi, DWORD PTR _pstInfo$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0001e	c1 f8 02	 sar	 eax, 2
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 18   : 	sprintf(szInfo, "Item: Inst %d, Pool %d", m_GroundItemInstanceMap.size(), m_GroundItemInstancePool.GetCapacity());

  00021	50		 push	 eax
  00022	ff 71 08	 push	 DWORD PTR [ecx+8]
  00025	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szInfo$[ebp]
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BBCPOMJB@Item?3?5Inst?5?$CFd?0?5Pool?5?$CFd@
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 _sprintf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00036	8d b5 fc fe ff
	ff		 lea	 esi, DWORD PTR _szInfo$[ebp]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 18   : 	sprintf(szInfo, "Item: Inst %d, Pool %d", m_GroundItemInstanceMap.size(), m_GroundItemInstancePool.GetCapacity());

  0003c	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  0003f	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL49@GetInfo:
  00042	8a 06		 mov	 al, BYTE PTR [esi]
  00044	46		 inc	 esi
  00045	84 c0		 test	 al, al
  00047	75 f9		 jne	 SHORT $LL49@GetInfo

; 3422 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00049	8b 57 14	 mov	 edx, DWORD PTR [edi+20]

; 415  :             return __builtin_strlen(_First);

  0004c	2b f1		 sub	 esi, ecx

; 3421 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  0004e	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]

; 3422 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00051	8b c2		 mov	 eax, edx
  00053	2b c1		 sub	 eax, ecx
  00055	3b f0		 cmp	 esi, eax
  00057	77 36		 ja	 SHORT $LN12@GetInfo

; 3423 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Count));
; 3424 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00059	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  0005c	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2301 :         return _BUF_SIZE <= _Myres;

  0005f	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  00062	72 02		 jb	 SHORT $LN15@GetInfo

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  00064	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN15@GetInfo:

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00066	56		 push	 esi
  00067	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szInfo$[ebp]

; 3426 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  0006d	03 f9		 add	 edi, ecx

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0006f	50		 push	 eax
  00070	57		 push	 edi
  00071	e8 00 00 00 00	 call	 _memmove
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3427 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00079	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  0007d	5f		 pop	 edi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 21   : }

  0007e	5e		 pop	 esi
  0007f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00082	33 cd		 xor	 ecx, ebp
  00084	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 04 00	 ret	 4
$LN12@GetInfo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3431 :         return _Reallocate_grow_by(

  0008f	56		 push	 esi
  00090	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR _szInfo$[ebp]
  00096	8b cf		 mov	 ecx, edi
  00098	50		 push	 eax
  00099	ff b5 f8 fe ff
	ff		 push	 DWORD PTR $T1[ebp]
  0009f	56		 push	 esi
  000a0	e8 00 00 00 00	 call	 ??$_Reallocate_grow_by@V<lambda_1>@?1??append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV34@QBDI@Z@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_1>@?1??append@01@QAEAAV01@QBDI@Z@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<`std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append'::`2'::<lambda_1>,char const *,unsigned int>
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 21   : }

  000a5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a8	5f		 pop	 edi
  000a9	33 cd		 xor	 ecx, ebp
  000ab	5e		 pop	 esi
  000ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 04 00	 ret	 4
?GetInfo@CPythonItem@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CPythonItem::GetInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterBase\Singleton.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ??1CPythonItem@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CPythonItem@@UAE@XZ PROC				; CPythonItem::~CPythonItem, COMDAT
; _this$ = ecx

; 799  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CPythonItem@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx

; 801  : }

  00026	8d 8f 00 01 00
	00		 lea	 ecx, DWORD PTR [edi+256]
  0002c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CPythonItem@@6B@
  00032	e8 00 00 00 00	 call	 ??1?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAE@XZ ; std::vector<CItemData *,std::allocator<CItemData *> >::~vector<CItemData *,std::allocator<CItemData *> >
  00037	68 00 00 00 00	 push	 OFFSET ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0003c	6a 08		 push	 8
  0003e	6a 18		 push	 24			; 00000018H
  00040	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 26   : 		}

  00049	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
  0004c	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], OFFSET ??_7?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@
  00053	e8 00 00 00 00	 call	 ??1?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::~vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >
  00058	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0005b	e8 00 00 00 00	 call	 ??1?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::~vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00060	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 801  : }

  00063	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00066	8b ce		 mov	 ecx, esi
  00068	ff 70 04	 push	 DWORD PTR [eax+4]
  0006b	56		 push	 esi
  0006c	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00071	6a 18		 push	 24			; 00000018H
  00073	ff 36		 push	 DWORD PTR [esi]
  00075	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0007a	83 c4 08	 add	 esp, 8
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterBase\Singleton.h

; 19   : 	{ 

  0007d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CSingleton@VCPythonItem@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00083	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonItem@@@@0PAVCPythonItem@@A, 0 ; CSingleton<CPythonItem>::ms_singleton
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 801  : }

  0008d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00090	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00097	59		 pop	 ecx
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
  0009e	cc		 int	 3
  0009f	cc		 int	 3
  000a0	cc		 int	 3
  000a1	cc		 int	 3
  000a2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CPythonItem@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CPythonItem@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CPythonItem@@UAE@XZ ENDP				; CPythonItem::~CPythonItem
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterBase\Singleton.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ??0CPythonItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CPythonItem@@QAE@XZ PROC				; CPythonItem::CPythonItem, COMDAT
; _this$ = ecx

; 793  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CPythonItem@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  0002c	89 3d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonItem@@@@0PAVCPythonItem@@A, edi ; CSingleton<CPythonItem>::ms_singleton
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 793  : {

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00039	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  0003c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CPythonItem@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00042	6a 18		 push	 24			; 00000018H
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 793  : {

  00044	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00054	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00059	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0005c	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0005e	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00061	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00064	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0006a	89 06		 mov	 DWORD PTR [esi], eax
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 12   : 		{

  0006c	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], OFFSET ??_7?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00073	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  0007a	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00081	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  00088	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0
  0008f	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  00096	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 14   : 			m_uInitCapacity=0;

  0009d	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0

; 15   : 			m_uUsedCapacity=0;

  000a4	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 793  : {

  000ab	68 00 00 00 00	 push	 OFFSET ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000b0	68 00 00 00 00	 push	 OFFSET ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000b5	6a 08		 push	 8
  000b7	6a 18		 push	 24			; 00000018H
  000b9	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  000bc	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000c6	c7 87 00 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+256], 0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 796  : }

  000d0	8b c7		 mov	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000d2	c7 87 04 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+260], 0
  000dc	c7 87 08 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+264], 0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 795  : 	m_dwPickedItemID = INVALID_ID;

  000e6	c7 47 34 ff ff
	ff ff		 mov	 DWORD PTR [edi+52], -1

; 796  : }

  000ed	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f7	59		 pop	 ecx
  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	8b e5		 mov	 esp, ebp
  000fc	5d		 pop	 ebp
  000fd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CPythonItem@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCPythonItem@@@@UAE@XZ ; CSingleton<CPythonItem>::~CSingleton<CPythonItem>
__unwindfunclet$??0CPythonItem@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$map@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@@std@@QAE@XZ
__unwindfunclet$??0CPythonItem@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@UAE@XZ ; CDynamicPool<CPythonItem::SGroundItemInstance>::~CDynamicPool<CPythonItem::SGroundItemInstance>
  0001e	cc		 int	 3
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
__ehhandler$??0CPythonItem@@QAE@XZ:
  00023	90		 npad	 1
  00024	90		 npad	 1
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CPythonItem@@QAE@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CPythonItem@@QAE@XZ ENDP				; CPythonItem::CPythonItem
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h
;	COMDAT ?RotationNormalizedArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
_vTo$ = 8						; size = 4
?RotationNormalizedArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z PROC ; RotationNormalizedArc, COMDAT
; ___$ReturnUdt$ = ecx
; _vFrom$ = edx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	53		 push	 ebx
  00008	56		 push	 esi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00009	8b 75 08	 mov	 esi, DWORD PTR _vTo$[ebp]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h

; 63   : {

  0000c	8b d9		 mov	 ebx, ecx
  0000e	57		 push	 edi
  0000f	8b fa		 mov	 edi, edx
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00011	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00016	f3 0f 10 0f	 movss	 xmm1, DWORD PTR [edi]
  0001a	f3 0f 59 0e	 mulss	 xmm1, DWORD PTR [esi]
  0001e	f3 0f 59 47 04	 mulss	 xmm0, DWORD PTR [edi+4]
  00023	f3 0f 58 c8	 addss	 xmm1, xmm0
  00027	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  0002c	f3 0f 59 46 08	 mulss	 xmm0, DWORD PTR [esi+8]
  00031	f3 0f 58 c8	 addss	 xmm1, xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h

; 67   : 	float s = sqrtf((1+d)*2);

  00035	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f800000
  0003d	f3 0f 58 c9	 addss	 xmm1, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

  00041	0f 5a c1	 cvtps2pd xmm0, xmm1
  00044	0f 57 c9	 xorps	 xmm1, xmm1
  00047	66 0f 2e c8	 ucomisd xmm1, xmm0
  0004b	77 06		 ja	 SHORT $LN11@RotationNo
  0004d	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00051	eb 05		 jmp	 SHORT $LN12@RotationNo
$LN11@RotationNo:
  00053	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN12@RotationNo:
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00058	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

  0005d	0f 57 d2	 xorps	 xmm2, xmm2
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00060	f3 0f 59 4f 04	 mulss	 xmm1, DWORD PTR [edi+4]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h

; 69   : 	return D3DXQUATERNION(c.x/s,c.y/s,c.z/s,s*0.5f);

  00065	8b c3		 mov	 eax, ebx
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

  00067	f2 0f 5a d0	 cvtsd2ss xmm2, xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0006b	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00070	f3 0f 59 47 08	 mulss	 xmm0, DWORD PTR [edi+8]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00075	f3 0f 10 36	 movss	 xmm6, DWORD PTR [esi]
  00079	f3 0f 10 1f	 movss	 xmm3, DWORD PTR [edi]
  0007d	f3 0f 5c c8	 subss	 xmm1, xmm0
  00081	0f 28 c3	 movaps	 xmm0, xmm3

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00084	f3 0f 59 5e 04	 mulss	 xmm3, DWORD PTR [esi+4]
  00089	f3 0f 59 46 08	 mulss	 xmm0, DWORD PTR [esi+8]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h

; 67   : 	float s = sqrtf((1+d)*2);

  0008e	f3 0f 5e ca	 divss	 xmm1, xmm2
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 667  :     x = fx;

  00092	f3 0f 11 0b	 movss	 DWORD PTR [ebx], xmm1

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00096	0f 28 ce	 movaps	 xmm1, xmm6
  00099	f3 0f 59 4f 08	 mulss	 xmm1, DWORD PTR [edi+8]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  0009e	f3 0f 59 77 04	 mulss	 xmm6, DWORD PTR [edi+4]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h

; 70   : }

  000a3	5f		 pop	 edi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  000a4	f3 0f 5c c8	 subss	 xmm1, xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h

; 70   : }

  000a8	5e		 pop	 esi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  000a9	f3 0f 5c de	 subss	 xmm3, xmm6

; 667  :     x = fx;

  000ad	f3 0f 5e ca	 divss	 xmm1, xmm2

; 668  :     y = fy;

  000b1	f3 0f 5e da	 divss	 xmm3, xmm2
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h

; 69   : 	return D3DXQUATERNION(c.x/s,c.y/s,c.z/s,s*0.5f);

  000b5	f3 0f 59 15 00
	00 00 00	 mulss	 xmm2, DWORD PTR __real@3f000000
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 668  :     y = fy;

  000bd	f3 0f 11 4b 04	 movss	 DWORD PTR [ebx+4], xmm1

; 669  :     z = fz;

  000c2	f3 0f 11 5b 08	 movss	 DWORD PTR [ebx+8], xmm3

; 670  :     w = fw;

  000c7	f3 0f 11 53 0c	 movss	 DWORD PTR [ebx+12], xmm2
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h

; 70   : }

  000cc	5b		 pop	 ebx
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c3		 ret	 0
?RotationNormalizedArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ENDP ; RotationNormalizedArc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h
;	COMDAT ?RotationArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
_vnTo$ = -28						; size = 12
_vnFrom$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_vTo$ = 8						; size = 4
?RotationArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z PROC ; RotationArc, COMDAT
; ___$ReturnUdt$ = ecx
; _vFrom$ = edx

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 20	 sub	 esp, 32			; 00000020H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 1c	 mov	 DWORD PTR __$ArrayPad$[esp+32], eax
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _vTo$[ebp]

; 74   : 	D3DXVECTOR3 vnFrom, vnTo;
; 75   : 	D3DXVec3Normalize(&vnFrom, &vFrom);

  00018	8d 44 24 14	 lea	 eax, DWORD PTR _vnFrom$[esp+36]
  0001c	57		 push	 edi
  0001d	52		 push	 edx
  0001e	50		 push	 eax
  0001f	8b f9		 mov	 edi, ecx
  00021	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 76   : 	D3DXVec3Normalize(&vnTo, &vTo);

  00026	56		 push	 esi
  00027	8d 44 24 10	 lea	 eax, DWORD PTR _vnTo$[esp+44]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00031	f3 0f 10 4c 24
	10		 movss	 xmm1, DWORD PTR _vnTo$[esp+44]
  00037	f3 0f 59 4c 24
	1c		 mulss	 xmm1, DWORD PTR _vnFrom$[esp+44]
  0003d	f3 0f 10 44 24
	18		 movss	 xmm0, DWORD PTR _vnFrom$[esp+40]
  00043	f3 0f 59 44 24
	0c		 mulss	 xmm0, DWORD PTR _vnTo$[esp+40]
  00049	f3 0f 58 c8	 addss	 xmm1, xmm0
  0004d	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR _vnFrom$[esp+48]
  00053	f3 0f 59 44 24
	14		 mulss	 xmm0, DWORD PTR _vnTo$[esp+48]
  00059	f3 0f 58 c8	 addss	 xmm1, xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h

; 67   : 	float s = sqrtf((1+d)*2);

  0005d	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f800000
  00065	f3 0f 58 c9	 addss	 xmm1, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

  00069	0f 5a c1	 cvtps2pd xmm0, xmm1
  0006c	0f 57 c9	 xorps	 xmm1, xmm1
  0006f	66 0f 2e c8	 ucomisd xmm1, xmm0
  00073	77 06		 ja	 SHORT $LN13@RotationAr
  00075	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00079	eb 05		 jmp	 SHORT $LN14@RotationAr
$LN13@RotationAr:
  0007b	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN14@RotationAr:
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00080	f3 0f 10 7c 24
	10		 movss	 xmm7, DWORD PTR _vnTo$[esp+44]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

  00086	0f 57 db	 xorps	 xmm3, xmm3
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00089	f3 0f 10 74 24
	1c		 movss	 xmm6, DWORD PTR _vnFrom$[esp+44]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h

; 77   : 	return RotationNormalizedArc(vnFrom, vnTo);

  0008f	8b c7		 mov	 eax, edi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00091	f3 0f 10 64 24
	20		 movss	 xmm4, DWORD PTR _vnFrom$[esp+48]
  00097	f3 0f 10 4c 24
	14		 movss	 xmm1, DWORD PTR _vnTo$[esp+48]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 764  :             return (float)sqrt(_X);

  0009d	f2 0f 5a d8	 cvtsd2ss xmm3, xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h

; 78   : }

  000a1	8b 4c 24 24	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+40]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  000a5	0f 28 c7	 movaps	 xmm0, xmm7
  000a8	f3 0f 59 ce	 mulss	 xmm1, xmm6

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  000ac	f3 0f 59 7c 24
	18		 mulss	 xmm7, DWORD PTR _vnFrom$[esp+40]
  000b2	f3 0f 59 74 24
	0c		 mulss	 xmm6, DWORD PTR _vnTo$[esp+40]
  000b8	f3 0f 59 c4	 mulss	 xmm0, xmm4
  000bc	f3 0f 59 64 24
	0c		 mulss	 xmm4, DWORD PTR _vnTo$[esp+40]
  000c2	f3 0f 5c fe	 subss	 xmm7, xmm6
  000c6	f3 0f 5c c8	 subss	 xmm1, xmm0
  000ca	f3 0f 10 44 24
	18		 movss	 xmm0, DWORD PTR _vnFrom$[esp+40]
  000d0	f3 0f 59 44 24
	14		 mulss	 xmm0, DWORD PTR _vnTo$[esp+48]

; 668  :     y = fy;

  000d6	f3 0f 5e fb	 divss	 xmm7, xmm3

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  000da	f3 0f 5c e0	 subss	 xmm4, xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h

; 67   : 	float s = sqrtf((1+d)*2);

  000de	f3 0f 5e cb	 divss	 xmm1, xmm3
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 667  :     x = fx;

  000e2	f3 0f 5e e3	 divss	 xmm4, xmm3
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h

; 69   : 	return D3DXQUATERNION(c.x/s,c.y/s,c.z/s,s*0.5f);

  000e6	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR __real@3f000000
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 667  :     x = fx;

  000ee	f3 0f 11 0f	 movss	 DWORD PTR [edi], xmm1

; 668  :     y = fy;

  000f2	f3 0f 11 67 04	 movss	 DWORD PTR [edi+4], xmm4

; 669  :     z = fz;

  000f7	f3 0f 11 7f 08	 movss	 DWORD PTR [edi+8], xmm7

; 670  :     w = fw;

  000fc	f3 0f 11 5f 0c	 movss	 DWORD PTR [edi+12], xmm3
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\GrpMath.h

; 78   : }

  00101	5f		 pop	 edi
  00102	5e		 pop	 esi
  00103	33 cc		 xor	 ecx, esp
  00105	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010a	8b e5		 mov	 esp, ebp
  0010c	5d		 pop	 ebp
  0010d	c3		 ret	 0
?RotationArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ENDP ; RotationArc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.h
;	COMDAT ??0SGroundItemInstance@CPythonItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0SGroundItemInstance@CPythonItem@@QAE@XZ PROC		; CPythonItem::SGroundItemInstance::SGroundItemInstance, COMDAT
; _this$ = ecx

; 71   : 			SGroundItemInstance() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SGroundItemInstance@CPythonItem@@6B@
  00013	e8 00 00 00 00	 call	 ??0CGraphicThingInstance@@QAE@XZ ; CGraphicThingInstance::CGraphicThingInstance
  00018	0f 57 c0	 xorps	 xmm0, xmm0
  0001b	8b c6		 mov	 eax, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2339 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0001d	0f 11 86 d0 03
	00 00		 movups	 XMMWORD PTR [esi+976], xmm0

; 4995 :         _My_data._Mysize = 0;

  00024	c7 86 e0 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+992], 0

; 4996 :         _My_data._Myres  = _BUF_SIZE - 1;

  0002e	c7 86 e4 03 00
	00 0f 00 00 00	 mov	 DWORD PTR [esi+996], 15	; 0000000fH

; 4997 :         _My_data._Activate_SSO_buffer();
; 4998 : 
; 4999 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5000 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00038	c6 86 d0 03 00
	00 00		 mov	 BYTE PTR [esi+976], 0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.h

; 71   : 			SGroundItemInstance() {}

  0003f	5e		 pop	 esi
  00040	8b e5		 mov	 esp, ebp
  00042	5d		 pop	 ebp
  00043	c3		 ret	 0
??0SGroundItemInstance@CPythonItem@@QAE@XZ ENDP		; CPythonItem::SGroundItemInstance::SGroundItemInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.h
;	COMDAT ??1SGroundItemInstance@CPythonItem@@UAE@XZ
_TEXT	SEGMENT
??1SGroundItemInstance@CPythonItem@@UAE@XZ PROC		; CPythonItem::SGroundItemInstance::~SGroundItemInstance, COMDAT
; _this$ = ecx

; 72   : 			virtual ~SGroundItemInstance() {}

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SGroundItemInstance@CPythonItem@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00009	8b 8e e4 03 00
	00		 mov	 ecx, DWORD PTR [esi+996]
  0000f	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5008 :         if (_My_data._Large_string_engaged()) {

  00012	72 2b		 jb	 SHORT $LN15@SGroundIte
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00014	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5013 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0001a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00021	72 12		 jb	 SHORT $LN27@SGroundIte

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00023	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00026	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00029	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00031	77 30		 ja	 SHORT $LN24@SGroundIte

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00033	8b c2		 mov	 eax, edx
$LN27@SGroundIte:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00035	51		 push	 ecx
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003c	83 c4 08	 add	 esp, 8
$LN15@SGroundIte:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :         _My_data._Mysize = 0;

  0003f	c7 86 e0 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+992], 0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.h

; 72   : 			virtual ~SGroundItemInstance() {}

  00049	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5017 :         _My_data._Myres  = _BUF_SIZE - 1;

  0004c	c7 86 e4 03 00
	00 0f 00 00 00	 mov	 DWORD PTR [esi+996], 15	; 0000000fH

; 5018 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5019 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00056	c6 86 d0 03 00
	00 00		 mov	 BYTE PTR [esi+976], 0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.h

; 72   : 			virtual ~SGroundItemInstance() {}

  0005d	5e		 pop	 esi
  0005e	e9 00 00 00 00	 jmp	 ??1CGraphicThingInstance@@UAE@XZ ; CGraphicThingInstance::~CGraphicThingInstance
$LN24@SGroundIte:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00063	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN33@SGroundIte:
  00068	cc		 int	 3
??1SGroundItemInstance@CPythonItem@@UAE@XZ ENDP		; CPythonItem::SGroundItemInstance::~SGroundItemInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??_GSGroundItemInstance@CPythonItem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSGroundItemInstance@CPythonItem@@UAEPAXI@Z PROC	; CPythonItem::SGroundItemInstance::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.h

; 72   : 			virtual ~SGroundItemInstance() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SGroundItemInstance@CPythonItem@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0000c	8b 8e e4 03 00
	00		 mov	 ecx, DWORD PTR [esi+996]
  00012	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5008 :         if (_My_data._Large_string_engaged()) {

  00015	72 2b		 jb	 SHORT $LN19@scalar
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00017	8b 86 d0 03 00
	00		 mov	 eax, DWORD PTR [esi+976]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5013 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0001d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00024	72 12		 jb	 SHORT $LN31@scalar

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00026	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00029	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00031	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00034	77 4a		 ja	 SHORT $LN28@scalar

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00036	8b c2		 mov	 eax, edx
$LN31@scalar:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00038	51		 push	 ecx
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003f	83 c4 08	 add	 esp, 8
$LN19@scalar:
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.h

; 72   : 			virtual ~SGroundItemInstance() {}

  00042	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :         _My_data._Mysize = 0;

  00045	c7 86 e0 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+992], 0

; 5017 :         _My_data._Myres  = _BUF_SIZE - 1;

  0004f	c7 86 e4 03 00
	00 0f 00 00 00	 mov	 DWORD PTR [esi+996], 15	; 0000000fH

; 5018 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5019 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00059	c6 86 d0 03 00
	00 00		 mov	 BYTE PTR [esi+976], 0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.h

; 72   : 			virtual ~SGroundItemInstance() {}

  00060	e8 00 00 00 00	 call	 ??1CGraphicThingInstance@@UAE@XZ ; CGraphicThingInstance::~CGraphicThingInstance
  00065	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00069	74 0e		 je	 SHORT $LN2@scalar
  0006b	68 e8 03 00 00	 push	 1000			; 000003e8H
  00070	56		 push	 esi
  00071	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00076	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00079	8b c6		 mov	 eax, esi
  0007b	5e		 pop	 esi
  0007c	5d		 pop	 ebp
  0007d	c2 04 00	 ret	 4
$LN28@scalar:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00080	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN38@scalar:
  00085	cc		 int	 3
??_GSGroundItemInstance@CPythonItem@@UAEPAXI@Z ENDP	; CPythonItem::SGroundItemInstance::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ??__F?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A@@YAXXZ
text$di	SEGMENT
??__F?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPythonItem::SGroundItemInstance::ms_astDropSoundFileName'', COMDAT

; 13   : std::string CPythonItem::TGroundItemInstance::ms_astDropSoundFileName[DROPSOUND_NUM];

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A@@YAXXZ ; `dynamic atexit destructor for 'CPythonItem::SGroundItemInstance::ms_astDropSoundFileName''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__F?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPythonItem::SGroundItemInstance::ms_astDropSoundFileName''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPythonItem::SGroundItemInstance::ms_astDropSoundFileName'', COMDAT
  00000	68 00 00 00 00	 push	 OFFSET ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00005	6a 05		 push	 5
  00007	6a 18		 push	 24			; 00000018H
  00009	68 00 00 00 00	 push	 OFFSET ?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; CPythonItem::SGroundItemInstance::ms_astDropSoundFileName
  0000e	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00013	c3		 ret	 0
??__F?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPythonItem::SGroundItemInstance::ms_astDropSoundFileName''
text$yd	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?Clear@SGroundItemInstance@CPythonItem@@QAEXXZ
_TEXT	SEGMENT
?Clear@SGroundItemInstance@CPythonItem@@QAEXXZ PROC	; CPythonItem::SGroundItemInstance::Clear, COMDAT
; _this$ = ecx

; 24   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3546 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00003	6a 00		 push	 0
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 25   : 	stOwnership = "";

  0000a	8d 8e d0 03 00
	00		 lea	 ecx, DWORD PTR [esi+976]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3546 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00010	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 26   : 	ThingInstance.Clear();

  00015	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  00018	e8 00 00 00 00	 call	 ?Clear@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Clear

; 27   : 	CEffectManager::Instance().DestroyEffectInstance(dwEffectInstanceIndex);

  0001d	ff b6 cc 03 00
	00		 push	 DWORD PTR [esi+972]
  00023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
  00029	e8 00 00 00 00	 call	 ?DestroyEffectInstance@CEffectManager@@QAE_NK@Z ; CEffectManager::DestroyEffectInstance
  0002e	5e		 pop	 esi

; 28   : }

  0002f	c3		 ret	 0
?Clear@SGroundItemInstance@CPythonItem@@QAEXXZ ENDP	; CPythonItem::SGroundItemInstance::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?__PlayDropSound@SGroundItemInstance@CPythonItem@@SAXKABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
?__PlayDropSound@SGroundItemInstance@CPythonItem@@SAXKABUD3DXVECTOR3@@@Z PROC ; CPythonItem::SGroundItemInstance::__PlayDropSound, COMDAT
; _eItemType$ = ecx
; _c_rv3Pos$ = edx

; 32   : 	if (eItemType>=DROPSOUND_NUM)

  00000	83 f9 05	 cmp	 ecx, 5
  00003	73 46		 jae	 SHORT $LN1@PlayDropSo

; 35   : 	CSoundManager::Instance().PlaySound3D(c_rv3Pos.x, c_rv3Pos.y, c_rv3Pos.z, ms_astDropSoundFileName[eItemType].c_str());

  00005	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00008	83 3c c5 14 00
	00 00 10	 cmp	 DWORD PTR ?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A[eax*8+20], 16 ; 00000010H

; 4256 :         return _Mypair._Myval2._Myptr();

  00010	8d 04 c5 00 00
	00 00		 lea	 eax, DWORD PTR ?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A[eax*8]

; 2293 :         if (_Large_string_engaged()) {

  00017	72 02		 jb	 SHORT $LN7@PlayDropSo

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00019	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@PlayDropSo:
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 35   : 	CSoundManager::Instance().PlaySound3D(c_rv3Pos.x, c_rv3Pos.y, c_rv3Pos.z, ms_astDropSoundFileName[eItemType].c_str());

  0001b	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A ; CSingleton<CSoundManager>::ms_singleton
  00026	6a 01		 push	 1
  00028	50		 push	 eax
  00029	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0002c	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00032	f3 0f 10 42 04	 movss	 xmm0, DWORD PTR [edx+4]
  00037	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0003d	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00041	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00046	e8 00 00 00 00	 call	 ?PlaySound3D@CSoundManager@@QAEXMMMPBDH@Z ; CSoundManager::PlaySound3D
$LN1@PlayDropSo:

; 36   : }

  0004b	c3		 ret	 0
?__PlayDropSound@SGroundItemInstance@CPythonItem@@SAXKABUD3DXVECTOR3@@@Z ENDP ; CPythonItem::SGroundItemInstance::__PlayDropSound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?Update@SGroundItemInstance@CPythonItem@@QAE_NXZ
_TEXT	SEGMENT
_qc$1 = -72						; size = 16
_q$2 = -56						; size = 16
_qc$3 = -56						; size = 16
_qAdjust$4 = -40					; size = 16
_qAdjust$5 = -24					; size = 16
_v3NewPosition$6 = -20					; size = 12
_rate$1$ = -8						; size = 4
_this$1$ = -4						; size = 4
tv463 = -4						; size = 4
?Update@SGroundItemInstance@CPythonItem@@QAE_NXZ PROC	; CPythonItem::SGroundItemInstance::Update, COMDAT
; _this$ = ecx

; 39   : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 48	 sub	 esp, 72			; 00000048H
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8b f9		 mov	 edi, ecx
  0001d	89 7d fc	 mov	 DWORD PTR _this$1$[ebp], edi

; 40   : 	if (bAnimEnded)

  00020	80 bf c8 03 00
	00 00		 cmp	 BYTE PTR [edi+968], 0
  00027	74 0b		 je	 SHORT $LN2@Update

; 41   : 		return false;

  00029	32 c0		 xor	 al, al

; 108  : }

  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	8b e3		 mov	 esp, ebx
  00032	5b		 pop	 ebx
  00033	c3		 ret	 0
$LN2@Update:

; 42   : 	if (dwEndTime < CTimer::Instance().GetCurrentMillisecond())

  00034	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  0003a	e8 00 00 00 00	 call	 ?GetCurrentMillisecond@CTimer@@QAEKXZ ; CTimer::GetCurrentMillisecond
  0003f	8d 77 20	 lea	 esi, DWORD PTR [edi+32]
  00042	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  00045	39 87 c0 03 00
	00		 cmp	 DWORD PTR [edi+960], eax
  0004b	0f 83 df 00 00
	00		 jae	 $LN3@Update

; 43   : 	{
; 44   : 		ThingInstance.SetRotationQuaternion(qEnd);

  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 ?SetRotationQuaternion@CGraphicObjectInstance@@QAEXABUD3DXQUATERNION@@@Z ; CGraphicObjectInstance::SetRotationQuaternion

; 54   : 		D3DXQUATERNION qAdjust(-v3Center.x, -v3Center.y, -v3Center.z, 0.0f);

  00057	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000

; 57   : 		D3DXQuaternionMultiply(&qAdjust,&qAdjust,&qEnd);

  0005f	8d 45 e8	 lea	 eax, DWORD PTR _qAdjust$5[ebp]
  00062	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  00067	0f 57 c1	 xorps	 xmm0, xmm1
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 670  :     w = fw;

  0006a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _qAdjust$5[ebp+12], 0
  00071	f3 0f 11 45 e8	 movss	 DWORD PTR _qAdjust$5[ebp], xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 54   : 		D3DXQUATERNION qAdjust(-v3Center.x, -v3Center.y, -v3Center.z, 0.0f);

  00076	f3 0f 10 47 34	 movss	 xmm0, DWORD PTR [edi+52]
  0007b	0f 57 c1	 xorps	 xmm0, xmm1
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 668  :     y = fy;

  0007e	f3 0f 11 45 ec	 movss	 DWORD PTR _qAdjust$5[ebp+4], xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 54   : 		D3DXQUATERNION qAdjust(-v3Center.x, -v3Center.y, -v3Center.z, 0.0f);

  00083	f3 0f 10 47 38	 movss	 xmm0, DWORD PTR [edi+56]
  00088	0f 57 c1	 xorps	 xmm0, xmm1
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 669  :     z = fz;

  0008b	f3 0f 11 45 f0	 movss	 DWORD PTR _qAdjust$5[ebp+8], xmm0

; 1616 :     pOut->x = -pQ->x;

  00090	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00094	0f 57 c1	 xorps	 xmm0, xmm1
  00097	f3 0f 11 45 c8	 movss	 DWORD PTR _qc$3[ebp], xmm0

; 1617 :     pOut->y = -pQ->y;

  0009c	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  000a1	0f 57 c1	 xorps	 xmm0, xmm1
  000a4	f3 0f 11 45 cc	 movss	 DWORD PTR _qc$3[ebp+4], xmm0

; 1618 :     pOut->z = -pQ->z;

  000a9	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  000ae	0f 57 c1	 xorps	 xmm0, xmm1
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 57   : 		D3DXQuaternionMultiply(&qAdjust,&qAdjust,&qEnd);

  000b1	56		 push	 esi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 1618 :     pOut->z = -pQ->z;

  000b2	f3 0f 11 45 d0	 movss	 DWORD PTR _qc$3[ebp+8], xmm0

; 1619 :     pOut->w =  pQ->w;

  000b7	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 57   : 		D3DXQuaternionMultiply(&qAdjust,&qAdjust,&qEnd);

  000bc	50		 push	 eax
  000bd	50		 push	 eax
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 1619 :     pOut->w =  pQ->w;

  000be	f3 0f 11 45 d4	 movss	 DWORD PTR _qc$3[ebp+12], xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 57   : 		D3DXQuaternionMultiply(&qAdjust,&qAdjust,&qEnd);

  000c3	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 58   : 		D3DXQuaternionMultiply(&qAdjust,&qc,&qAdjust);

  000c8	8d 45 e8	 lea	 eax, DWORD PTR _qAdjust$5[ebp]
  000cb	50		 push	 eax
  000cc	8d 45 c8	 lea	 eax, DWORD PTR _qc$3[ebp]
  000cf	50		 push	 eax
  000d0	8d 45 e8	 lea	 eax, DWORD PTR _qAdjust$5[ebp]
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 59   : 
; 60   : 		ThingInstance.SetPosition(v3EndPosition.x+qAdjust.x, 

  000d9	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _qAdjust$5[ebp+8]
  000de	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  000e1	f3 0f 58 47 10	 addss	 xmm0, DWORD PTR [edi+16]
  000e6	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000e9	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000ef	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _qAdjust$5[ebp+4]
  000f4	f3 0f 58 47 0c	 addss	 xmm0, DWORD PTR [edi+12]
  000f9	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000ff	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _qAdjust$5[ebp]
  00104	f3 0f 58 47 08	 addss	 xmm0, DWORD PTR [edi+8]
  00109	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010e	e8 00 00 00 00	 call	 ?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z ; CGraphicObjectInstance::SetPosition

; 61   : 			v3EndPosition.y+qAdjust.y,
; 62   : 			v3EndPosition.z+qAdjust.z);
; 63   : 		//ThingInstance.Update();
; 64   : 		bAnimEnded = true;
; 65   : 
; 66   : 		__PlayDropSound(eDropSoundType, v3EndPosition);

  00113	8b 8f c4 03 00
	00		 mov	 ecx, DWORD PTR [edi+964]
  00119	8d 57 08	 lea	 edx, DWORD PTR [edi+8]
  0011c	c6 87 c8 03 00
	00 01		 mov	 BYTE PTR [edi+968], 1
  00123	e8 00 00 00 00	 call	 ?__PlayDropSound@SGroundItemInstance@CPythonItem@@SAXKABUD3DXVECTOR3@@@Z ; CPythonItem::SGroundItemInstance::__PlayDropSound

; 67   : 	}

  00128	8d 77 3c	 lea	 esi, DWORD PTR [edi+60]
  0012b	e9 d2 01 00 00	 jmp	 $LN4@Update
$LN3@Update:

; 68   : 	else
; 69   : 	{
; 70   : 		DWORD time = CTimer::Instance().GetCurrentMillisecond() - dwStartTime;

  00130	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00136	e8 00 00 00 00	 call	 ?GetCurrentMillisecond@CTimer@@QAEKXZ ; CTimer::GetCurrentMillisecond

; 71   : 		DWORD etime = dwEndTime - CTimer::Instance().GetCurrentMillisecond();

  0013b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00141	8b f0		 mov	 esi, eax
  00143	2b b7 bc 03 00
	00		 sub	 esi, DWORD PTR [edi+956]
  00149	8b bf c0 03 00
	00		 mov	 edi, DWORD PTR [edi+960]
  0014f	e8 00 00 00 00	 call	 ?GetCurrentMillisecond@CTimer@@QAEKXZ ; CTimer::GetCurrentMillisecond
  00154	66 0f 6e c6	 movd	 xmm0, esi
  00158	8b cf		 mov	 ecx, edi

; 72   : 		float rate = time * 1.0f / (dwEndTime - dwStartTime);

  0015a	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0015e	2b c8		 sub	 ecx, eax
  00160	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00163	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00166	2b b8 bc 03 00
	00		 sub	 edi, DWORD PTR [eax+956]
  0016c	f2 0f 58 04 f5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[esi*8]
  00175	66 0f 5a d0	 cvtpd2ps xmm2, xmm0
  00179	66 0f 6e c7	 movd	 xmm0, edi
  0017d	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00181	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00184	f2 0f 58 04 fd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edi*8]

; 73   : 
; 74   : 		D3DXVECTOR3 v3NewPosition=v3EndPosition;// = rate*(v3EndPosition - v3StartPosition) + v3StartPosition;

  0018d	8b f8		 mov	 edi, eax
  0018f	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00193	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00196	89 45 f4	 mov	 DWORD PTR _v3NewPosition$6[ebp+8], eax

; 75   : 		v3NewPosition.z += 100-100*rate*(3*rate-2);//-100*(rate-1)*(3*rate+2);
; 76   : 
; 77   : 		D3DXQUATERNION q;
; 78   : 		D3DXQuaternionRotationAxis(&q, &v3RotationAxis, etime * 0.03f *(-1+rate*(3*rate-2)));

  00199	8d 47 14	 lea	 eax, DWORD PTR [edi+20]
  0019c	f3 0f 5e d0	 divss	 xmm2, xmm0
  001a0	f3 0f 7e 47 08	 movq	 xmm0, QWORD PTR [edi+8]
  001a5	66 0f d6 45 ec	 movq	 QWORD PTR _v3NewPosition$6[ebp], xmm0
  001aa	0f 28 c2	 movaps	 xmm0, xmm2
  001ad	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40400000
  001b5	f3 0f 11 55 f8	 movss	 DWORD PTR _rate$1$[ebp], xmm2
  001ba	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@40000000
  001c2	0f 28 c8	 movaps	 xmm1, xmm0
  001c5	f3 0f 11 45 fc	 movss	 DWORD PTR tv463[ebp], xmm0
  001ca	66 0f 6e c1	 movd	 xmm0, ecx
  001ce	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  001d2	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  001d5	51		 push	 ecx
  001d6	f3 0f 59 ca	 mulss	 xmm1, xmm2
  001da	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  001e3	f3 0f 5c 0d 00
	00 00 00	 subss	 xmm1, DWORD PTR __real@3f800000
  001eb	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001ef	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3cf5c28f
  001f7	f3 0f 59 c8	 mulss	 xmm1, xmm0
  001fb	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00200	50		 push	 eax
  00201	8d 45 c8	 lea	 eax, DWORD PTR _q$2[ebp]
  00204	50		 push	 eax
  00205	e8 00 00 00 00	 call	 _D3DXQuaternionRotationAxis@12

; 79   : 		//ThingInstance.SetRotation(rEnd.y + etime*rStart.y, rEnd.x + etime*rStart.x, rEnd.z + etime*rStart.z);
; 80   : 		D3DXQuaternionMultiply(&q,&qEnd,&q);

  0020a	8d 45 c8	 lea	 eax, DWORD PTR _q$2[ebp]
  0020d	50		 push	 eax
  0020e	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
  00211	50		 push	 eax
  00212	8d 45 c8	 lea	 eax, DWORD PTR _q$2[ebp]
  00215	50		 push	 eax
  00216	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 81   : 
; 82   : 		ThingInstance.SetRotationQuaternion(q);

  0021b	8d 45 c8	 lea	 eax, DWORD PTR _q$2[ebp]
  0021e	8d 77 3c	 lea	 esi, DWORD PTR [edi+60]
  00221	50		 push	 eax
  00222	8b ce		 mov	 ecx, esi
  00224	e8 00 00 00 00	 call	 ?SetRotationQuaternion@CGraphicObjectInstance@@QAEXABUD3DXQUATERNION@@@Z ; CGraphicObjectInstance::SetRotationQuaternion

; 83   : 		D3DXQUATERNION qAdjust(-v3Center.x, -v3Center.y, -v3Center.z, 0.0f);

  00229	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00231	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  00236	0f 57 c1	 xorps	 xmm0, xmm1
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 670  :     w = fw;

  00239	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _qAdjust$4[ebp+12], 0
  00240	f3 0f 11 45 d8	 movss	 DWORD PTR _qAdjust$4[ebp], xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 83   : 		D3DXQUATERNION qAdjust(-v3Center.x, -v3Center.y, -v3Center.z, 0.0f);

  00245	f3 0f 10 47 34	 movss	 xmm0, DWORD PTR [edi+52]
  0024a	0f 57 c1	 xorps	 xmm0, xmm1
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 668  :     y = fy;

  0024d	f3 0f 11 45 dc	 movss	 DWORD PTR _qAdjust$4[ebp+4], xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 83   : 		D3DXQUATERNION qAdjust(-v3Center.x, -v3Center.y, -v3Center.z, 0.0f);

  00252	f3 0f 10 47 38	 movss	 xmm0, DWORD PTR [edi+56]
  00257	0f 57 c1	 xorps	 xmm0, xmm1
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 669  :     z = fz;

  0025a	f3 0f 11 45 e0	 movss	 DWORD PTR _qAdjust$4[ebp+8], xmm0

; 1616 :     pOut->x = -pQ->x;

  0025f	f3 0f 10 45 c8	 movss	 xmm0, DWORD PTR _q$2[ebp]
  00264	0f 57 c1	 xorps	 xmm0, xmm1
  00267	f3 0f 11 45 b8	 movss	 DWORD PTR _qc$1[ebp], xmm0

; 1617 :     pOut->y = -pQ->y;

  0026c	f3 0f 10 45 cc	 movss	 xmm0, DWORD PTR _q$2[ebp+4]
  00271	0f 57 c1	 xorps	 xmm0, xmm1
  00274	f3 0f 11 45 bc	 movss	 DWORD PTR _qc$1[ebp+4], xmm0

; 1618 :     pOut->z = -pQ->z;

  00279	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _q$2[ebp+8]
  0027e	0f 57 c1	 xorps	 xmm0, xmm1
  00281	f3 0f 11 45 c0	 movss	 DWORD PTR _qc$1[ebp+8], xmm0

; 1619 :     pOut->w =  pQ->w;

  00286	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _q$2[ebp+12]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 86   : 		D3DXQuaternionMultiply(&qAdjust,&qAdjust,&q);

  0028b	8d 45 c8	 lea	 eax, DWORD PTR _q$2[ebp]
  0028e	50		 push	 eax
  0028f	8d 45 d8	 lea	 eax, DWORD PTR _qAdjust$4[ebp]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 1619 :     pOut->w =  pQ->w;

  00292	f3 0f 11 45 c4	 movss	 DWORD PTR _qc$1[ebp+12], xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 86   : 		D3DXQuaternionMultiply(&qAdjust,&qAdjust,&q);

  00297	50		 push	 eax
  00298	50		 push	 eax
  00299	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 87   : 		D3DXQuaternionMultiply(&qAdjust,&qc,&qAdjust);

  0029e	8d 45 d8	 lea	 eax, DWORD PTR _qAdjust$4[ebp]
  002a1	50		 push	 eax
  002a2	8d 45 b8	 lea	 eax, DWORD PTR _qc$1[ebp]
  002a5	50		 push	 eax
  002a6	8d 45 d8	 lea	 eax, DWORD PTR _qAdjust$4[ebp]
  002a9	50		 push	 eax
  002aa	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12
  002af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000

; 88   : 		
; 89   : 		ThingInstance.SetPosition(v3NewPosition.x+qAdjust.x, 

  002b7	83 ec 0c	 sub	 esp, 12			; 0000000cH
  002ba	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _rate$1$[ebp]
  002bf	8b ce		 mov	 ecx, esi
  002c1	f3 0f 59 c8	 mulss	 xmm1, xmm0
  002c5	f3 0f 59 4d fc	 mulss	 xmm1, DWORD PTR tv463[ebp]
  002ca	f3 0f 5c c1	 subss	 xmm0, xmm1
  002ce	f3 0f 58 45 f4	 addss	 xmm0, DWORD PTR _v3NewPosition$6[ebp+8]
  002d3	f3 0f 58 45 e0	 addss	 xmm0, DWORD PTR _qAdjust$4[ebp+8]
  002d8	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  002de	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _qAdjust$4[ebp+4]
  002e3	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _v3NewPosition$6[ebp+4]
  002e8	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  002ee	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _qAdjust$4[ebp]
  002f3	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _v3NewPosition$6[ebp]
  002f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fd	e8 00 00 00 00	 call	 ?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z ; CGraphicObjectInstance::SetPosition
$LN4@Update:

; 90   : 			v3NewPosition.y+qAdjust.y,
; 91   : 			v3NewPosition.z+qAdjust.z);
; 92   : 		
; 93   : 		/*D3DXVECTOR3 v3Adjust = -v3Center;
; 94   : 		D3DXMATRIX mat;
; 95   : 		D3DXMatrixRotationYawPitchRoll(&mat, 
; 96   : 		D3DXToRadian(rEnd.y + etime*rStart.y), 
; 97   : 		D3DXToRadian(rEnd.x + etime*rStart.x), 
; 98   : 		D3DXToRadian(rEnd.z + etime*rStart.z));
; 99   : 						
; 100  : 		D3DXVec3TransformCoord(&v3Adjust,&v3Adjust,&mat);
; 101  : 		//Tracef("%f %f %f\n",v3Adjust.x,v3Adjust.y,v3Adjust.z);
; 102  : 		v3NewPosition += v3Adjust;
; 103  : 		ThingInstance.SetPosition(v3NewPosition.x, v3NewPosition.y, v3NewPosition.z);*/
; 104  : 	}
; 105  : 	ThingInstance.Transform();

  00302	8b ce		 mov	 ecx, esi
  00304	e8 00 00 00 00	 call	 ?Transform@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Transform

; 106  : 	ThingInstance.Deform();				

  00309	8b ce		 mov	 ecx, esi
  0030b	e8 00 00 00 00	 call	 ?Deform@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Deform

; 107  : 	return !bAnimEnded;

  00310	80 bf c8 03 00
	00 00		 cmp	 BYTE PTR [edi+968], 0

; 108  : }

  00317	5f		 pop	 edi
  00318	0f 94 c0	 sete	 al
  0031b	5e		 pop	 esi
  0031c	8b e5		 mov	 esp, ebp
  0031e	5d		 pop	 ebp
  0031f	8b e3		 mov	 esp, ebx
  00321	5b		 pop	 ebx
  00322	c3		 ret	 0
?Update@SGroundItemInstance@CPythonItem@@QAE_NXZ ENDP	; CPythonItem::SGroundItemInstance::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?SetUseSoundFileName@CPythonItem@@QAEXKABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_eItemType$ = 8						; size = 4
_c_rstFileName$ = 12					; size = 4
?SetUseSoundFileName@CPythonItem@@QAEXKABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CPythonItem::SetUseSoundFileName, COMDAT
; _this$ = ecx

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 136  : 	if (eItemType>=USESOUND_NUM)

  00003	8b 45 08	 mov	 eax, DWORD PTR _eItemType$[ebp]
  00006	83 f8 08	 cmp	 eax, 8
  00009	73 27		 jae	 SHORT $LN4@SetUseSoun

; 141  : 	m_astUseSoundFileName[eItemType]=c_rstFileName;	

  0000b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0000e	8d 0c c1	 lea	 ecx, DWORD PTR [ecx+eax*8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3303 :         if (this == _STD addressof(_Right)) {

  00011	8b 45 0c	 mov	 eax, DWORD PTR _c_rstFileName$[ebp]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 141  : 	m_astUseSoundFileName[eItemType]=c_rstFileName;	

  00014	83 c1 40	 add	 ecx, 64			; 00000040H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3303 :         if (this == _STD addressof(_Right)) {

  00017	3b c8		 cmp	 ecx, eax
  00019	74 17		 je	 SHORT $LN4@SetUseSoun

; 2301 :         return _BUF_SIZE <= _Myres;

  0001b	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 3343 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0001f	8b 50 10	 mov	 edx, DWORD PTR [eax+16]

; 2293 :         if (_Large_string_engaged()) {

  00022	72 02		 jb	 SHORT $LN8@SetUseSoun

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN8@SetUseSoun:

; 3343 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00026	89 55 0c	 mov	 DWORD PTR _c_rstFileName$[ebp], edx
  00029	89 45 08	 mov	 DWORD PTR _eItemType$[ebp], eax
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 142  : }

  0002c	5d		 pop	 ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3343 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0002d	e9 00 00 00 00	 jmp	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN4@SetUseSoun:
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 142  : }

  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
?SetUseSoundFileName@CPythonItem@@QAEXKABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CPythonItem::SetUseSoundFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?SetDropSoundFileName@CPythonItem@@QAEXKABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_eItemType$ = 8						; size = 4
_c_rstFileName$ = 12					; size = 4
?SetDropSoundFileName@CPythonItem@@QAEXKABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CPythonItem::SetDropSoundFileName, COMDAT
; _this$dead$ = ecx

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 146  : 	if (eItemType>=DROPSOUND_NUM)

  00004	8b 7d 08	 mov	 edi, DWORD PTR _eItemType$[ebp]
  00007	83 ff 05	 cmp	 edi, 5
  0000a	73 3e		 jae	 SHORT $LN11@SetDropSou
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2292 :         const value_type* _Result = _Bx._Buf;

  0000c	56		 push	 esi
  0000d	8b 75 0c	 mov	 esi, DWORD PTR _c_rstFileName$[ebp]
  00010	8b c6		 mov	 eax, esi

; 2301 :         return _BUF_SIZE <= _Myres;

  00012	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  00016	72 02		 jb	 SHORT $LN20@SetDropSou

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
$LN20@SetDropSou:
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 149  : 	Tracenf("SetDropSoundFile %d : %s", eItemType, c_rstFileName.c_str());

  0001a	50		 push	 eax
  0001b	57		 push	 edi
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@CMCGILDJ@SetDropSoundFile?5?$CFd?5?3?5?$CFs@
  00021	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf

; 150  : 
; 151  : 	SGroundItemInstance::ms_astDropSoundFileName[eItemType]=c_rstFileName;

  00026	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002c	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR ?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A[eax*8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3303 :         if (this == _STD addressof(_Right)) {

  00033	3b ce		 cmp	 ecx, esi
  00035	74 12		 je	 SHORT $LN21@SetDropSou

; 2301 :         return _BUF_SIZE <= _Myres;

  00037	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 3343 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0003b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 2293 :         if (_Large_string_engaged()) {

  0003e	72 02		 jb	 SHORT $LN15@SetDropSou

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00040	8b 36		 mov	 esi, DWORD PTR [esi]
$LN15@SetDropSou:

; 3343 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00042	50		 push	 eax
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN21@SetDropSou:
  00049	5e		 pop	 esi
$LN11@SetDropSou:
  0004a	5f		 pop	 edi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 152  : }

  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
?SetDropSoundFileName@CPythonItem@@QAEXKABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CPythonItem::SetDropSoundFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?PlayUseSound@CPythonItem@@QAEXK@Z
_TEXT	SEGMENT
_pkItemData$ = -4					; size = 4
_dwItemID$ = 8						; size = 4
?PlayUseSound@CPythonItem@@QAEXK@Z PROC			; CPythonItem::PlayUseSound, COMDAT
; _this$ = ecx

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 156  : 	//CItemManager& rkItemMgr=CItemManager::Instance();
; 157  : 
; 158  : 	CItemData* pkItemData;
; 159  : 	if (!CItemManager::Instance().GetItemDataPointer(dwItemID, &pkItemData))

  00005	8d 45 fc	 lea	 eax, DWORD PTR _pkItemData$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCItemManager@@@@0PAVCItemManager@@A ; CSingleton<CItemManager>::ms_singleton
  00010	50		 push	 eax
  00011	ff 75 08	 push	 DWORD PTR _dwItemID$[ebp]
  00014	e8 00 00 00 00	 call	 ?GetItemDataPointer@CItemManager@@QAEHKPAPAVCItemData@@@Z ; CItemManager::GetItemDataPointer
  00019	85 c0		 test	 eax, eax
  0001b	74 2f		 je	 SHORT $LN1@PlayUseSou

; 160  : 		return;
; 161  : 
; 162  : 	DWORD eItemType=__GetUseSoundType(*pkItemData);

  0001d	ff 75 fc	 push	 DWORD PTR _pkItemData$[ebp]
  00020	e8 00 00 00 00	 call	 ?__GetUseSoundType@CPythonItem@@IAEKABVCItemData@@@Z ; CPythonItem::__GetUseSoundType

; 163  : 	if (eItemType==USESOUND_NONE)

  00025	85 c0		 test	 eax, eax
  00027	74 23		 je	 SHORT $LN1@PlayUseSou

; 164  : 		return;
; 165  : 	if (eItemType>=USESOUND_NUM)

  00029	83 f8 08	 cmp	 eax, 8
  0002c	73 1e		 jae	 SHORT $LN1@PlayUseSou

; 168  : 	CSoundManager::Instance().PlaySound2D(m_astUseSoundFileName[eItemType].c_str());

  0002e	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4256 :         return _Mypair._Myval2._Myptr();

  00031	8d 40 08	 lea	 eax, DWORD PTR [eax+8]

; 2301 :         return _BUF_SIZE <= _Myres;

  00034	83 7c c6 14 10	 cmp	 DWORD PTR [esi+eax*8+20], 16 ; 00000010H

; 4256 :         return _Mypair._Myval2._Myptr();

  00039	8d 04 c6	 lea	 eax, DWORD PTR [esi+eax*8]

; 2293 :         if (_Large_string_engaged()) {

  0003c	72 02		 jb	 SHORT $LN9@PlayUseSou

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0003e	8b 00		 mov	 eax, DWORD PTR [eax]
$LN9@PlayUseSou:
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 168  : 	CSoundManager::Instance().PlaySound2D(m_astUseSoundFileName[eItemType].c_str());

  00040	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A ; CSingleton<CSoundManager>::ms_singleton
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?PlaySound2D@CSoundManager@@QAEXPBD@Z ; CSoundManager::PlaySound2D
$LN1@PlayUseSou:
  0004c	5e		 pop	 esi

; 169  : }

  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
?PlayUseSound@CPythonItem@@QAEXK@Z ENDP			; CPythonItem::PlayUseSound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?PlayDropSound@CPythonItem@@QAEXK@Z
_TEXT	SEGMENT
_pkItemData$ = -4					; size = 4
_dwItemID$ = 8						; size = 4
?PlayDropSound@CPythonItem@@QAEXK@Z PROC		; CPythonItem::PlayDropSound, COMDAT
; _this$dead$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 174  : 	//CItemManager& rkItemMgr=CItemManager::Instance();
; 175  : 
; 176  : 	CItemData* pkItemData;
; 177  : 	if (!CItemManager::Instance().GetItemDataPointer(dwItemID, &pkItemData))

  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCItemManager@@@@0PAVCItemManager@@A ; CSingleton<CItemManager>::ms_singleton
  0000a	8d 45 fc	 lea	 eax, DWORD PTR _pkItemData$[ebp]
  0000d	50		 push	 eax
  0000e	ff 75 08	 push	 DWORD PTR _dwItemID$[ebp]
  00011	e8 00 00 00 00	 call	 ?GetItemDataPointer@CItemManager@@QAEHKPAPAVCItemData@@@Z ; CItemManager::GetItemDataPointer
  00016	85 c0		 test	 eax, eax
  00018	74 2f		 je	 SHORT $LN1@PlayDropSo

; 178  : 		return;
; 179  : 
; 180  : 	DWORD eItemType=__GetDropSoundType(*pkItemData);

  0001a	ff 75 fc	 push	 DWORD PTR _pkItemData$[ebp]
  0001d	e8 00 00 00 00	 call	 ?__GetDropSoundType@CPythonItem@@IAEKABVCItemData@@@Z ; CPythonItem::__GetDropSoundType

; 181  : 	if (eItemType>=DROPSOUND_NUM)

  00022	83 f8 05	 cmp	 eax, 5
  00025	73 22		 jae	 SHORT $LN1@PlayDropSo

; 184  : 	CSoundManager::Instance().PlaySound2D(SGroundItemInstance::ms_astDropSoundFileName[eItemType].c_str());

  00027	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0002a	83 3c c5 14 00
	00 00 10	 cmp	 DWORD PTR ?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A[eax*8+20], 16 ; 00000010H

; 4256 :         return _Mypair._Myval2._Myptr();

  00032	8d 04 c5 00 00
	00 00		 lea	 eax, DWORD PTR ?ms_astDropSoundFileName@SGroundItemInstance@CPythonItem@@2PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A[eax*8]

; 2293 :         if (_Large_string_engaged()) {

  00039	72 02		 jb	 SHORT $LN8@PlayDropSo

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN8@PlayDropSo:
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 184  : 	CSoundManager::Instance().PlaySound2D(SGroundItemInstance::ms_astDropSoundFileName[eItemType].c_str());

  0003d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A ; CSingleton<CSoundManager>::ms_singleton
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?PlaySound2D@CSoundManager@@QAEXPBD@Z ; CSoundManager::PlaySound2D
$LN1@PlayDropSo:

; 185  : }

  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 04 00	 ret	 4
?PlayDropSound@CPythonItem@@QAEXK@Z ENDP		; CPythonItem::PlayDropSound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?PlayUsePotionSound@CPythonItem@@QAEXXZ
_TEXT	SEGMENT
?PlayUsePotionSound@CPythonItem@@QAEXXZ PROC		; CPythonItem::PlayUsePotionSound, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4256 :         return _Mypair._Myval2._Myptr();

  00000	81 c1 d0 00 00
	00		 add	 ecx, 208		; 000000d0H

; 2301 :         return _BUF_SIZE <= _Myres;

  00006	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  0000a	72 02		 jb	 SHORT $LN6@PlayUsePot

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0000c	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN6@PlayUsePot:
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 189  : 	CSoundManager::Instance().PlaySound2D(m_astUseSoundFileName[USESOUND_POTION].c_str());

  0000e	51		 push	 ecx
  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A ; CSingleton<CSoundManager>::ms_singleton
  00015	e8 00 00 00 00	 call	 ?PlaySound2D@CSoundManager@@QAEXPBD@Z ; CSoundManager::PlaySound2D

; 190  : }

  0001a	c3		 ret	 0
?PlayUsePotionSound@CPythonItem@@QAEXXZ ENDP		; CPythonItem::PlayUsePotionSound
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?__GetDropSoundType@CPythonItem@@IAEKABVCItemData@@@Z
_TEXT	SEGMENT
_c_rkItemData$ = 8					; size = 4
?__GetDropSoundType@CPythonItem@@IAEKABVCItemData@@@Z PROC ; CPythonItem::__GetDropSoundType, COMDAT
; _this$dead$ = ecx

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 194  : 	switch (c_rkItemData.GetType())

  00004	8b 75 08	 mov	 esi, DWORD PTR _c_rkItemData$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?GetType@CItemData@@QBEEXZ ; CItemData::GetType
  0000e	0f b6 c0	 movzx	 eax, al
  00011	83 e8 01	 sub	 eax, 1
  00014	74 32		 je	 SHORT $LN8@GetDropSou
  00016	83 e8 01	 sub	 eax, 1
  00019	75 4d		 jne	 SHORT $LN10@GetDropSou

; 210  : 					break;
; 211  : 			}
; 212  : 			break;
; 213  : 		case CItemData::ITEM_TYPE_ARMOR:
; 214  : 			switch (c_rkItemData.GetSubType())

  0001b	8b ce		 mov	 ecx, esi
  0001d	e8 00 00 00 00	 call	 ?GetSubType@CItemData@@QBEEXZ ; CItemData::GetSubType
  00022	0f b6 c0	 movzx	 eax, al
  00025	83 e8 00	 sub	 eax, 0
  00028	74 14		 je	 SHORT $LN16@GetDropSou
  0002a	83 e8 05	 sub	 eax, 5
  0002d	74 05		 je	 SHORT $LN14@GetDropSou
  0002f	83 e8 01	 sub	 eax, 1
  00032	75 34		 jne	 SHORT $LN10@GetDropSou
$LN14@GetDropSou:

; 215  : 			{
; 216  : 				case CItemData::ARMOR_NECK:
; 217  : 				case CItemData::ARMOR_EAR:
; 218  : 					return DROPSOUND_ACCESSORY;

  00034	b8 04 00 00 00	 mov	 eax, 4
  00039	5e		 pop	 esi

; 222  : 				default:
; 223  : 					return DROPSOUND_DEFAULT;		
; 224  : 					break;
; 225  : 			}
; 226  : 			break;	
; 227  : 		default:
; 228  : 			return DROPSOUND_DEFAULT;
; 229  : 			break;
; 230  : 	}
; 231  : 
; 232  : 	return DROPSOUND_DEFAULT;
; 233  : }

  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
$LN16@GetDropSou:

; 219  : 					break;
; 220  : 				case CItemData::ARMOR_BODY:
; 221  : 					return DROPSOUND_ARMOR;

  0003e	b8 01 00 00 00	 mov	 eax, 1
  00043	5e		 pop	 esi

; 222  : 				default:
; 223  : 					return DROPSOUND_DEFAULT;		
; 224  : 					break;
; 225  : 			}
; 226  : 			break;	
; 227  : 		default:
; 228  : 			return DROPSOUND_DEFAULT;
; 229  : 			break;
; 230  : 	}
; 231  : 
; 232  : 	return DROPSOUND_DEFAULT;
; 233  : }

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
$LN8@GetDropSou:

; 195  : 	{
; 196  : 		case CItemData::ITEM_TYPE_WEAPON:
; 197  : 			switch (c_rkItemData.GetWeaponType())

  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?GetWeaponType@CItemData@@QBEKXZ ; CItemData::GetWeaponType
  0004f	83 e8 02	 sub	 eax, 2
  00052	74 1b		 je	 SHORT $LN9@GetDropSou
  00054	83 e8 04	 sub	 eax, 4
  00057	74 0f		 je	 SHORT $LN10@GetDropSou
  00059	83 e8 01	 sub	 eax, 1
  0005c	74 0a		 je	 SHORT $LN10@GetDropSou

; 207  : 					break;
; 208  : 				default:
; 209  : 					return DROPSOUND_WEAPON;

  0005e	b8 02 00 00 00	 mov	 eax, 2
  00063	5e		 pop	 esi

; 222  : 				default:
; 223  : 					return DROPSOUND_DEFAULT;		
; 224  : 					break;
; 225  : 			}
; 226  : 			break;	
; 227  : 		default:
; 228  : 			return DROPSOUND_DEFAULT;
; 229  : 			break;
; 230  : 	}
; 231  : 
; 232  : 	return DROPSOUND_DEFAULT;
; 233  : }

  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
$LN10@GetDropSou:

; 201  : 					break;
; 202  : 				case CItemData::WEAPON_ARROW:
; 203  : #ifdef ENABLE_NEW_ARROW_SYSTEM
; 204  : 				case CItemData::WEAPON_UNLIMITED_ARROW:
; 205  : #endif
; 206  : 					return DROPSOUND_DEFAULT;

  00068	33 c0		 xor	 eax, eax
  0006a	5e		 pop	 esi

; 222  : 				default:
; 223  : 					return DROPSOUND_DEFAULT;		
; 224  : 					break;
; 225  : 			}
; 226  : 			break;	
; 227  : 		default:
; 228  : 			return DROPSOUND_DEFAULT;
; 229  : 			break;
; 230  : 	}
; 231  : 
; 232  : 	return DROPSOUND_DEFAULT;
; 233  : }

  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4
$LN9@GetDropSou:

; 198  : 			{
; 199  : 				case CItemData::WEAPON_BOW:
; 200  : 					return DROPSOUND_BOW;

  0006f	b8 03 00 00 00	 mov	 eax, 3
  00074	5e		 pop	 esi

; 222  : 				default:
; 223  : 					return DROPSOUND_DEFAULT;		
; 224  : 					break;
; 225  : 			}
; 226  : 			break;	
; 227  : 		default:
; 228  : 			return DROPSOUND_DEFAULT;
; 229  : 			break;
; 230  : 	}
; 231  : 
; 232  : 	return DROPSOUND_DEFAULT;
; 233  : }

  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
?__GetDropSoundType@CPythonItem@@IAEKABVCItemData@@@Z ENDP ; CPythonItem::__GetDropSoundType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?__GetUseSoundType@CPythonItem@@IAEKABVCItemData@@@Z
_TEXT	SEGMENT
_c_rkItemData$ = 8					; size = 4
?__GetUseSoundType@CPythonItem@@IAEKABVCItemData@@@Z PROC ; CPythonItem::__GetUseSoundType, COMDAT
; _this$dead$ = ecx

; 237  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 238  : 	switch (c_rkItemData.GetType())

  00004	8b 75 08	 mov	 esi, DWORD PTR _c_rkItemData$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?GetType@CItemData@@QBEEXZ ; CItemData::GetType
  0000e	0f b6 c0	 movzx	 eax, al
  00011	83 e8 01	 sub	 eax, 1
  00014	74 6f		 je	 SHORT $LN10@GetUseSoun
  00016	83 e8 01	 sub	 eax, 1
  00019	74 3d		 je	 SHORT $LN15@GetUseSoun
  0001b	83 e8 01	 sub	 eax, 1
  0001e	0f 85 81 00 00
	00		 jne	 $LN12@GetUseSoun

; 266  : 				default:
; 267  : 					return USESOUND_DEFAULT;		
; 268  : 					break;
; 269  : 			}
; 270  : 			break;
; 271  : 		case CItemData::ITEM_TYPE_USE:
; 272  : 			switch (c_rkItemData.GetSubType())

  00024	8b ce		 mov	 ecx, esi
  00026	e8 00 00 00 00	 call	 ?GetSubType@CItemData@@QBEEXZ ; CItemData::GetSubType
  0002b	0f b6 c0	 movzx	 eax, al
  0002e	83 e8 00	 sub	 eax, 0
  00031	74 1e		 je	 SHORT $LN22@GetUseSoun
  00033	83 e8 01	 sub	 eax, 1
  00036	74 0f		 je	 SHORT $LN23@GetUseSoun
  00038	83 e8 06	 sub	 eax, 6
  0003b	75 68		 jne	 SHORT $LN12@GetUseSoun

; 273  : 			{
; 274  : 				case CItemData::USE_ABILITY_UP:
; 275  : 					return USESOUND_POTION;

  0003d	b8 06 00 00 00	 mov	 eax, 6
  00042	5e		 pop	 esi

; 282  : 					break;
; 283  : 				default:
; 284  : 					return USESOUND_DEFAULT;		
; 285  : 					break;
; 286  : 			}
; 287  : 			break;			
; 288  : 		default:
; 289  : 			return USESOUND_DEFAULT;
; 290  : 			break;
; 291  : 	}
; 292  : 
; 293  : 	return USESOUND_DEFAULT;
; 294  : }

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN23@GetUseSoun:

; 279  : 					break;
; 280  : 				case CItemData::USE_TALISMAN:
; 281  : 					return USESOUND_PORTAL;

  00047	b8 07 00 00 00	 mov	 eax, 7
  0004c	5e		 pop	 esi

; 282  : 					break;
; 283  : 				default:
; 284  : 					return USESOUND_DEFAULT;		
; 285  : 					break;
; 286  : 			}
; 287  : 			break;			
; 288  : 		default:
; 289  : 			return USESOUND_DEFAULT;
; 290  : 			break;
; 291  : 	}
; 292  : 
; 293  : 	return USESOUND_DEFAULT;
; 294  : }

  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
$LN22@GetUseSoun:

; 276  : 					break;
; 277  : 				case CItemData::USE_POTION:
; 278  : 					return USESOUND_NONE;

  00051	33 c0		 xor	 eax, eax
  00053	5e		 pop	 esi

; 282  : 					break;
; 283  : 				default:
; 284  : 					return USESOUND_DEFAULT;		
; 285  : 					break;
; 286  : 			}
; 287  : 			break;			
; 288  : 		default:
; 289  : 			return USESOUND_DEFAULT;
; 290  : 			break;
; 291  : 	}
; 292  : 
; 293  : 	return USESOUND_DEFAULT;
; 294  : }

  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
$LN15@GetUseSoun:

; 254  : 					break;
; 255  : 			}
; 256  : 			break;
; 257  : 		case CItemData::ITEM_TYPE_ARMOR:
; 258  : 			switch (c_rkItemData.GetSubType())

  00058	8b ce		 mov	 ecx, esi
  0005a	e8 00 00 00 00	 call	 ?GetSubType@CItemData@@QBEEXZ ; CItemData::GetSubType
  0005f	0f b6 c0	 movzx	 eax, al
  00062	83 e8 00	 sub	 eax, 0
  00065	74 14		 je	 SHORT $LN18@GetUseSoun
  00067	83 e8 05	 sub	 eax, 5
  0006a	74 05		 je	 SHORT $LN16@GetUseSoun
  0006c	83 e8 01	 sub	 eax, 1
  0006f	75 34		 jne	 SHORT $LN12@GetUseSoun
$LN16@GetUseSoun:

; 259  : 			{
; 260  : 				case CItemData::ARMOR_NECK:
; 261  : 				case CItemData::ARMOR_EAR:
; 262  : 					return USESOUND_ACCESSORY;

  00071	b8 05 00 00 00	 mov	 eax, 5
  00076	5e		 pop	 esi

; 282  : 					break;
; 283  : 				default:
; 284  : 					return USESOUND_DEFAULT;		
; 285  : 					break;
; 286  : 			}
; 287  : 			break;			
; 288  : 		default:
; 289  : 			return USESOUND_DEFAULT;
; 290  : 			break;
; 291  : 	}
; 292  : 
; 293  : 	return USESOUND_DEFAULT;
; 294  : }

  00077	5d		 pop	 ebp
  00078	c2 04 00	 ret	 4
$LN18@GetUseSoun:

; 263  : 					break;
; 264  : 				case CItemData::ARMOR_BODY:
; 265  : 					return USESOUND_ARMOR;

  0007b	b8 02 00 00 00	 mov	 eax, 2
  00080	5e		 pop	 esi

; 282  : 					break;
; 283  : 				default:
; 284  : 					return USESOUND_DEFAULT;		
; 285  : 					break;
; 286  : 			}
; 287  : 			break;			
; 288  : 		default:
; 289  : 			return USESOUND_DEFAULT;
; 290  : 			break;
; 291  : 	}
; 292  : 
; 293  : 	return USESOUND_DEFAULT;
; 294  : }

  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
$LN10@GetUseSoun:

; 239  : 	{
; 240  : 		case CItemData::ITEM_TYPE_WEAPON:
; 241  : 			switch (c_rkItemData.GetWeaponType())

  00085	8b ce		 mov	 ecx, esi
  00087	e8 00 00 00 00	 call	 ?GetWeaponType@CItemData@@QBEKXZ ; CItemData::GetWeaponType
  0008c	83 e8 02	 sub	 eax, 2
  0008f	74 1e		 je	 SHORT $LN11@GetUseSoun
  00091	83 e8 04	 sub	 eax, 4
  00094	74 0f		 je	 SHORT $LN12@GetUseSoun
  00096	83 e8 01	 sub	 eax, 1
  00099	74 0a		 je	 SHORT $LN12@GetUseSoun

; 251  : 					break;
; 252  : 				default:
; 253  : 					return USESOUND_WEAPON;

  0009b	b8 03 00 00 00	 mov	 eax, 3
  000a0	5e		 pop	 esi

; 282  : 					break;
; 283  : 				default:
; 284  : 					return USESOUND_DEFAULT;		
; 285  : 					break;
; 286  : 			}
; 287  : 			break;			
; 288  : 		default:
; 289  : 			return USESOUND_DEFAULT;
; 290  : 			break;
; 291  : 	}
; 292  : 
; 293  : 	return USESOUND_DEFAULT;
; 294  : }

  000a1	5d		 pop	 ebp
  000a2	c2 04 00	 ret	 4
$LN12@GetUseSoun:

; 245  : 					break;
; 246  : 				case CItemData::WEAPON_ARROW:
; 247  : #ifdef ENABLE_NEW_ARROW_SYSTEM
; 248  : 				case CItemData::WEAPON_UNLIMITED_ARROW:
; 249  : #endif
; 250  : 					return USESOUND_DEFAULT;

  000a5	b8 01 00 00 00	 mov	 eax, 1
  000aa	5e		 pop	 esi

; 282  : 					break;
; 283  : 				default:
; 284  : 					return USESOUND_DEFAULT;		
; 285  : 					break;
; 286  : 			}
; 287  : 			break;			
; 288  : 		default:
; 289  : 			return USESOUND_DEFAULT;
; 290  : 			break;
; 291  : 	}
; 292  : 
; 293  : 	return USESOUND_DEFAULT;
; 294  : }

  000ab	5d		 pop	 ebp
  000ac	c2 04 00	 ret	 4
$LN11@GetUseSoun:

; 242  : 			{
; 243  : 				case CItemData::WEAPON_BOW:
; 244  : 					return USESOUND_BOW;

  000af	b8 04 00 00 00	 mov	 eax, 4
  000b4	5e		 pop	 esi

; 282  : 					break;
; 283  : 				default:
; 284  : 					return USESOUND_DEFAULT;		
; 285  : 					break;
; 286  : 			}
; 287  : 			break;			
; 288  : 		default:
; 289  : 			return USESOUND_DEFAULT;
; 290  : 			break;
; 291  : 	}
; 292  : 
; 293  : 	return USESOUND_DEFAULT;
; 294  : }

  000b5	5d		 pop	 ebp
  000b6	c2 04 00	 ret	 4
?__GetUseSoundType@CPythonItem@@IAEKABVCItemData@@@Z ENDP ; CPythonItem::__GetUseSoundType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?CreateItem@CPythonItem@@QAEXKKMMM_N@Z
_TEXT	SEGMENT
$T2 = -256						; size = 16
$T3 = -256						; size = 16
tv2088 = -240						; size = 16
_q$4 = -240						; size = 16
$T5 = -216						; size = 8
$T6 = -216						; size = 8
_this$GSCopy$1$ = -212					; size = 4
$T7 = -208						; size = 4
$T8 = -204						; size = 4
_y$GSCopy$1$ = -200					; size = 4
tv1863 = -200						; size = 4
_rot$9 = -200						; size = 4
_pItemData$ = -196					; size = 4
$T10 = -192						; size = 4
__Scary$1$ = -192					; size = 4
tv2435 = -192						; size = 4
tv1874 = -192						; size = 4
tv1864 = -192						; size = 4
_z$GSCopy$ = -192					; size = 4
$T11 = -192						; size = 4
_pkNewData$12 = -192					; size = 4
_rot$1$ = -188						; size = 4
_pItemModel$1$ = -188					; size = 4
$T13 = -188						; size = 1
tv2432 = -188						; size = 4
tv2280 = -188						; size = 4
tv2236 = -188						; size = 4
tv2192 = -188						; size = 4
tv1984 = -188						; size = 4
tv1957 = -188						; size = 4
tv1937 = -188						; size = 4
tv1917 = -188						; size = 4
tv1887 = -188						; size = 4
_mat$14 = -184						; size = 64
_normal$ = -116						; size = 12
_vMax$15 = -104						; size = 12
_v3Adjust$16 = -92					; size = 12
$T17 = -92						; size = 12
_vMin$18 = -80						; size = 12
$T19 = -80						; size = 12
$T20 = -68						; size = 12
$T21 = -68						; size = 12
$T22 = -68						; size = 12
$T23 = -68						; size = 12
__Loc$24 = -56						; size = 12
$T25 = -56						; size = 12
$T26 = -56						; size = 12
$T27 = -56						; size = 12
$T28 = -56						; size = 12
$T29 = -56						; size = 12
$T30 = -56						; size = 12
$T31 = -56						; size = 12
_f$32 = -44						; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_dwVirtualID$ = 8					; size = 4
_dwVirtualNumber$ = 12					; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
_bDrop$ = 24						; size = 1
?CreateItem@CPythonItem@@QAEXKKMMM_N@Z PROC		; CPythonItem::CreateItem, COMDAT
; _this$ = ecx
; _x$ = xmm3s

; 297  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$?CreateItem@CPythonItem@@QAEXKKMMM_N@Z
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	81 ec f8 00 00
	00		 sub	 esp, 248		; 000000f8H
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	56		 push	 esi
  00036	57		 push	 edi
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	f3 0f 11 9d 10
	ff ff ff	 movss	 DWORD PTR tv2088[ebp], xmm3
  00049	8b f1		 mov	 esi, ecx
  0004b	89 b5 2c ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  00051	8b 43 08	 mov	 eax, DWORD PTR _dwVirtualID$[ebx]
  00054	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR _y$[ebx]

; 298  : 	//CItemManager& rkItemMgr=CItemManager::Instance();
; 299  : 
; 300  : 	CItemData * pItemData;
; 301  : 	if (!CItemManager::Instance().GetItemDataPointer(dwVirtualNumber, &pItemData))

  00059	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCItemManager@@@@0PAVCItemManager@@A ; CSingleton<CItemManager>::ms_singleton
  0005f	89 85 30 ff ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  00065	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _pItemData$[ebp]
  0006b	50		 push	 eax
  0006c	ff 73 0c	 push	 DWORD PTR _dwVirtualNumber$[ebx]
  0006f	f3 0f 11 85 38
	ff ff ff	 movss	 DWORD PTR _y$GSCopy$1$[ebp], xmm0
  00077	f3 0f 10 43 14	 movss	 xmm0, DWORD PTR _z$[ebx]
  0007c	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR $T8[ebp], xmm0
  00084	e8 00 00 00 00	 call	 ?GetItemDataPointer@CItemManager@@QAEHKPAPAVCItemData@@@Z ; CItemManager::GetItemDataPointer
  00089	85 c0		 test	 eax, eax
  0008b	0f 84 bd 08 00
	00		 je	 $LN1@CreateItem

; 302  : 		return;
; 303  : 
; 304  : 	CGraphicThing* pItemModel = pItemData->GetDropModelThing();

  00091	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _pItemData$[ebp]
  00097	e8 00 00 00 00	 call	 ?GetDropModelThing@CItemData@@QAEPAVCGraphicThing@@XZ ; CItemData::GetDropModelThing
  0009c	89 85 44 ff ff
	ff		 mov	 DWORD PTR _pItemModel$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1927 :         return _My_data._Myfirst == _My_data._Mylast;

  000a2	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 64   : 			if (m_kVct_pkFree.empty())

  000a5	39 46 1c	 cmp	 DWORD PTR [esi+28], eax
  000a8	0f 85 8a 00 00
	00		 jne	 $LN28@CreateItem

; 66   : 				T* pkNewData=new T;

  000ae	68 e8 03 00 00	 push	 1000			; 000003e8H
  000b3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b8	8b f8		 mov	 edi, eax
  000ba	83 c4 04	 add	 esp, 4
  000bd	89 bd 40 ff ff
	ff		 mov	 DWORD PTR $T11[ebp], edi
  000c3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.h

; 71   : 			SGroundItemInstance() {}

  000ca	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  000cd	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7SGroundItemInstance@CPythonItem@@6B@
  000d3	e8 00 00 00 00	 call	 ??0CGraphicThingInstance@@QAE@XZ ; CGraphicThingInstance::CGraphicThingInstance
  000d8	0f 57 c0	 xorps	 xmm0, xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 66   : 				T* pkNewData=new T;

  000db	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2339 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000e2	0f 11 87 d0 03
	00 00		 movups	 XMMWORD PTR [edi+976], xmm0

; 4995 :         _My_data._Mysize = 0;

  000e9	c7 87 e0 03 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+992], 0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 67   : 				m_kVct_pkData.push_back(pkNewData);

  000f3	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4996 :         _My_data._Myres  = _BUF_SIZE - 1;

  000f6	c7 87 e4 03 00
	00 0f 00 00 00	 mov	 DWORD PTR [edi+996], 15	; 0000000fH

; 4997 :         _My_data._Activate_SSO_buffer();
; 4998 : 
; 4999 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5000 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00100	c6 87 d0 03 00
	00 00		 mov	 BYTE PTR [edi+976], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00107	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 66   : 				T* pkNewData=new T;

  0010a	89 bd 40 ff ff
	ff		 mov	 DWORD PTR _pkNewData$12[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00110	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  00113	74 0b		 je	 SHORT $LN38@CreateItem

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00115	89 38		 mov	 DWORD PTR [eax], edi

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00117	83 41 04 04	 add	 DWORD PTR [ecx+4], 4
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 68   : 				++m_uUsedCapacity;

  0011b	ff 46 2c	 inc	 DWORD PTR [esi+44]

; 69   : 				return pkNewData;

  0011e	eb 21		 jmp	 SHORT $LN27@CreateItem
$LN38@CreateItem:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00120	8d 95 40 ff ff
	ff		 lea	 edx, DWORD PTR _pkNewData$12[ebp]
  00126	52		 push	 edx
  00127	50		 push	 eax
  00128	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEPAPAUSGroundItemInstance@CPythonItem@@QAPAU23@ABQAU23@@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_reallocate<CPythonItem::SGroundItemInstance * const &>
  0012d	8b bd 40 ff ff
	ff		 mov	 edi, DWORD PTR _pkNewData$12[ebp]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 68   : 				++m_uUsedCapacity;

  00133	ff 46 2c	 inc	 DWORD PTR [esi+44]

; 69   : 				return pkNewData;

  00136	eb 09		 jmp	 SHORT $LN27@CreateItem
$LN28@CreateItem:

; 70   : 			}
; 71   : 
; 72   : 			T* pkFreeData=m_kVct_pkFree.back();

  00138	8b 78 fc	 mov	 edi, DWORD PTR [eax-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1776 :         --_Mylast;

  0013b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0013e	89 46 20	 mov	 DWORD PTR [esi+32], eax
$LN27@CreateItem:
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 307  : 	pGroundItemInstance->dwVirtualNumber = dwVirtualNumber;

  00141	8b 43 0c	 mov	 eax, DWORD PTR _dwVirtualNumber$[ebx]
  00144	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 308  : 
; 309  : 	bool bStabGround = false;
; 310  : 
; 311  : 	if (bDrop)

  00147	8a 43 18	 mov	 al, BYTE PTR _bDrop$[ebx]
  0014a	84 c0		 test	 al, al
  0014c	0f 84 d2 00 00
	00		 je	 $LN3@CreateItem

; 312  : 	{
; 313  : 		z = CPythonBackground::Instance().GetHeight(x, y) + 10.0f;

  00152	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _y$GSCopy$1$[ebp]
  0015a	83 ec 08	 sub	 esp, 8
  0015d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonBackground@@@@0PAVCPythonBackground@@A ; CSingleton<CPythonBackground>::ms_singleton
  00163	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00169	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR tv2088[ebp]
  00170	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00175	e8 00 00 00 00	 call	 ?GetHeight@CMapManager@@QAEMMM@Z ; CMapManager::GetHeight
  0017a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@41200000

; 314  : 
; 315  : 		if (pItemData->GetType()==CItemData::ITEM_TYPE_WEAPON && 

  00180	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _pItemData$[ebp]
  00186	d9 9d 40 ff ff
	ff		 fstp	 DWORD PTR _z$GSCopy$[ebp]
  0018c	e8 00 00 00 00	 call	 ?GetType@CItemData@@QBEEXZ ; CItemData::GetType
  00191	3c 01		 cmp	 al, 1
  00193	75 1a		 jne	 SHORT $LN6@CreateItem
  00195	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _pItemData$[ebp]
  0019b	e8 00 00 00 00	 call	 ?GetWeaponType@CItemData@@QBEKXZ ; CItemData::GetWeaponType
  001a0	85 c0		 test	 eax, eax
  001a2	74 0b		 je	 SHORT $LN6@CreateItem
  001a4	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _pItemData$[ebp]
  001aa	e8 00 00 00 00	 call	 ?GetWeaponType@CItemData@@QBEKXZ ; CItemData::GetWeaponType
$LN6@CreateItem:

; 316  : 			(pItemData->GetWeaponType() == CItemData::WEAPON_SWORD || 
; 317  : 			 pItemData->GetWeaponType() == CItemData::WEAPON_ARROW))
; 318  : 			bStabGround = true;
; 319  : 
; 320  : #ifdef ENABLE_NEW_ARROW_SYSTEM
; 321  : 		if (pItemData->GetType() == CItemData::ITEM_TYPE_WEAPON && pItemData->GetWeaponType() == CItemData::WEAPON_UNLIMITED_ARROW)

  001af	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _pItemData$[ebp]
  001b5	e8 00 00 00 00	 call	 ?GetType@CItemData@@QBEEXZ ; CItemData::GetType
  001ba	3c 01		 cmp	 al, 1
  001bc	75 0b		 jne	 SHORT $LN7@CreateItem
  001be	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _pItemData$[ebp]
  001c4	e8 00 00 00 00	 call	 ?GetWeaponType@CItemData@@QBEKXZ ; CItemData::GetWeaponType
$LN7@CreateItem:

; 322  : 			bStabGround = true;
; 323  : #endif
; 324  : 
; 325  : #ifdef ENABLE_COSTUME_WEAPON_SYSTEM
; 326  : 		if (pItemData->GetType() == CItemData::ITEM_TYPE_COSTUME && pItemData->GetSubType() == CItemData::COSTUME_WEAPON || pItemData->GetType() == CItemData::ITEM_TYPE_WEAPON && (pItemData->GetWeaponType() == CItemData::WEAPON_SWORD || pItemData->GetWeaponType() == CItemData::WEAPON_ARROW))

  001c9	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _pItemData$[ebp]
  001cf	e8 00 00 00 00	 call	 ?GetType@CItemData@@QBEEXZ ; CItemData::GetType
  001d4	3c 1c		 cmp	 al, 28			; 0000001cH
  001d6	75 0f		 jne	 SHORT $LN10@CreateItem
  001d8	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _pItemData$[ebp]
  001de	e8 00 00 00 00	 call	 ?GetSubType@CItemData@@QBEEXZ ; CItemData::GetSubType
  001e3	3c 03		 cmp	 al, 3
  001e5	74 29		 je	 SHORT $LN11@CreateItem
$LN10@CreateItem:
  001e7	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _pItemData$[ebp]
  001ed	e8 00 00 00 00	 call	 ?GetType@CItemData@@QBEEXZ ; CItemData::GetType
  001f2	3c 01		 cmp	 al, 1
  001f4	75 1a		 jne	 SHORT $LN11@CreateItem
  001f6	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _pItemData$[ebp]
  001fc	e8 00 00 00 00	 call	 ?GetWeaponType@CItemData@@QBEKXZ ; CItemData::GetWeaponType
  00201	85 c0		 test	 eax, eax
  00203	74 0b		 je	 SHORT $LN11@CreateItem
  00205	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _pItemData$[ebp]
  0020b	e8 00 00 00 00	 call	 ?GetWeaponType@CItemData@@QBEKXZ ; CItemData::GetWeaponType
$LN11@CreateItem:

; 327  : 			bStabGround = true;
; 328  : #endif
; 329  : 
; 330  : 		bStabGround = false;
; 331  : 		pGroundItemInstance->bAnimEnded = false;
; 332  : 	}

  00210	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR _z$GSCopy$[ebp]
  00218	32 c0		 xor	 al, al
  0021a	f3 0f 11 85 34
	ff ff ff	 movss	 DWORD PTR $T8[ebp], xmm0
  00222	eb 02		 jmp	 SHORT $LN221@CreateItem
$LN3@CreateItem:

; 333  : 	else
; 334  : 	{
; 335  : 		pGroundItemInstance->bAnimEnded = true;

  00224	b0 01		 mov	 al, 1
$LN221@CreateItem:

; 336  : 	}
; 337  : 
; 338  : 	{
; 339  : 		// attaching effect
; 340  : 		CEffectManager & rem =CEffectManager::Instance();

  00226	ba c8 03 00 00	 mov	 edx, 968		; 000003c8H
  0022b	8b cf		 mov	 ecx, edi
  0022d	88 04 11	 mov	 BYTE PTR [ecx+edx], al

; 341  : 		pGroundItemInstance->dwEffectInstanceIndex = 

  00230	8d 45 a4	 lea	 eax, DWORD PTR $T17[ebp]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00233	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR tv2088[ebp]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 341  : 		pGroundItemInstance->dwEffectInstanceIndex = 

  0023a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00240	f3 0f 11 45 b0	 movss	 DWORD PTR $T19[ebp], xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 341  : 		pGroundItemInstance->dwEffectInstanceIndex = 

  00245	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _y$GSCopy$1$[ebp]
  0024d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00254	50		 push	 eax
  00255	8d 45 b0	 lea	 eax, DWORD PTR $T19[ebp]
  00258	f3 0f 11 85 40
	ff ff ff	 movss	 DWORD PTR $T10[ebp], xmm0
  00260	50		 push	 eax
  00261	ff 76 30	 push	 DWORD PTR [esi+48]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00264	f3 0f 11 45 b4	 movss	 DWORD PTR $T19[ebp+4], xmm0

; 182  :     z = fz;

  00269	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR $T8[ebp]

; 180  :     x = fx;

  00271	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T17[ebp], 0

; 181  :     y = fy;

  00278	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T17[ebp+4], 0

; 182  :     z = fz;

  0027f	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T17[ebp+8], 0
  00286	f3 0f 11 45 b8	 movss	 DWORD PTR $T19[ebp+8], xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 341  : 		pGroundItemInstance->dwEffectInstanceIndex = 

  0028b	e8 00 00 00 00	 call	 ?CreateEffect@CEffectManager@@QAEHKABUD3DXVECTOR3@@0@Z ; CEffectManager::CreateEffect
  00290	89 87 cc 03 00
	00		 mov	 DWORD PTR [edi+972], eax

; 342  : 		rem.CreateEffect(m_dwDropItemEffectID, D3DXVECTOR3(x, -y, z), D3DXVECTOR3(0,0,0));		
; 343  : 
; 344  : 		pGroundItemInstance->eDropSoundType=__GetDropSoundType(*pItemData);

  00296	ff b5 3c ff ff
	ff		 push	 DWORD PTR _pItemData$[ebp]
  0029c	e8 00 00 00 00	 call	 ?__GetDropSoundType@CPythonItem@@IAEKABVCItemData@@@Z ; CPythonItem::__GetDropSoundType

; 345  : 	}
; 346  : 
; 347  : 
; 348  : 	D3DXVECTOR3 normal;
; 349  : 	if (!CPythonBackground::Instance().GetNormal(int(x),int(y),&normal))

  002a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonBackground@@@@0PAVCPythonBackground@@A ; CSingleton<CPythonBackground>::ms_singleton
  002a7	89 87 c4 03 00
	00		 mov	 DWORD PTR [edi+964], eax
  002ad	8d 45 8c	 lea	 eax, DWORD PTR _normal$[ebp]
  002b0	50		 push	 eax
  002b1	f3 0f 2c 85 38
	ff ff ff	 cvttss2si eax, DWORD PTR _y$GSCopy$1$[ebp]
  002b9	50		 push	 eax
  002ba	f3 0f 2c 85 10
	ff ff ff	 cvttss2si eax, DWORD PTR tv2088[ebp]
  002c2	50		 push	 eax
  002c3	e8 00 00 00 00	 call	 ?GetNormal@CMapManager@@QAE_NHHPAUD3DXVECTOR3@@@Z ; CMapManager::GetNormal
  002c8	84 c0		 test	 al, al
  002ca	75 1b		 jne	 SHORT $LN12@CreateItem
  002cc	0f 57 c9	 xorps	 xmm1, xmm1
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 182  :     z = fz;

  002cf	c7 45 d0 00 00
	80 3f		 mov	 DWORD PTR $T31[ebp+8], 1065353216 ; 3f800000H
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 350  : 		normal = D3DXVECTOR3(0.0f,0.0f,1.0f);

  002d6	8b 45 d0	 mov	 eax, DWORD PTR $T31[ebp+8]
  002d9	0f 57 c0	 xorps	 xmm0, xmm0
  002dc	0f 14 c1	 unpcklps xmm0, xmm1
  002df	66 0f d6 45 8c	 movq	 QWORD PTR _normal$[ebp], xmm0
  002e4	89 45 94	 mov	 DWORD PTR _normal$[ebp+8], eax
$LN12@CreateItem:

; 351  : 
; 352  : 	pGroundItemInstance->ThingInstance.Clear();

  002e7	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  002ea	e8 00 00 00 00	 call	 ?Clear@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Clear

; 353  : 	pGroundItemInstance->ThingInstance.ReserveModelThing(1);

  002ef	6a 01		 push	 1
  002f1	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  002f4	e8 00 00 00 00	 call	 ?ReserveModelThing@CGraphicThingInstance@@QAEXH@Z ; CGraphicThingInstance::ReserveModelThing

; 354  : 	pGroundItemInstance->ThingInstance.ReserveModelInstance(1);

  002f9	6a 01		 push	 1
  002fb	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  002fe	e8 00 00 00 00	 call	 ?ReserveModelInstance@CGraphicThingInstance@@QAEXH@Z ; CGraphicThingInstance::ReserveModelInstance

; 355  : 	pGroundItemInstance->ThingInstance.RegisterModelThing(0, pItemModel);

  00303	ff b5 44 ff ff
	ff		 push	 DWORD PTR _pItemModel$1$[ebp]
  00309	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  0030c	6a 00		 push	 0
  0030e	e8 00 00 00 00	 call	 ?RegisterModelThing@CGraphicThingInstance@@QAEXHPAVCGraphicThing@@@Z ; CGraphicThingInstance::RegisterModelThing

; 356  : 	pGroundItemInstance->ThingInstance.SetModelInstance(0, 0, 0);

  00313	6a ff		 push	 -1
  00315	6a 00		 push	 0
  00317	6a 00		 push	 0
  00319	6a 00		 push	 0
  0031b	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  0031e	e8 00 00 00 00	 call	 ?SetModelInstance@CGraphicThingInstance@@QAE_NHHHH@Z ; CGraphicThingInstance::SetModelInstance

; 357  : 	if (bDrop)

  00323	80 7b 18 00	 cmp	 BYTE PTR _bDrop$[ebx], 0
  00327	f3 0f 10 8d 40
	ff ff ff	 movss	 xmm1, DWORD PTR $T10[ebp]
  0032f	74 2d		 je	 SHORT $LN13@CreateItem
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00331	f3 0f 10 85 34
	ff ff ff	 movss	 xmm0, DWORD PTR $T8[ebp]
  00339	0f 57 d2	 xorps	 xmm2, xmm2
  0033c	f3 0f 11 45 d0	 movss	 DWORD PTR $T30[ebp+8], xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 359  : 		pGroundItemInstance->v3EndPosition = D3DXVECTOR3(x,-y,z);

  00341	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR tv2088[ebp]
  00348	8b 45 d0	 mov	 eax, DWORD PTR $T30[ebp+8]
  0034b	0f 14 c1	 unpcklps xmm0, xmm1
  0034e	0f 57 c9	 xorps	 xmm1, xmm1
  00351	66 0f d6 47 08	 movq	 QWORD PTR [edi+8], xmm0
  00356	0f 57 c0	 xorps	 xmm0, xmm0
  00359	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 360  : 		pGroundItemInstance->ThingInstance.SetPosition(0,0,0);
; 361  : 	}

  0035c	eb 0f		 jmp	 SHORT $LN14@CreateItem
$LN13@CreateItem:
  0035e	0f 28 85 10 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR tv2088[ebp]
  00365	f3 0f 10 95 34
	ff ff ff	 movss	 xmm2, DWORD PTR $T8[ebp]
$LN14@CreateItem:

; 362  : 	else
; 363  : 		pGroundItemInstance->ThingInstance.SetPosition(x, -y, z);
; 364  : 
; 365  : 	pGroundItemInstance->ThingInstance.Update();

  0036d	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00370	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  00373	f3 0f 11 54 24
	08		 movss	 DWORD PTR [esp+8], xmm2
  00379	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  0037f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00384	e8 00 00 00 00	 call	 ?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z ; CGraphicObjectInstance::SetPosition
  00389	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  0038c	e8 00 00 00 00	 call	 ?Update@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Update

; 366  : 	pGroundItemInstance->ThingInstance.Transform();

  00391	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  00394	e8 00 00 00 00	 call	 ?Transform@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Transform

; 367  : 	pGroundItemInstance->ThingInstance.Deform();

  00399	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  0039c	e8 00 00 00 00	 call	 ?Deform@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Deform

; 368  : 
; 369  : 	if (bDrop)

  003a1	80 7b 18 00	 cmp	 BYTE PTR _bDrop$[ebx], 0
  003a5	0f 84 bf 04 00
	00		 je	 $LN15@CreateItem

; 370  : 	{
; 371  : 		D3DXVECTOR3 vMin, vMax;
; 372  : 		pGroundItemInstance->ThingInstance.GetBoundBox(&vMin,&vMax);

  003ab	8d 45 98	 lea	 eax, DWORD PTR _vMax$15[ebp]
  003ae	50		 push	 eax
  003af	8d 45 b0	 lea	 eax, DWORD PTR _vMin$18[ebp]
  003b2	50		 push	 eax
  003b3	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  003b6	e8 00 00 00 00	 call	 ?GetBoundBox@CGraphicThingInstance@@QAEXPAUD3DXVECTOR3@@0@Z ; CGraphicThingInstance::GetBoundBox
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  003bb	f3 0f 10 5d b0	 movss	 xmm3, DWORD PTR _vMin$18[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7669 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  003c0	8d 55 ec	 lea	 edx, DWORD PTR _f$32[ebp+24]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  003c3	f3 0f 10 7d 98	 movss	 xmm7, DWORD PTR _vMax$15[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7669 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  003c8	8d 4d d4	 lea	 ecx, DWORD PTR _f$32[ebp]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  003cb	f3 0f 10 6d 9c	 movss	 xmm5, DWORD PTR _vMax$15[ebp+4]
  003d0	f3 0f 58 df	 addss	 xmm3, xmm7
  003d4	f3 0f 10 55 b4	 movss	 xmm2, DWORD PTR _vMin$18[ebp+4]
  003d9	f3 0f 10 65 a0	 movss	 xmm4, DWORD PTR _vMax$15[ebp+8]
  003de	f3 0f 58 d5	 addss	 xmm2, xmm5
  003e2	f3 0f 10 4d b8	 movss	 xmm1, DWORD PTR _vMin$18[ebp+8]

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  003e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  003ef	f3 0f 58 cc	 addss	 xmm1, xmm4
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 377  : 				std::make_pair(vMax.x - vMin.x,0),

  003f3	f3 0f 5c 7d b0	 subss	 xmm7, DWORD PTR _vMin$18[ebp]

; 378  : 				std::make_pair(vMax.y - vMin.y,1),

  003f8	f3 0f 5c 6d b4	 subss	 xmm5, DWORD PTR _vMin$18[ebp+4]

; 379  : 				std::make_pair(vMax.z - vMin.z,2)

  003fd	f3 0f 5c 65 b8	 subss	 xmm4, DWORD PTR _vMin$18[ebp+8]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00402	f3 0f 59 d8	 mulss	 xmm3, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7669 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  00406	c6 85 44 ff ff
	ff 00		 mov	 BYTE PTR $T13[ebp], 0
  0040d	ff b5 44 ff ff
	ff		 push	 DWORD PTR $T13[ebp]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00413	f3 0f 59 d0	 mulss	 xmm2, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7669 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  00417	6a 03		 push	 3
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 269  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00419	f3 0f 59 c8	 mulss	 xmm1, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0041d	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _f$32[ebp+4], 0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 373  : 		pGroundItemInstance->v3Center = (vMin + vMax) * 0.5f;

  00424	0f 14 da	 unpcklps xmm3, xmm2
  00427	66 0f d6 5f 30	 movq	 QWORD PTR [edi+48], xmm3
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 182  :     z = fz;

  0042c	f3 0f 11 4d d0	 movss	 DWORD PTR $T29[ebp+8], xmm1
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 373  : 		pGroundItemInstance->v3Center = (vMin + vMax) * 0.5f;

  00431	8b 45 d0	 mov	 eax, DWORD PTR $T29[ebp+8]
  00434	89 47 38	 mov	 DWORD PTR [edi+56], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00437	f3 0f 11 7d d4	 movss	 DWORD PTR _f$32[ebp], xmm7
  0043c	f3 0f 11 6d dc	 movss	 DWORD PTR _f$32[ebp+8], xmm5
  00441	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR _f$32[ebp+12], 1
  00448	f3 0f 11 65 e4	 movss	 DWORD PTR _f$32[ebp+16], xmm4
  0044d	c7 45 e8 02 00
	00 00		 mov	 DWORD PTR _f$32[ebp+20], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7669 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  00454	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,int> *,std::less<void> >
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 414  : 			if (f[0].second == 0)

  00459	8b 45 d8	 mov	 eax, DWORD PTR _f$32[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7669 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  0045c	83 c4 08	 add	 esp, 8
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 414  : 			if (f[0].second == 0)

  0045f	85 c0		 test	 eax, eax
  00461	0f 85 d2 00 00
	00		 jne	 $LN22@CreateItem

; 417  : 				pGroundItemInstance->qEnd = 

  00467	83 ec 08	 sub	 esp, 8
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 180  :     x = fx;

  0046a	89 45 bc	 mov	 DWORD PTR $T23[ebp], eax

; 181  :     y = fy;

  0046d	89 45 c0	 mov	 DWORD PTR $T23[ebp+4], eax

; 182  :     z = fz;

  00470	c7 45 c4 00 00
	80 3f		 mov	 DWORD PTR $T23[ebp+8], 1065353216 ; 3f800000H
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 417  : 				pGroundItemInstance->qEnd = 

  00477	c7 44 24 04 cd
	cc cc 3d	 mov	 DWORD PTR [esp+4], 1036831949 ; 3dcccccdH
  0047f	c7 04 24 cd cc
	cc bd		 mov	 DWORD PTR [esp], -1110651699 ; bdcccccdH
  00486	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  0048b	d9 ee		 fldz
  0048d	de c1		 faddp	 ST(1), ST(0)
  0048f	c7 44 24 04 cd
	cc cc 3d	 mov	 DWORD PTR [esp+4], 1036831949 ; 3dcccccdH
  00497	c7 04 24 cd cc
	cc bd		 mov	 DWORD PTR [esp], -1110651699 ; bdcccccdH
  0049e	d9 9d 38 ff ff
	ff		 fstp	 DWORD PTR tv1863[ebp]
  004a4	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  004a9	d9 ee		 fldz
  004ab	de c1		 faddp	 ST(1), ST(0)
  004ad	d9 9d 40 ff ff
	ff		 fstp	 DWORD PTR tv1864[ebp]
  004b3	e8 00 00 00 00	 call	 ?random@@YAKXZ		; random
  004b8	83 e0 01	 and	 eax, 1
  004bb	66 0f 6e c0	 movd	 xmm0, eax
  004bf	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  004c3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  004c6	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  004cf	c7 44 24 04 cd
	cc cc 3d	 mov	 DWORD PTR [esp+4], 1036831949 ; 3dcccccdH
  004d7	c7 04 24 cd cc
	cc bd		 mov	 DWORD PTR [esp], -1110651699 ; bdcccccdH
  004de	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  004e2	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR tv1917[ebp], xmm0
  004ea	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  004ef	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1917[ebp]
  004f7	8d 45 bc	 lea	 eax, DWORD PTR $T23[ebp]
  004fa	f3 0f 58 c0	 addss	 xmm0, xmm0
  004fe	8d 55 c8	 lea	 edx, DWORD PTR $T28[ebp]
  00501	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  00509	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR tv2280[ebp], xmm0
  00511	d8 85 44 ff ff
	ff		 fadd	 DWORD PTR tv2280[ebp]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 181  :     y = fy;

  00517	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR tv1864[ebp]
  0051f	f3 0f 11 45 cc	 movss	 DWORD PTR $T28[ebp+4], xmm0

; 182  :     z = fz;

  00524	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR tv1863[ebp]
  0052c	d9 5d c8	 fstp	 DWORD PTR $T28[ebp]
  0052f	f3 0f 11 45 d0	 movss	 DWORD PTR $T28[ebp+8], xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 424  : 			}

  00534	e9 91 01 00 00	 jmp	 $LN222@CreateItem
$LN22@CreateItem:

; 425  : 			else if (f[0].second == 1)

  00539	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T27[ebp], 0
  00540	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T27[ebp+4], 0
  00547	c7 45 d0 00 00
	80 3f		 mov	 DWORD PTR $T27[ebp+8], 1065353216 ; 3f800000H
  0054e	83 f8 01	 cmp	 eax, 1
  00551	0f 85 b3 00 00
	00		 jne	 $LN24@CreateItem

; 426  : 			{
; 427  : 				pGroundItemInstance->qEnd = 

  00557	83 ec 08	 sub	 esp, 8
  0055a	c7 44 24 04 cd
	cc cc 3d	 mov	 DWORD PTR [esp+4], 1036831949 ; 3dcccccdH
  00562	c7 04 24 cd cc
	cc bd		 mov	 DWORD PTR [esp], -1110651699 ; bdcccccdH
  00569	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  0056e	d9 ee		 fldz
  00570	de c1		 faddp	 ST(1), ST(0)
  00572	d9 9d 40 ff ff
	ff		 fstp	 DWORD PTR tv1874[ebp]
  00578	e8 00 00 00 00	 call	 ?random@@YAKXZ		; random
  0057d	83 e0 01	 and	 eax, 1
  00580	66 0f 6e c0	 movd	 xmm0, eax
  00584	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00588	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0058b	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00594	c7 44 24 04 cd
	cc cc 3d	 mov	 DWORD PTR [esp+4], 1036831949 ; 3dcccccdH
  0059c	c7 04 24 cd cc
	cc bd		 mov	 DWORD PTR [esp], -1110651699 ; bdcccccdH
  005a3	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  005a7	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR tv1937[ebp], xmm0
  005af	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  005b4	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1937[ebp]
  005bc	f3 0f 58 c0	 addss	 xmm0, xmm0
  005c0	c7 44 24 04 cd
	cc cc 3d	 mov	 DWORD PTR [esp+4], 1036831949 ; 3dcccccdH
  005c8	c7 04 24 cd cc
	cc bd		 mov	 DWORD PTR [esp], -1110651699 ; bdcccccdH
  005cf	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  005d7	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR tv2236[ebp], xmm0
  005df	d8 85 44 ff ff
	ff		 fadd	 DWORD PTR tv2236[ebp]
  005e5	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv2432[ebp]
  005eb	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 181  :     y = fy;

  005f0	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv2432[ebp]
  005f8	f3 0f 11 45 c0	 movss	 DWORD PTR $T22[ebp+4], xmm0

; 182  :     z = fz;

  005fd	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR tv1874[ebp]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 434  : 			}

  00605	e9 ae 00 00 00	 jmp	 $LN223@CreateItem
$LN24@CreateItem:

; 435  : 			else 
; 436  : 			{
; 437  : 				pGroundItemInstance->qEnd = 

  0060a	e8 00 00 00 00	 call	 ?random@@YAKXZ		; random
  0060f	83 e0 01	 and	 eax, 1
  00612	83 ec 08	 sub	 esp, 8
  00615	66 0f 6e c0	 movd	 xmm0, eax
  00619	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0061d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00620	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00629	c7 44 24 04 cd
	cc cc 3d	 mov	 DWORD PTR [esp+4], 1036831949 ; 3dcccccdH
  00631	c7 04 24 cd cc
	cc bd		 mov	 DWORD PTR [esp], -1110651699 ; bdcccccdH
  00638	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  0063c	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR tv1957[ebp], xmm0
  00644	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00649	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1957[ebp]
  00651	f3 0f 58 c0	 addss	 xmm0, xmm0
  00655	c7 44 24 04 cd
	cc cc 3d	 mov	 DWORD PTR [esp+4], 1036831949 ; 3dcccccdH
  0065d	c7 04 24 cd cc
	cc bd		 mov	 DWORD PTR [esp], -1110651699 ; bdcccccdH
  00664	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f800000
  0066c	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR tv2192[ebp], xmm0
  00674	d8 85 44 ff ff
	ff		 fadd	 DWORD PTR tv2192[ebp]
  0067a	d9 9d 40 ff ff
	ff		 fstp	 DWORD PTR tv2435[ebp]
  00680	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00685	d9 ee		 fldz
  00687	de c1		 faddp	 ST(1), ST(0)
  00689	c7 44 24 04 cd
	cc cc 3d	 mov	 DWORD PTR [esp+4], 1036831949 ; 3dcccccdH
  00691	c7 04 24 cd cc
	cc bd		 mov	 DWORD PTR [esp], -1110651699 ; bdcccccdH
  00698	d9 9d 44 ff ff
	ff		 fstp	 DWORD PTR tv1887[ebp]
  0069e	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 181  :     y = fy;

  006a3	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1887[ebp]
  006ab	f3 0f 11 45 c0	 movss	 DWORD PTR $T21[ebp+4], xmm0

; 182  :     z = fz;

  006b0	f3 0f 10 85 40
	ff ff ff	 movss	 xmm0, DWORD PTR tv2435[ebp]
$LN223@CreateItem:
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 447  : 		float rot = frandom(0, 2*3.1415926535f);

  006b8	d9 ee		 fldz
  006ba	8d 55 bc	 lea	 edx, DWORD PTR $T21[ebp]
  006bd	de c1		 faddp	 ST(1), ST(0)
  006bf	f3 0f 11 45 c4	 movss	 DWORD PTR $T21[ebp+8], xmm0
  006c4	8d 45 c8	 lea	 eax, DWORD PTR $T26[ebp]
  006c7	d9 5d bc	 fstp	 DWORD PTR $T21[ebp]
$LN222@CreateItem:
  006ca	50		 push	 eax
  006cb	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  006d1	e8 00 00 00 00	 call	 ?RotationArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ; RotationArc
  006d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  006d9	83 ec 08	 sub	 esp, 8
  006dc	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  006df	c7 44 24 04 db
	0f c9 40	 mov	 DWORD PTR [esp+4], 1086918619 ; 40c90fdbH
  006e7	0f 11 47 20	 movups	 XMMWORD PTR [edi+32], xmm0
  006eb	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  006f2	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  006f7	d9 9d 38 ff ff
	ff		 fstp	 DWORD PTR _rot$9[ebp]
  006fd	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _rot$9[ebp]
  00705	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 754  :             return (float)sin(_X);

  00708	0f 5a c0	 cvtps2pd xmm0, xmm0
  0070b	e8 00 00 00 00	 call	 __libm_sse2_sin_precise

; 653  :             return (float)cos(_X);

  00710	f3 0f 10 8d 38
	ff ff ff	 movss	 xmm1, DWORD PTR _rot$9[ebp]

; 754  :             return (float)sin(_X);

  00718	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0071c	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR tv1984[ebp], xmm0

; 653  :             return (float)cos(_X);

  00724	0f 5a c1	 cvtps2pd xmm0, xmm1
  00727	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  0072c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 449  : 		D3DXQuaternionMultiply(&pGroundItemInstance->qEnd, &pGroundItemInstance->qEnd, &q);

  00730	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _q$4[ebp]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 667  :     x = fx;

  00736	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _q$4[ebp], 0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 449  : 		D3DXQuaternionMultiply(&pGroundItemInstance->qEnd, &pGroundItemInstance->qEnd, &q);

  00740	50		 push	 eax
  00741	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 668  :     y = fy;

  00744	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _q$4[ebp+4], 0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 449  : 		D3DXQuaternionMultiply(&pGroundItemInstance->qEnd, &pGroundItemInstance->qEnd, &q);

  0074e	50		 push	 eax
  0074f	50		 push	 eax
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 669  :     z = fz;

  00750	f3 0f 11 85 18
	ff ff ff	 movss	 DWORD PTR _q$4[ebp+8], xmm0

; 670  :     w = fw;

  00758	f3 0f 10 85 44
	ff ff ff	 movss	 xmm0, DWORD PTR tv1984[ebp]
  00760	f3 0f 11 85 1c
	ff ff ff	 movss	 DWORD PTR _q$4[ebp+12], xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 449  : 		D3DXQuaternionMultiply(&pGroundItemInstance->qEnd, &pGroundItemInstance->qEnd, &q);

  00768	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 450  : 		q = RotationArc(D3DXVECTOR3(0,0,1),normal);

  0076d	8d 45 8c	 lea	 eax, DWORD PTR _normal$[ebp]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 180  :     x = fx;

  00770	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T25[ebp], 0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 450  : 		q = RotationArc(D3DXVECTOR3(0,0,1),normal);

  00777	50		 push	 eax
  00778	8d 55 c8	 lea	 edx, DWORD PTR $T25[ebp]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 181  :     y = fy;

  0077b	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T25[ebp+4], 0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 450  : 		q = RotationArc(D3DXVECTOR3(0,0,1),normal);

  00782	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 182  :     z = fz;

  00788	c7 45 d0 00 00
	80 3f		 mov	 DWORD PTR $T25[ebp+8], 1065353216 ; 3f800000H
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 450  : 		q = RotationArc(D3DXVECTOR3(0,0,1),normal);

  0078f	e8 00 00 00 00	 call	 ?RotationArc@@YA?AUD3DXQUATERNION@@ABUD3DXVECTOR3@@0@Z ; RotationArc
  00794	83 c4 04	 add	 esp, 4
  00797	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 451  : 		D3DXQuaternionMultiply(&pGroundItemInstance->qEnd, &pGroundItemInstance->qEnd, &q);

  0079a	8d 85 10 ff ff
	ff		 lea	 eax, DWORD PTR _q$4[ebp]
  007a0	50		 push	 eax
  007a1	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
  007a4	50		 push	 eax
  007a5	50		 push	 eax
  007a6	0f 11 85 10 ff
	ff ff		 movups	 XMMWORD PTR _q$4[ebp], xmm0
  007ad	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 452  : 
; 453  : 		pGroundItemInstance->dwStartTime = CTimer::Instance().GetCurrentMillisecond();

  007b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  007b8	e8 00 00 00 00	 call	 ?GetCurrentMillisecond@CTimer@@QAEKXZ ; CTimer::GetCurrentMillisecond

; 455  : 		pGroundItemInstance->v3RotationAxis.x = sinf(rot+0);//frandom(0.4f,0.7f) * (2*(int)(random()%2) - 1);

  007bd	f3 0f 10 85 38
	ff ff ff	 movss	 xmm0, DWORD PTR _rot$9[ebp]
  007c5	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@00000000
  007cd	89 87 bc 03 00
	00		 mov	 DWORD PTR [edi+956], eax
  007d3	05 2c 01 00 00	 add	 eax, 300		; 0000012cH
  007d8	89 87 c0 03 00
	00		 mov	 DWORD PTR [edi+960], eax
  007de	f3 0f 11 85 44
	ff ff ff	 movss	 DWORD PTR _rot$1$[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 754  :             return (float)sin(_X);

  007e6	0f 5a c0	 cvtps2pd xmm0, xmm0
  007e9	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  007ee	0f 57 c9	 xorps	 xmm1, xmm1
  007f1	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 455  : 		pGroundItemInstance->v3RotationAxis.x = sinf(rot+0);//frandom(0.4f,0.7f) * (2*(int)(random()%2) - 1);

  007f5	f3 0f 11 4f 14	 movss	 DWORD PTR [edi+20], xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  007fa	f3 0f 10 8d 44
	ff ff ff	 movss	 xmm1, DWORD PTR _rot$1$[ebp]
  00802	0f 5a c1	 cvtps2pd xmm0, xmm1
  00805	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  0080a	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __xmm@80000000800000008000000080000000
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 475  : 		D3DXMatrixRotationQuaternion(&mat, &pGroundItemInstance->qEnd);

  00812	8d 47 20	 lea	 eax, DWORD PTR [edi+32]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  00815	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 457  : 		pGroundItemInstance->v3RotationAxis.z = 0;//frandom(0.4f,0.7f) * (2*(int)(random()%2) - 1);

  00819	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0

; 475  : 		D3DXMatrixRotationQuaternion(&mat, &pGroundItemInstance->qEnd);

  00820	50		 push	 eax
  00821	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _mat$14[ebp]
  00827	f3 0f 11 47 18	 movss	 DWORD PTR [edi+24], xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  0082c	f3 0f 10 57 30	 movss	 xmm2, DWORD PTR [edi+48]
  00831	f3 0f 10 4f 34	 movss	 xmm1, DWORD PTR [edi+52]
  00836	0f 57 d3	 xorps	 xmm2, xmm3
  00839	f3 0f 10 47 38	 movss	 xmm0, DWORD PTR [edi+56]
  0083e	0f 57 cb	 xorps	 xmm1, xmm3
  00841	0f 57 c3	 xorps	 xmm0, xmm3

; 180  :     x = fx;

  00844	f3 0f 11 55 a4	 movss	 DWORD PTR _v3Adjust$16[ebp], xmm2

; 181  :     y = fy;

  00849	f3 0f 11 4d a8	 movss	 DWORD PTR _v3Adjust$16[ebp+4], xmm1

; 182  :     z = fz;

  0084e	f3 0f 11 45 ac	 movss	 DWORD PTR _v3Adjust$16[ebp+8], xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 475  : 		D3DXMatrixRotationQuaternion(&mat, &pGroundItemInstance->qEnd);

  00853	50		 push	 eax
  00854	e8 00 00 00 00	 call	 _D3DXMatrixRotationQuaternion@8

; 476  : 		/*D3DXMatrixRotationYawPitchRoll(&mat, 
; 477  : 			D3DXToRadian(pGroundItemInstance->rEnd.y), 
; 478  : 			D3DXToRadian(pGroundItemInstance->rEnd.x), 
; 479  : 			D3DXToRadian(pGroundItemInstance->rEnd.z));*/
; 480  : 
; 481  : 		D3DXVec3TransformCoord(&v3Adjust,&v3Adjust,&mat);

  00859	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR _mat$14[ebp]
  0085f	50		 push	 eax
  00860	8d 45 a4	 lea	 eax, DWORD PTR _v3Adjust$16[ebp]
  00863	50		 push	 eax
  00864	50		 push	 eax
  00865	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
$LN15@CreateItem:

; 482  : 		//Tracef("%f %f %f\n",v3Adjust.x,v3Adjust.y,v3Adjust.z);
; 483  : 		//pGroundItemInstance->v3EndPosition += v3Adjust;
; 484  : 		//pGroundItemInstance->rEnd.z += pGroundItemInstance->v3Center.z;
; 485  : 	}
; 486  : 
; 487  : 	pGroundItemInstance->ThingInstance.Show();

  0086a	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  0086d	e8 00 00 00 00	 call	 ?Show@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Show
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00872	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR $T7[ebp]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 489  : 	m_GroundItemInstanceMap.insert(TGroundItemInstanceMap::value_type(dwVirtualID, pGroundItemInstance));

  00878	8b b5 2c ff ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0087e	89 85 28 ff ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 489  : 	m_GroundItemInstanceMap.insert(TGroundItemInstanceMap::value_type(dwVirtualID, pGroundItemInstance));

  00884	83 c6 04	 add	 esi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  00887	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 489  : 	m_GroundItemInstanceMap.insert(TGroundItemInstanceMap::value_type(dwVirtualID, pGroundItemInstance));

  0088d	89 b5 40 ff ff
	ff		 mov	 DWORD PTR __Scary$1$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  00893	50		 push	 eax
  00894	8d 45 bc	 lea	 eax, DWORD PTR $T20[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00897	89 bd 2c ff ff
	ff		 mov	 DWORD PTR $T6[ebp+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  0089d	50		 push	 eax
  0089e	8b ce		 mov	 ecx, esi
  008a0	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>
  008a5	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  008a8	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  008ac	66 0f d6 45 c8	 movq	 QWORD PTR __Loc$24[ebp], xmm0

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  008b1	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  008b5	75 0b		 jne	 SHORT $LN218@CreateItem
  008b7	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR $T7[ebp]
  008bd	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  008c0	73 69		 jae	 SHORT $LN144@CreateItem
$LN218@CreateItem:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  008c2	81 7e 04 aa aa
	aa 0a		 cmp	 DWORD PTR [esi+4], 178956970 ; 0aaaaaaaH
  008c9	0f 84 9f 00 00
	00		 je	 $LN225@CreateItem
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  008cf	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR __Scary$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1007 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  008d5	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  008d7	89 85 28 ff ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  008dd	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  008e4	6a 18		 push	 24			; 00000018H

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  008e6	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  008f0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 787  :     }

  008f5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  008fc	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  008ff	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR $T7[ebp]
  00905	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00908	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR __Scary$1$[ebp]
  0090e	50		 push	 eax
  0090f	ff 75 cc	 push	 DWORD PTR __Loc$24[ebp+4]

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00912	89 78 14	 mov	 DWORD PTR [eax+20], edi

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00915	ff 75 c8	 push	 DWORD PTR __Loc$24[ebp]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00918	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0091a	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0091d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  00920	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00926	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Insert_node
$LN144@CreateItem:
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 492  : 	rkTextTail.RegisterItemTextTail(

  0092b	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR _pItemData$[ebp]
  00931	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonTextTail@@@@0PAVCPythonTextTail@@A ; CSingleton<CPythonTextTail>::ms_singleton
  00937	e8 00 00 00 00	 call	 ?GetName@CItemData@@QBEPBDXZ ; CItemData::GetName
  0093c	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  0093f	51		 push	 ecx
  00940	50		 push	 eax
  00941	ff b5 30 ff ff
	ff		 push	 DWORD PTR $T7[ebp]
  00947	8b ce		 mov	 ecx, esi
  00949	e8 00 00 00 00	 call	 ?RegisterItemTextTail@CPythonTextTail@@QAEXKPBDPAVCGraphicObjectInstance@@@Z ; CPythonTextTail::RegisterItemTextTail
$LN1@CreateItem:

; 496  : }

  0094e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00951	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00958	59		 pop	 ecx
  00959	5f		 pop	 edi
  0095a	5e		 pop	 esi
  0095b	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0095e	33 cd		 xor	 ecx, ebp
  00960	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00965	8b e5		 mov	 esp, ebp
  00967	5d		 pop	 ebp
  00968	8b e3		 mov	 esp, ebx
  0096a	5b		 pop	 ebx
  0096b	c2 14 00	 ret	 20			; 00000014H
$LN225@CreateItem:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1630 :             _Throw_tree_length_error();

  0096e	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN220@CreateItem:
  00973	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateItem@CPythonItem@@QAEXKKMMM_N@Z$0:
  00000	68 e8 03 00 00	 push	 1000			; 000003e8H
  00005	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR $T11[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00011	83 c4 08	 add	 esp, 8
  00014	c3		 ret	 0
__unwindfunclet$?CreateItem@CPythonItem@@QAEXKKMMM_N@Z$8:
  00015	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$?CreateItem@CPythonItem@@QAEXKKMMM_N@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 8a f8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-264]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateItem@CPythonItem@@QAEXKKMMM_N@Z
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateItem@CPythonItem@@QAEXKKMMM_N@Z ENDP		; CPythonItem::CreateItem
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?SetOwnership@CPythonItem@@QAEXKPBD@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwVID$ = 8						; size = 4
_c_pszName$ = 12					; size = 4
?SetOwnership@CPythonItem@@QAEXKPBD@Z PROC		; CPythonItem::SetOwnership, COMDAT
; _this$ = ecx

; 499  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00009	8d 45 08	 lea	 eax, DWORD PTR _dwVID$[ebp]
  0000c	50		 push	 eax
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 500  : 	TGroundItemInstanceMap::iterator itor = m_GroundItemInstanceMap.find(dwVID);

  0000d	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00010	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00013	8b ce		 mov	 ecx, esi
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0001b	8b 55 fc	 mov	 edx, DWORD PTR __Loc$1[ebp+8]
  0001e	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00022	75 3a		 jne	 SHORT $LN1@SetOwnersh
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00024	8b 7d 08	 mov	 edi, DWORD PTR _dwVID$[ebp]
  00027	3b 7a 10	 cmp	 edi, DWORD PTR [edx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0002a	72 32		 jb	 SHORT $LN1@SetOwnersh

; 233  :         return this->_Ptr == _Right._Ptr;

  0002c	39 16		 cmp	 DWORD PTR [esi], edx
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 502  : 	if (m_GroundItemInstanceMap.end() == itor)

  0002e	74 2e		 je	 SHORT $LN1@SetOwnersh
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00030	8b 75 0c	 mov	 esi, DWORD PTR _c_pszName$[ebp]
  00033	8b ce		 mov	 ecx, esi
  00035	8d 59 01	 lea	 ebx, DWORD PTR [ecx+1]
$LL42@SetOwnersh:
  00038	8a 01		 mov	 al, BYTE PTR [ecx]
  0003a	41		 inc	 ecx
  0003b	84 c0		 test	 al, al
  0003d	75 f9		 jne	 SHORT $LL42@SetOwnersh
  0003f	2b cb		 sub	 ecx, ebx

; 3546 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00041	51		 push	 ecx
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 506  : 	pGroundItemInstance->stOwnership.assign(c_pszName);

  00042	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3546 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00045	56		 push	 esi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 506  : 	pGroundItemInstance->stOwnership.assign(c_pszName);

  00046	81 c1 d0 03 00
	00		 add	 ecx, 976		; 000003d0H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3546 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0004c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 509  : 	rkTextTail.SetItemTextTailOwner(dwVID, c_pszName);

  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonTextTail@@@@0PAVCPythonTextTail@@A ; CSingleton<CPythonTextTail>::ms_singleton
  00057	56		 push	 esi
  00058	57		 push	 edi
  00059	e8 00 00 00 00	 call	 ?SetItemTextTailOwner@CPythonTextTail@@QAEXKPBD@Z ; CPythonTextTail::SetItemTextTailOwner
$LN1@SetOwnersh:

; 510  : }

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
?SetOwnership@CPythonItem@@QAEXKPBD@Z ENDP		; CPythonItem::SetOwnership
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?GetOwnership@CPythonItem@@QAE_NKPAPBD@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwVID$ = 8						; size = 4
_c_pszName$ = 12					; size = 4
?GetOwnership@CPythonItem@@QAE_NKPAPBD@Z PROC		; CPythonItem::GetOwnership, COMDAT
; _this$ = ecx

; 513  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 08	 lea	 eax, DWORD PTR _dwVID$[ebp]
  0000a	50		 push	 eax
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 514  : 	TGroundItemInstanceMap::iterator itor = m_GroundItemInstanceMap.find(dwVID);

  0000b	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00019	8b 4d fc	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  0001c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00020	75 2b		 jne	 SHORT $LN44@GetOwnersh
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00022	8b 45 08	 mov	 eax, DWORD PTR _dwVID$[ebp]
  00025	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00028	72 23		 jb	 SHORT $LN44@GetOwnersh

; 233  :         return this->_Ptr == _Right._Ptr;

  0002a	39 0e		 cmp	 DWORD PTR [esi], ecx
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 516  : 	if (m_GroundItemInstanceMap.end() == itor)

  0002c	74 1f		 je	 SHORT $LN44@GetOwnersh
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4256 :         return _Mypair._Myval2._Myptr();

  0002e	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00031	81 c1 d0 03 00
	00		 add	 ecx, 976		; 000003d0H

; 2301 :         return _BUF_SIZE <= _Myres;

  00037	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  0003b	72 02		 jb	 SHORT $LN40@GetOwnersh

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0003d	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN40@GetOwnersh:
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 520  : 	*c_pszName = pGroundItemInstance->stOwnership.c_str();

  0003f	8b 45 0c	 mov	 eax, DWORD PTR _c_pszName$[ebp]
  00042	5e		 pop	 esi
  00043	89 08		 mov	 DWORD PTR [eax], ecx

; 521  : 
; 522  : 	return true;

  00045	b0 01		 mov	 al, 1

; 523  : }

  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
$LN44@GetOwnersh:

; 517  : 		return false;

  0004d	32 c0		 xor	 al, al
  0004f	5e		 pop	 esi

; 523  : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
?GetOwnership@CPythonItem@@QAE_NKPAPBD@Z ENDP		; CPythonItem::GetOwnership
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >, COMDAT
; _this$ = ecx

; 36   :     _Tree_unchecked_const_iterator() noexcept : _Ptr() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >, COMDAT
; _this$ = ecx

; 36   :     _Tree_unchecked_const_iterator() noexcept : _Ptr() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?DeleteItem@CPythonItem@@QAEXK@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_pGroundItemInstance$1$ = 8				; size = 4
_pkData$ = 8						; size = 4
_dwVirtualID$ = 8					; size = 4
?DeleteItem@CPythonItem@@QAEXK@Z PROC			; CPythonItem::DeleteItem, COMDAT
; _this$ = ecx

; 541  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00009	8d 4d 08	 lea	 ecx, DWORD PTR _dwVirtualID$[ebp]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 541  : {

  0000c	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000d	51		 push	 ecx
  0000e	8d 4d f4	 lea	 ecx, DWORD PTR __Loc$1[ebp]
  00011	51		 push	 ecx
  00012	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00015	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0001a	8b 7d fc	 mov	 edi, DWORD PTR __Loc$1[ebp+8]
  0001d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00021	75 5f		 jne	 SHORT $LN1@DeleteItem
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00023	53		 push	 ebx
  00024	8b 5d 08	 mov	 ebx, DWORD PTR _dwVirtualID$[ebp]
  00027	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0002a	72 55		 jb	 SHORT $LN112@DeleteItem

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002c	39 7e 04	 cmp	 DWORD PTR [esi+4], edi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 543  : 	if (m_GroundItemInstanceMap.end() == itor)

  0002f	74 50		 je	 SHORT $LN112@DeleteItem

; 544  : 		return;
; 545  : 
; 546  : 	TGroundItemInstance * pGroundItemInstance = itor->second;

  00031	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 547  : 	pGroundItemInstance->Clear();

  00034	8b c8		 mov	 ecx, eax
  00036	89 45 08	 mov	 DWORD PTR _pGroundItemInstance$1$[ebp], eax
  00039	e8 00 00 00 00	 call	 ?Clear@SGroundItemInstance@CPythonItem@@QAEXXZ ; CPythonItem::SGroundItemInstance::Clear
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0003e	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 548  : 	m_GroundItemInstancePool.Free(pGroundItemInstance);

  00041	8b 4d 08	 mov	 ecx, DWORD PTR _pGroundItemInstance$1$[ebp]
  00044	89 4d 08	 mov	 DWORD PTR _pkData$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00047	3b 46 24	 cmp	 eax, DWORD PTR [esi+36]
  0004a	74 08		 je	 SHORT $LN42@DeleteItem

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0004c	89 08		 mov	 DWORD PTR [eax], ecx

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  0004e	83 46 20 04	 add	 DWORD PTR [esi+32], 4

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00052	eb 0d		 jmp	 SHORT $LN41@DeleteItem
$LN42@DeleteItem:

; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00054	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  00057	51		 push	 ecx
  00058	50		 push	 eax
  00059	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  0005c	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEPAPAUSGroundItemInstance@CPythonItem@@QAPAU23@ABQAU23@@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_reallocate<CPythonItem::SGroundItemInstance * const &>
$LN41@DeleteItem:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1287 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  00061	57		 push	 edi
  00062	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00065	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Extract
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0006a	6a 18		 push	 24			; 00000018H
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 552  : 	CPythonTextTail::Instance().DeleteItemTextTail(dwVirtualID);

  00072	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonTextTail@@@@0PAVCPythonTextTail@@A ; CSingleton<CPythonTextTail>::ms_singleton
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00078	83 c4 08	 add	 esp, 8
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 552  : 	CPythonTextTail::Instance().DeleteItemTextTail(dwVirtualID);

  0007b	53		 push	 ebx
  0007c	e8 00 00 00 00	 call	 ?DeleteItemTextTail@CPythonTextTail@@QAEXK@Z ; CPythonTextTail::DeleteItemTextTail
$LN112@DeleteItem:
  00081	5b		 pop	 ebx
$LN1@DeleteItem:
  00082	5f		 pop	 edi

; 553  : }

  00083	5e		 pop	 esi
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
?DeleteItem@CPythonItem@@QAEXK@Z ENDP			; CPythonItem::DeleteItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?DISTANCE_APPROX@@YAHHH@Z
_TEXT	SEGMENT
?DISTANCE_APPROX@@YAHHH@Z PROC				; DISTANCE_APPROX, COMDAT
; _dx$ = ecx
; _dy$ = edx

; 620  : {

  00000	56		 push	 esi
  00001	8b f2		 mov	 esi, edx

; 621  : 	int min, max;
; 622  : 
; 623  : 	if (dx < 0)
; 624  : 		dx = -dx;
; 625  : 
; 626  : 	if (dy < 0)

  00003	8b c1		 mov	 eax, ecx
  00005	99		 cdq
  00006	8b c8		 mov	 ecx, eax

; 627  : 		dy = -dy;
; 628  : 
; 629  : 	if (dx < dy)

  00008	8b c6		 mov	 eax, esi
  0000a	33 ca		 xor	 ecx, edx
  0000c	2b ca		 sub	 ecx, edx
  0000e	99		 cdq
  0000f	8b f0		 mov	 esi, eax
  00011	33 f2		 xor	 esi, edx
  00013	2b f2		 sub	 esi, edx
  00015	3b ce		 cmp	 ecx, esi
  00017	7d 04		 jge	 SHORT $LN4@DISTANCE_A

; 630  : 	{
; 631  : 		min = dx;

  00019	8b d1		 mov	 edx, ecx

; 632  : 		max = dy;
; 633  : 	}

  0001b	eb 04		 jmp	 SHORT $LN5@DISTANCE_A
$LN4@DISTANCE_A:

; 634  : 	else
; 635  : 	{
; 636  : 		min = dy;

  0001d	8b d6		 mov	 edx, esi

; 637  : 		max = dx;

  0001f	8b f1		 mov	 esi, ecx
$LN5@DISTANCE_A:

; 638  : 	}
; 639  : 
; 640  : 	// coefficients equivalent to ( 123/128 * max ) and ( 51/128 * min )
; 641  : 	return (((max << 8) + (max << 3) - (max << 4) - (max << 1) +

  00021	8d 04 72	 lea	 eax, DWORD PTR [edx+esi*2]
  00024	8b ce		 mov	 ecx, esi
  00026	c1 e0 04	 shl	 eax, 4
  00029	03 c6		 add	 eax, esi
  0002b	c1 e1 04	 shl	 ecx, 4
  0002e	03 c2		 add	 eax, edx
  00030	c1 e0 03	 shl	 eax, 3
  00033	2b c1		 sub	 eax, ecx
  00035	8d 0c 36	 lea	 ecx, DWORD PTR [esi+esi]
  00038	2b c1		 sub	 eax, ecx
  0003a	8b ca		 mov	 ecx, edx
  0003c	c1 e1 05	 shl	 ecx, 5
  0003f	2b c1		 sub	 eax, ecx
  00041	8d 0c 12	 lea	 ecx, DWORD PTR [edx+edx]
  00044	2b c1		 sub	 eax, ecx
  00046	c1 f8 08	 sar	 eax, 8
  00049	5e		 pop	 esi

; 642  : 		(min << 7) - (min << 5) + (min << 3) - (min << 1)) >> 8);
; 643  : }

  0004a	c3		 ret	 0
?DISTANCE_APPROX@@YAHHH@Z ENDP				; DISTANCE_APPROX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?GetCloseItem@CPythonItem@@QAE_NABUD3DXVECTOR3@@PAKK@Z
_TEXT	SEGMENT
tv427 = -16						; size = 4
_dwCloseItemID$1$ = -12					; size = 4
_dwCloseItemDistance$1$ = -8				; size = 4
_i$ = -4						; size = 4
tv429 = 8						; size = 4
_c_rPixelPosition$ = 8					; size = 4
_pdwItemID$ = 12					; size = 4
_dwDistance$dead$ = 16					; size = 4
?GetCloseItem@CPythonItem@@QAE_NABUD3DXVECTOR3@@PAKK@Z PROC ; CPythonItem::GetCloseItem, COMDAT
; _this$ = ecx

; 646  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1126 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00009	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 647  : 	DWORD dwCloseItemID = 0;

  0000c	33 d2		 xor	 edx, edx

; 648  : 	DWORD dwCloseItemDistance = 0;

  0000e	33 c0		 xor	 eax, eax
  00010	89 55 f4	 mov	 DWORD PTR _dwCloseItemID$1$[ebp], edx

; 649  : 	int aproMin = 0;

  00013	33 db		 xor	 ebx, ebx
  00015	89 45 f8	 mov	 DWORD PTR _dwCloseItemDistance$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00018	8b 37		 mov	 esi, DWORD PTR [edi]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 652  : 	for (i = m_GroundItemInstanceMap.begin(); i != m_GroundItemInstanceMap.end(); ++i)

  0001a	89 75 fc	 mov	 DWORD PTR _i$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0001d	3b f7		 cmp	 esi, edi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 652  : 	for (i = m_GroundItemInstanceMap.begin(); i != m_GroundItemInstanceMap.end(); ++i)

  0001f	74 68		 je	 SHORT $LN7@GetCloseIt

; 653  : 	{
; 654  : 		TGroundItemInstance* pInstance = i->second;
; 655  : 
; 656  : 		int iDist = DISTANCE_APPROX((int)c_rPixelPosition.x - (int)pInstance->v3EndPosition.x, (int)c_rPixelPosition.y - (-(int)pInstance->v3EndPosition.y));

  00021	8b 45 08	 mov	 eax, DWORD PTR _c_rPixelPosition$[ebp]
  00024	f3 0f 2c 48 04	 cvttss2si ecx, DWORD PTR [eax+4]
  00029	f3 0f 2c 00	 cvttss2si eax, DWORD PTR [eax]
  0002d	89 4d f0	 mov	 DWORD PTR tv427[ebp], ecx
  00030	89 45 08	 mov	 DWORD PTR tv429[ebp], eax
$LL22@GetCloseIt:
  00033	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00036	f3 0f 2c 50 0c	 cvttss2si edx, DWORD PTR [eax+12]
  0003b	f3 0f 2c 40 08	 cvttss2si eax, DWORD PTR [eax+8]
  00040	03 d1		 add	 edx, ecx
  00042	8b 4d 08	 mov	 ecx, DWORD PTR tv429[ebp]
  00045	2b c8		 sub	 ecx, eax
  00047	e8 00 00 00 00	 call	 ?DISTANCE_APPROX@@YAHHH@Z ; DISTANCE_APPROX

; 657  : 		if (aproMin == 0)

  0004c	85 db		 test	 ebx, ebx
  0004e	74 04		 je	 SHORT $LN53@GetCloseIt

; 658  : 			aproMin = iDist;
; 659  : 		if (aproMin >= iDist) {

  00050	3b d8		 cmp	 ebx, eax
  00052	7c 0b		 jl	 SHORT $LN2@GetCloseIt
$LN53@GetCloseIt:

; 660  : 			aproMin = iDist;
; 661  : 			dwCloseItemID = i->first;

  00054	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00057	8b d8		 mov	 ebx, eax
  00059	89 4d f4	 mov	 DWORD PTR _dwCloseItemID$1$[ebp], ecx

; 662  : 			dwCloseItemDistance = iDist;

  0005c	89 45 f8	 mov	 DWORD PTR _dwCloseItemDistance$1$[ebp], eax
$LN2@GetCloseIt:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 199  :         _Mybase::operator++();

  0005f	8d 4d fc	 lea	 ecx, DWORD PTR _i$[ebp]
  00062	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++

; 233  :         return this->_Ptr == _Right._Ptr;

  00067	8b 75 fc	 mov	 esi, DWORD PTR _i$[ebp]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 652  : 	for (i = m_GroundItemInstanceMap.begin(); i != m_GroundItemInstanceMap.end(); ++i)

  0006a	8b 4d f0	 mov	 ecx, DWORD PTR tv427[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 233  :         return this->_Ptr == _Right._Ptr;

  0006d	3b f7		 cmp	 esi, edi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 652  : 	for (i = m_GroundItemInstanceMap.begin(); i != m_GroundItemInstanceMap.end(); ++i)

  0006f	75 c2		 jne	 SHORT $LL22@GetCloseIt

; 663  : 		}
; 664  : 	}
; 665  : 
; 666  : 	if (dwCloseItemDistance > 300)

  00071	8b 45 f8	 mov	 eax, DWORD PTR _dwCloseItemDistance$1$[ebp]
  00074	3d 2c 01 00 00	 cmp	 eax, 300		; 0000012cH
  00079	76 0b		 jbe	 SHORT $LN55@GetCloseIt

; 670  : 
; 671  : 	return true;
; 672  : }

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	32 c0		 xor	 al, al
  0007f	5b		 pop	 ebx
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 0c 00	 ret	 12			; 0000000cH
$LN55@GetCloseIt:

; 663  : 		}
; 664  : 	}
; 665  : 
; 666  : 	if (dwCloseItemDistance > 300)

  00086	8b 55 f4	 mov	 edx, DWORD PTR _dwCloseItemID$1$[ebp]
$LN7@GetCloseIt:

; 667  : 		return false;
; 668  : 
; 669  : 	*pdwItemID = dwCloseItemID;

  00089	8b 45 0c	 mov	 eax, DWORD PTR _pdwItemID$[ebp]
  0008c	5f		 pop	 edi

; 670  : 
; 671  : 	return true;
; 672  : }

  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	89 10		 mov	 DWORD PTR [eax], edx
  00091	b0 01		 mov	 al, 1
  00093	8b e5		 mov	 esp, ebp
  00095	5d		 pop	 ebp
  00096	c2 0c 00	 ret	 12			; 0000000cH
?GetCloseItem@CPythonItem@@QAE_NABUD3DXVECTOR3@@PAKK@Z ENDP ; CPythonItem::GetCloseItem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?GetCloseItemVector@CPythonItem@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUD3DXVECTOR3@@AAV?$vector@KV?$allocator@K@std@@@3@@Z
_TEXT	SEGMENT
_this$1$ = -12						; size = 4
tv621 = -8						; size = 4
_i$ = -4						; size = 4
_myName$ = 8						; size = 4
_c_rPixelPosition$ = 12					; size = 4
_itemVidList$ = 16					; size = 4
?GetCloseItemVector@CPythonItem@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUD3DXVECTOR3@@AAV?$vector@KV?$allocator@K@std@@@3@@Z PROC ; CPythonItem::GetCloseItemVector, COMDAT
; _this$ = ecx

; 675  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	8b c1		 mov	 eax, ecx
  00008	89 45 f4	 mov	 DWORD PTR _this$1$[ebp], eax
  0000b	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1126 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  0000c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0000f	8b 30		 mov	 esi, DWORD PTR [eax]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 679  : 	for (i = m_GroundItemInstanceMap.begin(); i != m_GroundItemInstanceMap.end(); ++i)

  00011	89 75 fc	 mov	 DWORD PTR _i$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00014	3b f0		 cmp	 esi, eax
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 679  : 	for (i = m_GroundItemInstanceMap.begin(); i != m_GroundItemInstanceMap.end(); ++i)

  00016	0f 84 d9 00 00
	00		 je	 $LN88@GetCloseIt
  0001c	57		 push	 edi
  0001d	0f 1f 00	 npad	 3
$LL21@GetCloseIt:

; 680  : 	{
; 681  : 		TGroundItemInstance * pInstance = i->second;
; 682  : 
; 683  : 		DWORD dwxDistance = DWORD(c_rPixelPosition.x - pInstance->v3EndPosition.x);

  00020	8b 4d 0c	 mov	 ecx, DWORD PTR _c_rPixelPosition$[ebp]
  00023	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00026	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0002a	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
  0002f	e8 00 00 00 00	 call	 __ftol3
  00034	8b f8		 mov	 edi, eax

; 684  : 		DWORD dwyDistance = DWORD(c_rPixelPosition.y - (-pInstance->v3EndPosition.y));

  00036	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00039	f3 0f 10 48 0c	 movss	 xmm1, DWORD PTR [eax+12]
  0003e	8b 45 0c	 mov	 eax, DWORD PTR _c_rPixelPosition$[ebp]
  00041	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00048	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0004d	f3 0f 5c c1	 subss	 xmm0, xmm1
  00051	e8 00 00 00 00	 call	 __ftol3

; 685  : 		DWORD dwDistance = DWORD(dwxDistance * dwxDistance + dwyDistance * dwyDistance);

  00056	0f af c0	 imul	 eax, eax
  00059	0f af ff	 imul	 edi, edi
  0005c	03 c7		 add	 eax, edi

; 687  : 		if (dwDistance < dwCloseItemDistance && (pInstance->stOwnership == "" || pInstance->stOwnership == myName))

  0005e	3d 40 42 0f 00	 cmp	 eax, 1000000		; 000f4240H
  00063	73 78		 jae	 SHORT $LN2@GetCloseIt
  00065	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00068	81 c7 d0 03 00
	00		 add	 edi, 976		; 000003d0H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2292 :         const value_type* _Result = _Bx._Buf;

  0006e	8b c7		 mov	 eax, edi

; 2301 :         return _BUF_SIZE <= _Myres;

  00070	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 4756 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00074	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00077	89 4d f8	 mov	 DWORD PTR tv621[ebp], ecx

; 2293 :         if (_Large_string_engaged()) {

  0007a	72 02		 jb	 SHORT $LN87@GetCloseIt

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0007c	8b 07		 mov	 eax, DWORD PTR [edi]
$LN87@GetCloseIt:

; 4756 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  0007e	6a 00		 push	 0
  00080	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00085	51		 push	 ecx
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
  0008c	83 c4 10	 add	 esp, 16			; 00000010H
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 687  : 		if (dwDistance < dwCloseItemDistance && (pInstance->stOwnership == "" || pInstance->stOwnership == myName))

  0008f	84 c0		 test	 al, al
  00091	75 29		 jne	 SHORT $LN6@GetCloseIt
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4750 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00093	8b 4d 08	 mov	 ecx, DWORD PTR _myName$[ebp]

; 2292 :         const value_type* _Result = _Bx._Buf;

  00096	8b c1		 mov	 eax, ecx

; 2301 :         return _BUF_SIZE <= _Myres;

  00098	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  0009c	72 02		 jb	 SHORT $LN57@GetCloseIt

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0009e	8b 01		 mov	 eax, DWORD PTR [ecx]
$LN57@GetCloseIt:

; 2301 :         return _BUF_SIZE <= _Myres;

  000a0	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  000a4	72 02		 jb	 SHORT $LN86@GetCloseIt

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  000a6	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN86@GetCloseIt:

; 4750 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  000a8	ff 71 10	 push	 DWORD PTR [ecx+16]
  000ab	50		 push	 eax
  000ac	ff 75 f8	 push	 DWORD PTR tv621[ebp]
  000af	57		 push	 edi
  000b0	e8 00 00 00 00	 call	 ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
  000b5	83 c4 10	 add	 esp, 16			; 00000010H
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 687  : 		if (dwDistance < dwCloseItemDistance && (pInstance->stOwnership == "" || pInstance->stOwnership == myName))

  000b8	84 c0		 test	 al, al
  000ba	74 21		 je	 SHORT $LN2@GetCloseIt
$LN6@GetCloseIt:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  000bc	8b 55 10	 mov	 edx, DWORD PTR _itemVidList$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 186  :         return this->_Ptr->_Myval;

  000bf	83 c6 10	 add	 esi, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  000c2	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000c5	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  000c8	74 0a		 je	 SHORT $LN48@GetCloseIt

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  000ca	8b 06		 mov	 eax, DWORD PTR [esi]
  000cc	89 01		 mov	 DWORD PTR [ecx], eax

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  000ce	83 42 04 04	 add	 DWORD PTR [edx+4], 4

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  000d2	eb 09		 jmp	 SHORT $LN2@GetCloseIt
$LN48@GetCloseIt:

; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000d4	56		 push	 esi
  000d5	51		 push	 ecx
  000d6	8b ca		 mov	 ecx, edx
  000d8	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABK@?$vector@KV?$allocator@K@std@@@std@@AAEPAKQAKABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long const &>
$LN2@GetCloseIt:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 199  :         _Mybase::operator++();

  000dd	8d 4d fc	 lea	 ecx, DWORD PTR _i$[ebp]
  000e0	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++

; 233  :         return this->_Ptr == _Right._Ptr;

  000e5	8b 45 f4	 mov	 eax, DWORD PTR _this$1$[ebp]
  000e8	8b 75 fc	 mov	 esi, DWORD PTR _i$[ebp]
  000eb	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 679  : 	for (i = m_GroundItemInstanceMap.begin(); i != m_GroundItemInstanceMap.end(); ++i)

  000ee	0f 85 2c ff ff
	ff		 jne	 $LL21@GetCloseIt

; 688  : 		{
; 689  : 			itemVidList.push_back(i->first);
; 690  : 		}
; 691  : 	}
; 692  : 
; 693  : 	return true;

  000f4	5f		 pop	 edi
$LN88@GetCloseIt:

; 694  : }

  000f5	b0 01		 mov	 al, 1
  000f7	5e		 pop	 esi
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 0c 00	 ret	 12			; 0000000cH
?GetCloseItemVector@CPythonItem@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABUD3DXVECTOR3@@AAV?$vector@KV?$allocator@K@std@@@3@@Z ENDP ; CPythonItem::GetCloseItemVector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?GetGroundItemPosition@CPythonItem@@QAEHKPAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwVirtualID$ = 8					; size = 4
_pPosition$ = 12					; size = 4
?GetGroundItemPosition@CPythonItem@@QAEHKPAUD3DXVECTOR3@@@Z PROC ; CPythonItem::GetGroundItemPosition, COMDAT
; _this$ = ecx

; 697  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 08	 lea	 eax, DWORD PTR _dwVirtualID$[ebp]
  0000a	50		 push	 eax
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 698  : 	TGroundItemInstanceMap::iterator itor = m_GroundItemInstanceMap.find(dwVirtualID);

  0000b	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00019	8b 4d fc	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  0001c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00020	75 41		 jne	 SHORT $LN37@GetGroundI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00022	8b 45 08	 mov	 eax, DWORD PTR _dwVirtualID$[ebp]
  00025	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00028	72 39		 jb	 SHORT $LN37@GetGroundI

; 233  :         return this->_Ptr == _Right._Ptr;

  0002a	39 0e		 cmp	 DWORD PTR [esi], ecx
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 699  : 	if (m_GroundItemInstanceMap.end() == itor)

  0002c	74 35		 je	 SHORT $LN37@GetGroundI

; 701  : 
; 702  : 	TGroundItemInstance * pInstance = itor->second;

  0002e	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]

; 703  : 
; 704  : 	const D3DXVECTOR3& rkD3DVct3=pInstance->ThingInstance.GetPosition();

  00031	8d 49 3c	 lea	 ecx, DWORD PTR [ecx+60]
  00034	e8 00 00 00 00	 call	 ?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ; CGraphicObjectInstance::GetPosition

; 705  : 
; 706  : 	pPosition->x=+rkD3DVct3.x;

  00039	8b 55 0c	 mov	 edx, DWORD PTR _pPosition$[ebp]
  0003c	5e		 pop	 esi
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	89 0a		 mov	 DWORD PTR [edx], ecx

; 707  : 	pPosition->y=-rkD3DVct3.y;

  00041	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00046	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0004d	f3 0f 11 42 04	 movss	 DWORD PTR [edx+4], xmm0

; 708  : 	pPosition->z=+rkD3DVct3.z;

  00052	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00055	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 709  : 
; 710  : 	return TRUE;

  00058	b8 01 00 00 00	 mov	 eax, 1

; 711  : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 08 00	 ret	 8
$LN37@GetGroundI:

; 700  : 		return FALSE;

  00063	33 c0		 xor	 eax, eax
  00065	5e		 pop	 esi

; 711  : }

  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 08 00	 ret	 8
?GetGroundItemPosition@CPythonItem@@QAEHKPAUD3DXVECTOR3@@@Z ENDP ; CPythonItem::GetGroundItemPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?__Pick@CPythonItem@@IAEKABUtagPOINT@@@Z
_TEXT	SEGMENT
_fu$ = -16						; size = 4
_fv$ = -12						; size = 4
_ft$ = -8						; size = 4
_itor$ = -4						; size = 4
_c_rkPtMouse$ = 8					; size = 4
?__Pick@CPythonItem@@IAEKABUtagPOINT@@@Z PROC		; CPythonItem::__Pick, COMDAT
; _this$ = ecx

; 714  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1126 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  0000a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0000d	8b 30		 mov	 esi, DWORD PTR [eax]
  0000f	89 75 fc	 mov	 DWORD PTR _itor$[ebp], esi
  00012	3b f0		 cmp	 esi, eax
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 718  : 	for (; itor != m_GroundItemInstanceMap.end(); ++itor)

  00014	74 2b		 je	 SHORT $LN3@Pick
$LL26@Pick:

; 719  : 	{
; 720  : 		TGroundItemInstance * pInstance = itor->second;
; 721  : 
; 722  : 		if (pInstance->ThingInstance.Intersect(&fu, &fv, &ft))

  00016	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00019	8d 45 f8	 lea	 eax, DWORD PTR _ft$[ebp]
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR _fv$[ebp]
  00020	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00023	50		 push	 eax
  00024	8d 45 f0	 lea	 eax, DWORD PTR _fu$[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?Intersect@CGraphicThingInstance@@QAE_NPAM00@Z ; CGraphicThingInstance::Intersect
  0002d	84 c0		 test	 al, al
  0002f	75 2b		 jne	 SHORT $LN42@Pick
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 199  :         _Mybase::operator++();

  00031	8d 4d fc	 lea	 ecx, DWORD PTR _itor$[ebp]
  00034	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++

; 233  :         return this->_Ptr == _Right._Ptr;

  00039	8b 75 fc	 mov	 esi, DWORD PTR _itor$[ebp]
  0003c	3b 77 04	 cmp	 esi, DWORD PTR [edi+4]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 718  : 	for (; itor != m_GroundItemInstanceMap.end(); ++itor)

  0003f	75 d5		 jne	 SHORT $LL26@Pick
$LN3@Pick:

; 725  : 		}
; 726  : 	}
; 727  : 
; 728  : 	CPythonTextTail& rkTextTailMgr=CPythonTextTail::Instance();
; 729  : 	return rkTextTailMgr.Pick(c_rkPtMouse.x, c_rkPtMouse.y);

  00041	8b 45 08	 mov	 eax, DWORD PTR _c_rkPtMouse$[ebp]
  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonTextTail@@@@0PAVCPythonTextTail@@A ; CSingleton<CPythonTextTail>::ms_singleton
  0004a	ff 70 04	 push	 DWORD PTR [eax+4]
  0004d	ff 30		 push	 DWORD PTR [eax]
  0004f	e8 00 00 00 00	 call	 ?Pick@CPythonTextTail@@QAEHHH@Z ; CPythonTextTail::Pick
  00054	5f		 pop	 edi

; 730  : }

  00055	5e		 pop	 esi
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
$LN42@Pick:

; 723  : 		{
; 724  : 			return itor->first;

  0005c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0005f	5f		 pop	 edi

; 730  : }

  00060	5e		 pop	 esi
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?__Pick@CPythonItem@@IAEKABUtagPOINT@@@Z ENDP		; CPythonItem::__Pick
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?GetPickedItemID@CPythonItem@@QAE_NPAK@Z
_TEXT	SEGMENT
_pdwPickedItemID$ = 8					; size = 4
?GetPickedItemID@CPythonItem@@QAE_NPAK@Z PROC		; CPythonItem::GetPickedItemID, COMDAT
; _this$ = ecx

; 733  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 734  : 	if (INVALID_ID==m_dwPickedItemID)

  00003	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
  00006	83 f9 ff	 cmp	 ecx, -1
  00009	75 06		 jne	 SHORT $LN2@GetPickedI

; 735  : 		return false;

  0000b	32 c0		 xor	 al, al

; 739  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
$LN2@GetPickedI:

; 736  : 
; 737  : 	*pdwPickedItemID=m_dwPickedItemID;

  00011	8b 45 08	 mov	 eax, DWORD PTR _pdwPickedItemID$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 738  : 	return true;

  00016	b0 01		 mov	 al, 1

; 739  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?GetPickedItemID@CPythonItem@@QAE_NPAK@Z ENDP		; CPythonItem::GetPickedItemID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp
;	COMDAT ?GetVirtualNumberOfGroundItem@CPythonItem@@QAEKK@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwVID$ = 8						; size = 4
?GetVirtualNumberOfGroundItem@CPythonItem@@QAEKK@Z PROC	; CPythonItem::GetVirtualNumberOfGroundItem, COMDAT
; _this$ = ecx

; 742  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 08	 lea	 eax, DWORD PTR _dwVID$[ebp]
  0000a	50		 push	 eax
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 743  : 	TGroundItemInstanceMap::iterator itor = m_GroundItemInstanceMap.find(dwVID);

  0000b	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00019	8b 4d fc	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  0001c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00020	75 19		 jne	 SHORT $LN38@GetVirtual
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00022	8b 45 08	 mov	 eax, DWORD PTR _dwVID$[ebp]
  00025	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00028	72 11		 jb	 SHORT $LN38@GetVirtual

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002a	3b 0e		 cmp	 ecx, DWORD PTR [esi]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.cpp

; 745  : 	if (itor == m_GroundItemInstanceMap.end())

  0002c	74 0d		 je	 SHORT $LN38@GetVirtual

; 747  : 	else
; 748  : 		return itor->second->dwVirtualNumber;

  0002e	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00031	5e		 pop	 esi
  00032	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 749  : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
$LN38@GetVirtual:

; 746  : 		return 0;

  0003b	33 c0		 xor	 eax, eax
  0003d	5e		 pop	 esi

; 749  : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?GetVirtualNumberOfGroundItem@CPythonItem@@QAEKK@Z ENDP	; CPythonItem::GetVirtualNumberOfGroundItem
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCPythonItem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPythonItem@@UAEPAXI@Z PROC				; CPythonItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CPythonItem@@UAE@XZ	; CPythonItem::~CPythonItem
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 0c 01 00 00	 push	 268			; 0000010cH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCPythonItem@@UAEPAXI@Z ENDP				; CPythonItem::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$map@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@@std@@QAE@XZ PROC ; std::map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::~map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 70 04	 push	 DWORD PTR [eax+4]
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0000e	6a 18		 push	 24			; 00000018H
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00017	83 c4 08	 add	 esp, 8
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??1?$map@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@@std@@QAE@XZ ENDP ; std::map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::~map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator++, COMDAT
; _this$ = ecx

; 282  :     _Tree_iterator& operator++() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 199  :         _Mybase::operator++();

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++

; 283  :         _Mybase::operator++();
; 284  :         return *this;

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 285  :     }

  0000b	c3		 ret	 0
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ
_TEXT	SEGMENT
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator->, COMDAT
; _this$ = ecx

; 186  :         return this->_Ptr->_Myval;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 279  :         return pointer_traits<pointer>::pointer_to(**this);
; 280  :     }

  00005	c3		 ret	 0
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator==, COMDAT
; _this$ = ecx

; 228  :     _NODISCARD bool operator==(const _Tree_const_iterator& _Right) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 229  : #if _ITERATOR_DEBUG_LEVEL == 2
; 230  :         _STL_VERIFY(this->_Getcont() == _Right._Getcont(), "map/set iterators incompatible");
; 231  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 232  : 
; 233  :         return this->_Ptr == _Right._Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 94 c0	 sete	 al

; 234  :     }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 36   :     _Tree_unchecked_const_iterator() noexcept : _Ptr() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
;	COMDAT ?GetCapacity@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEKXZ
_TEXT	SEGMENT
?GetCapacity@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEKXZ PROC ; CDynamicPool<CPythonItem::SGroundItemInstance>::GetCapacity, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 04	 sub	 eax, DWORD PTR [ecx+4]
  00006	c1 f8 02	 sar	 eax, 2
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 92   : 		}

  00009	c3		 ret	 0
?GetCapacity@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEKXZ ENDP ; CDynamicPool<CPythonItem::SGroundItemInstance>::GetCapacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
;	COMDAT ?Free@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXPAUSGroundItemInstance@CPythonItem@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Free@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXPAUSGroundItemInstance@CPythonItem@@@Z PROC ; CDynamicPool<CPythonItem::SGroundItemInstance>::Free, COMDAT
; _this$ = ecx

; 77   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00003	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 82   : 			m_kVct_pkFree.push_back(pkData);

  00006	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00009	3b 51 18	 cmp	 edx, DWORD PTR [ecx+24]
  0000c	74 0d		 je	 SHORT $LN6@Free

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _pkData$[ebp]
  00011	89 02		 mov	 DWORD PTR [edx], eax

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00013	83 41 14 04	 add	 DWORD PTR [ecx+20], 4
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 83   : 		}

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
$LN6@Free:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0001b	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  0001e	51		 push	 ecx
  0001f	52		 push	 edx
  00020	8b c8		 mov	 ecx, eax
  00022	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEPAPAUSGroundItemInstance@CPythonItem@@QAPAU23@ABQAU23@@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_reallocate<CPythonItem::SGroundItemInstance * const &>
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 83   : 		}

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?Free@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXPAUSGroundItemInstance@CPythonItem@@@Z ENDP ; CDynamicPool<CPythonItem::SGroundItemInstance>::Free
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
;	COMDAT ?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
_pkNewData$3 = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ PROC ; CDynamicPool<CPythonItem::SGroundItemInstance>::Alloc, COMDAT
; _this$ = ecx

; 63   : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx

; 64   : 			if (m_kVct_pkFree.empty())

  00027	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002a	3b 46 14	 cmp	 eax, DWORD PTR [esi+20]
  0002d	0f 85 a0 00 00
	00		 jne	 $LN2@Alloc

; 66   : 				T* pkNewData=new T;

  00033	68 e8 03 00 00	 push	 1000			; 000003e8H
  00038	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003d	8b f8		 mov	 edi, eax
  0003f	83 c4 04	 add	 esp, 4
  00042	89 7d f0	 mov	 DWORD PTR $T2[ebp], edi
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonItem.h

; 71   : 			SGroundItemInstance() {}

  0004c	8d 4f 3c	 lea	 ecx, DWORD PTR [edi+60]
  0004f	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7SGroundItemInstance@CPythonItem@@6B@
  00055	e8 00 00 00 00	 call	 ??0CGraphicThingInstance@@QAE@XZ ; CGraphicThingInstance::CGraphicThingInstance
  0005a	0f 57 c0	 xorps	 xmm0, xmm0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 66   : 				T* pkNewData=new T;

  0005d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2339 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00064	0f 11 87 d0 03
	00 00		 movups	 XMMWORD PTR [edi+976], xmm0

; 4995 :         _My_data._Mysize = 0;

  0006b	c7 87 e0 03 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+992], 0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 67   : 				m_kVct_pkData.push_back(pkNewData);

  00075	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4996 :         _My_data._Myres  = _BUF_SIZE - 1;

  00078	c7 87 e4 03 00
	00 0f 00 00 00	 mov	 DWORD PTR [edi+996], 15	; 0000000fH

; 4997 :         _My_data._Activate_SSO_buffer();
; 4998 : 
; 4999 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5000 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00082	c6 87 d0 03 00
	00 00		 mov	 BYTE PTR [edi+976], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00089	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 66   : 				T* pkNewData=new T;

  0008c	89 7d f0	 mov	 DWORD PTR _pkNewData$3[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0008f	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  00092	74 1c		 je	 SHORT $LN12@Alloc

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00094	89 38		 mov	 DWORD PTR [eax], edi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 69   : 				return pkNewData;

  00096	8b c7		 mov	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 869  :         ++_Mylast;

  00098	83 46 08 04	 add	 DWORD PTR [esi+8], 4
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 68   : 				++m_uUsedCapacity;

  0009c	ff 46 20	 inc	 DWORD PTR [esi+32]

; 75   : 		}

  0009f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a9	59		 pop	 ecx
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
$LN12@Alloc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000b0	8d 55 f0	 lea	 edx, DWORD PTR _pkNewData$3[ebp]
  000b3	52		 push	 edx
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEPAPAUSGroundItemInstance@CPythonItem@@QAPAU23@ABQAU23@@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_reallocate<CPythonItem::SGroundItemInstance * const &>
  000ba	8b 7d f0	 mov	 edi, DWORD PTR _pkNewData$3[ebp]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 69   : 				return pkNewData;

  000bd	8b c7		 mov	 eax, edi
  000bf	ff 46 20	 inc	 DWORD PTR [esi+32]

; 75   : 		}

  000c2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cc	59		 pop	 ecx
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c3		 ret	 0
$LN2@Alloc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2007 :         return _My_data._Mylast[-1];

  000d3	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 72   : 			T* pkFreeData=m_kVct_pkFree.back();

  000d6	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1776 :         --_Mylast;

  000d9	83 c1 fc	 add	 ecx, -4			; fffffffcH
  000dc	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 75   : 		}

  000df	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e9	59		 pop	 ecx
  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	8b e5		 mov	 esp, ebp
  000ee	5d		 pop	 ebp
  000ef	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ$0:
  00000	68 e8 03 00 00	 push	 1000			; 000003e8H
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Alloc@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEPAUSGroundItemInstance@CPythonItem@@XZ ENDP ; CDynamicPool<CPythonItem::SGroundItemInstance>::Alloc
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
;	COMDAT ?Clear@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXXZ
_TEXT	SEGMENT
?Clear@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXXZ PROC ; CDynamicPool<CPythonItem::SGroundItemInstance>::Clear, COMDAT
; _this$ = ecx

; 33   : 		{			

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 50   : 			for (auto v : m_kVct_pkData)

  00005	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  00008	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 14		 je	 SHORT $LN5@Clear
  0000f	90		 npad	 1
$LL6@Clear:

; 111  : 			delete pkData;

  00010	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00012	85 c9		 test	 ecx, ecx
  00014	74 06		 je	 SHORT $LN4@Clear
  00016	8b 01		 mov	 eax, DWORD PTR [ecx]
  00018	6a 01		 push	 1
  0001a	ff 10		 call	 DWORD PTR [eax]
$LN4@Clear:

; 50   : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4
  0001f	3b f3		 cmp	 esi, ebx
  00021	75 ed		 jne	 SHORT $LL6@Clear
$LN5@Clear:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00023	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00026	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  00029	74 03		 je	 SHORT $LN12@Clear

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0002b	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN12@Clear:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0002e	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00031	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00034	74 03		 je	 SHORT $LN15@Clear

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00036	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN15@Clear:
  00039	5f		 pop	 edi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 35   : 		}

  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	c3		 ret	 0
?Clear@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXXZ ENDP ; CDynamicPool<CPythonItem::SGroundItemInstance>::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
;	COMDAT ?SetName@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXPBD@Z
_TEXT	SEGMENT
_c_szName$dead$ = 8					; size = 4
?SetName@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXPBD@Z PROC ; CDynamicPool<CPythonItem::SGroundItemInstance>::SetName, COMDAT
; _this$dead$ = ecx

; 30   : 		}

  00000	c2 04 00	 ret	 4
?SetName@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXPBD@Z ENDP ; CDynamicPool<CPythonItem::SGroundItemInstance>::SetName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@UAE@XZ PROC ; CDynamicPool<CPythonItem::SGroundItemInstance>::~CDynamicPool<CPythonItem::SGroundItemInstance>, COMDAT
; _this$ = ecx

; 18   : 		{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 19   : 			assert(m_kVct_pkData.empty());
; 20   : //#ifdef _DEBUG
; 21   : //			char szText[256];
; 22   : //			sprintf(szText, "--------------------------------------------------------------------- %s Pool Capacity %d\n", typeid(T).name(), m_uUsedCapacity);
; 23   : //			OutputDebugString(szText);
; 24   : //			printf(szText);			
; 25   : //#endif
; 26   : 		}

  00003	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@
  0000c	e8 00 00 00 00	 call	 ??1?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::~vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >
  00011	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00014	5e		 pop	 esi
  00015	e9 00 00 00 00	 jmp	 ??1?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::~vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >
??1?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@UAE@XZ ENDP ; CDynamicPool<CPythonItem::SGroundItemInstance>::~CDynamicPool<CPythonItem::SGroundItemInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
;	COMDAT ??0?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAE@XZ
_TEXT	SEGMENT
??0?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAE@XZ PROC ; CDynamicPool<CPythonItem::SGroundItemInstance>::CDynamicPool<CPythonItem::SGroundItemInstance>, COMDAT
; _this$ = ecx

; 12   : 		{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@

; 16   : 		}

  00006	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0001d	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  00024	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  0002b	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 14   : 			m_uInitCapacity=0;

  00032	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 15   : 			m_uUsedCapacity=0;

  00039	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 16   : 		}

  00040	c3		 ret	 0
??0?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAE@XZ ENDP ; CDynamicPool<CPythonItem::SGroundItemInstance>::CDynamicPool<CPythonItem::SGroundItemInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
;	COMDAT ??0?$map@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$map@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@@std@@QAE@XZ PROC ; std::map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >, COMDAT
; _this$ = ecx

; 105  :     map() : _Mybase(key_compare()) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00007	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 105  :     map() : _Mybase(key_compare()) {}

  00009	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0000c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00012	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00019	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0001e	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00021	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00023	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00026	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00029	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0002f	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 105  :     map() : _Mybase(key_compare()) {}

  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
??0?$map@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@@std@@QAE@XZ ENDP ; std::map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::map<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@ABK@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::find, COMDAT
; _this$ = ecx

; 1376 :     _NODISCARD iterator find(const key_type& _Keyval) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8b 75 0c	 mov	 esi, DWORD PTR __Keyval$[ebp]
  0000a	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]

; 1376 :     _NODISCARD iterator find(const key_type& _Keyval) {

  0000d	57		 push	 edi

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	56		 push	 esi
  0000f	50		 push	 eax

; 1376 :     _NODISCARD iterator find(const key_type& _Keyval) {

  00010	8b f9		 mov	 edi, ecx

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00012	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00017	8b 55 fc	 mov	 edx, DWORD PTR __Loc$1[ebp+8]
  0001a	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0001e	75 14		 jne	 SHORT $LN4@find
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00020	8b 06		 mov	 eax, DWORD PTR [esi]
  00022	3b 42 10	 cmp	 eax, DWORD PTR [edx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00025	72 0d		 jb	 SHORT $LN4@find

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00027	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0002a	5f		 pop	 edi

; 1377 :         return iterator(_Find(_Keyval), _Get_scary());
; 1378 :     }

  0002b	5e		 pop	 esi

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 1377 :         return iterator(_Find(_Keyval), _Get_scary());
; 1378 :     }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
$LN4@find:

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00034	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1372 :         return _Get_scary()->_Myhead;

  00037	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00039	5f		 pop	 edi

; 1377 :         return iterator(_Find(_Keyval), _Get_scary());
; 1378 :     }

  0003a	5e		 pop	 esi

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0003b	89 08		 mov	 DWORD PTR [eax], ecx

; 1377 :         return iterator(_Find(_Keyval), _Get_scary());
; 1378 :     }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::clear, COMDAT
; _this$ = ecx

; 1353 :     void clear() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 1354 :         const auto _Scary = _Get_scary();
; 1355 :         _Scary->_Orphan_ptr(nullptr);
; 1356 :         auto _Head = _Scary->_Myhead;

  00004	8b 37		 mov	 esi, DWORD PTR [edi]

; 1357 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00006	ff 76 04	 push	 DWORD PTR [esi+4]
  00009	57		 push	 edi
  0000a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >

; 1358 :         _Head->_Parent  = _Head;

  0000f	89 76 04	 mov	 DWORD PTR [esi+4], esi

; 1359 :         _Head->_Left    = _Head;

  00012	89 36		 mov	 DWORD PTR [esi], esi

; 1360 :         _Head->_Right   = _Head;

  00014	89 76 08	 mov	 DWORD PTR [esi+8], esi

; 1361 :         _Scary->_Mysize = 0;

  00017	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 1362 :     }

  00020	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::size, COMDAT
; _this$ = ecx

; 1193 :         return _Get_scary()->_Mysize;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1194 :     }

  00003	c3		 ret	 0
?size@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::end, COMDAT
; _this$ = ecx

; 1134 :     _NODISCARD iterator end() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1135 :         const auto _Scary = _Get_scary();
; 1136 :         return iterator(_Scary->_Myhead, _Scary);
; 1137 :     }

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::begin, COMDAT
; _this$ = ecx

; 1124 :     _NODISCARD iterator begin() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1125 :         const auto _Scary = _Get_scary();
; 1126 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1127 :     }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >, COMDAT
; _this$ = ecx

; 1079 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 70 04	 push	 DWORD PTR [eax+4]
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0000e	6a 18		 push	 24			; 00000018H
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00017	83 c4 08	 add	 esp, 8
  0001a	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1086 :     }

  0001b	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCPythonItem@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCPythonItem@@@@UAE@XZ PROC		; CSingleton<CPythonItem>::~CSingleton<CPythonItem>, COMDAT
; _this$ = ecx

; 19   : 	{ 

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCPythonItem@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonItem@@@@0PAVCPythonItem@@A, 0 ; CSingleton<CPythonItem>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCPythonItem@@@@UAE@XZ ENDP		; CSingleton<CPythonItem>::~CSingleton<CPythonItem>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterBase\Singleton.h
;	COMDAT ??0?$CSingleton@VCPythonItem@@@@QAE@XZ
_TEXT	SEGMENT
??0?$CSingleton@VCPythonItem@@@@QAE@XZ PROC		; CSingleton<CPythonItem>::CSingleton<CPythonItem>, COMDAT
; _this$ = ecx

; 12   : 	{ 

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCPythonItem@@@@6B@

; 13   : 		assert(!ms_singleton);
; 14   : 		int offset = (int) (T*) 1 - (int) (CSingleton <T>*) (T*) 1; 
; 15   : 		ms_singleton = (T*) ((int) this + offset);
; 16   : 	} 

  00006	8b c1		 mov	 eax, ecx
  00008	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonItem@@@@0PAVCPythonItem@@A, ecx ; CSingleton<CPythonItem>::ms_singleton
  0000e	c3		 ret	 0
??0?$CSingleton@VCPythonItem@@@@QAE@XZ ENDP		; CSingleton<CPythonItem>::CSingleton<CPythonItem>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAE@XZ PROC ; std::vector<CItemData *,std::allocator<CItemData *> >::~vector<CItemData *,std::allocator<CItemData *> >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN22@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN19@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN22@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2114 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 835  :     }

  0004a	c3		 ret	 0
$LN19@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@vector:
  00050	cc		 int	 3
??1?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAE@XZ ENDP ; std::vector<CItemData *,std::allocator<CItemData *> >::~vector<CItemData *,std::allocator<CItemData *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??0?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAE@XZ PROC ; std::vector<CItemData *,std::allocator<CItemData *> >::vector<CItemData *,std::allocator<CItemData *> >, COMDAT
; _this$ = ecx

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 674  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 675  :     }

  00006	8b c1		 mov	 eax, ecx

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 674  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 675  :     }

  00016	c3		 ret	 0
??0?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@QAE@XZ ENDP ; std::vector<CItemData *,std::allocator<CItemData *> >::vector<CItemData *,std::allocator<CItemData *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterBase\Singleton.h
;	COMDAT ?Instance@?$CSingleton@VCSoundManager@@@@SAAAVCSoundManager@@XZ
_TEXT	SEGMENT
?Instance@?$CSingleton@VCSoundManager@@@@SAAAVCSoundManager@@XZ PROC ; CSingleton<CSoundManager>::Instance, COMDAT

; 26   : 		assert(ms_singleton);
; 27   : 		return (*ms_singleton);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCSoundManager@@@@0PAVCSoundManager@@A ; CSingleton<CSoundManager>::ms_singleton

; 28   : 	}

  00005	c3		 ret	 0
?Instance@?$CSingleton@VCSoundManager@@@@SAAAVCSoundManager@@XZ ENDP ; CSingleton<CSoundManager>::Instance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?push_back@?$vector@KV?$allocator@K@std@@@std@@QAEXABK@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@KV?$allocator@K@std@@@std@@QAEXABK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::push_back, COMDAT
; _this$ = ecx

; 935  :     _CONSTEXPR20 void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 844  :         if (_Mylast != _My_data._Myend) {

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00009	74 0f		 je	 SHORT $LN4@push_back

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000e	8b 00		 mov	 eax, DWORD PTR [eax]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00012	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 936  :         _Emplace_one_at_back(_Val);
; 937  :     }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN4@push_back:

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0001a	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  0001d	52		 push	 edx
  0001e	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABK@?$vector@KV?$allocator@K@std@@@std@@AAEPAKQAKABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long const &>

; 936  :         _Emplace_one_at_back(_Val);
; 937  :     }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?push_back@?$vector@KV?$allocator@K@std@@@std@@QAEXABK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
;	COMDAT ??_G?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@UAEPAXI@Z PROC ; CDynamicPool<CPythonItem::SGroundItemInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 18   : 		{

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 19   : 			assert(m_kVct_pkData.empty());
; 20   : //#ifdef _DEBUG
; 21   : //			char szText[256];
; 22   : //			sprintf(szText, "--------------------------------------------------------------------- %s Pool Capacity %d\n", typeid(T).name(), m_uUsedCapacity);
; 23   : //			OutputDebugString(szText);
; 24   : //			printf(szText);			
; 25   : //#endif
; 26   : 		}

  00006	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@6B@
  0000f	e8 00 00 00 00	 call	 ??1?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::~vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >
  00014	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00017	e8 00 00 00 00	 call	 ??1?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::~vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >
  0001c	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00020	74 0b		 je	 SHORT $LN7@scalar
  00022	6a 24		 push	 36			; 00000024H
  00024	56		 push	 esi
  00025	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002a	83 c4 08	 add	 esp, 8
$LN7@scalar:
  0002d	8b c6		 mov	 eax, esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??_G?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@UAEPAXI@Z ENDP ; CDynamicPool<CPythonItem::SGroundItemInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00003	8b 45 08	 mov	 eax, DWORD PTR ___param0$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCPythonItem@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCPythonItem@@@@UAEPAXI@Z PROC		; CSingleton<CPythonItem>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{ 

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  0000a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonItem@@@@0PAVCPythonItem@@A, 0 ; CSingleton<CPythonItem>::ms_singleton
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCPythonItem@@@@6B@
  0001a	74 0b		 je	 SHORT $LN6@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCPythonItem@@@@UAEPAXI@Z ENDP		; CSingleton<CPythonItem>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00003	8b 45 08	 mov	 eax, DWORD PTR ___param0$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ?pointer_to@?$pointer_traits@PAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@2@AAU32@@Z
_TEXT	SEGMENT
?pointer_to@?$pointer_traits@PAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@2@AAU32@@Z PROC ; std::pointer_traits<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> *>::pointer_to, COMDAT
; __Val$ = ecx

; 268  :         return _STD addressof(_Val);

  00000	8b c1		 mov	 eax, ecx

; 269  :     }

  00002	c3		 ret	 0
?pointer_to@?$pointer_traits@PAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@2@AAU32@@Z ENDP ; std::pointer_traits<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator*, COMDAT
; _this$ = ecx

; 186  :         return this->_Ptr->_Myval;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 275  :         return const_cast<reference>(_Mybase::operator*());
; 276  :     }

  00005	c3		 ret	 0
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator++, COMDAT
; _this$ = ecx

; 193  :     _Tree_const_iterator& operator++() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 194  : #if _ITERATOR_DEBUG_LEVEL == 2
; 195  :         _STL_VERIFY(this->_Getcont(), "cannot increment value-initialized map/set iterator");
; 196  :         _STL_VERIFY(!this->_Ptr->_Isnil, "cannot increment end map/set iterator");
; 197  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 198  : 
; 199  :         _Mybase::operator++();

  00003	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++

; 200  :         return *this;

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 201  :     }

  0000b	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$dead$ = 12					; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 39   :         this->_Adopt(_Plist);
; 40   :     }

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEAAPAUSGroundItemInstance@CPythonItem@@XZ
_TEXT	SEGMENT
?back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEAAPAUSGroundItemInstance@CPythonItem@@XZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::back, COMDAT
; _this$ = ecx

; 2002 :         auto& _My_data = _Mypair._Myval2;
; 2003 : #if _CONTAINER_DEBUG_LEVEL > 0
; 2004 :         _STL_VERIFY(_My_data._Myfirst != _My_data._Mylast, "back() called on empty vector");
; 2005 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 2006 : 
; 2007 :         return _My_data._Mylast[-1];

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 e8 04	 sub	 eax, 4

; 2008 :     }

  00006	c3		 ret	 0
?back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEAAPAUSGroundItemInstance@CPythonItem@@XZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?size@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::size, COMDAT
; _this$ = ecx

; 1931 :         auto& _My_data = _Mypair._Myval2;
; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1933 :     }

  00008	c3		 ret	 0
?size@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?empty@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBE_NXZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::empty, COMDAT
; _this$ = ecx

; 1926 :         auto& _My_data = _Mypair._Myval2;
; 1927 :         return _My_data._Myfirst == _My_data._Mylast;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00005	0f 94 c0	 sete	 al

; 1928 :     }

  00008	c3		 ret	 0
?empty@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBE_NXZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?pop_back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXXZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::pop_back, COMDAT
; _this$ = ecx

; 1766 :         auto& _My_data   = _Mypair._Myval2;
; 1767 :         pointer& _Mylast = _My_data._Mylast;
; 1768 : 
; 1769 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1770 :         _STL_VERIFY(_My_data._Myfirst != _Mylast, "vector empty before pop");
; 1771 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1772 : 
; 1773 :         _Orphan_range(_Mylast - 1, _Mylast);
; 1774 :         _Alty_traits::destroy(_Getal(), _Unfancy(_Mylast - 1));
; 1775 :         _ASAN_VECTOR_MODIFY(-1);
; 1776 :         --_Mylast;

  00000	83 41 04 fc	 add	 DWORD PTR [ecx+4], -4	; fffffffcH

; 1777 :     }

  00004	c3		 ret	 0
?pop_back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXXZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::pop_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?push_back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXABQAUSGroundItemInstance@CPythonItem@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXABQAUSGroundItemInstance@CPythonItem@@@Z PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::push_back, COMDAT
; _this$ = ecx

; 935  :     _CONSTEXPR20 void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 844  :         if (_Mylast != _My_data._Myend) {

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00009	74 0f		 je	 SHORT $LN4@push_back

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000e	8b 00		 mov	 eax, DWORD PTR [eax]
  00010	89 02		 mov	 DWORD PTR [edx], eax

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00012	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 936  :         _Emplace_one_at_back(_Val);
; 937  :     }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN4@push_back:

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0001a	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  0001d	52		 push	 edx
  0001e	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEPAPAUSGroundItemInstance@CPythonItem@@QAPAU23@ABQAU23@@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_reallocate<CPythonItem::SGroundItemInstance * const &>

; 936  :         _Emplace_one_at_back(_Val);
; 937  :     }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?push_back@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXABQAUSGroundItemInstance@CPythonItem@@@Z ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::~vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN22@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN19@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN22@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2114 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 835  :     }

  0004a	c3		 ret	 0
$LN19@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@vector:
  00050	cc		 int	 3
??1?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::~vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??0?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >, COMDAT
; _this$ = ecx

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 674  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 675  :     }

  00006	8b c1		 mov	 eax, ecx

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 674  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 675  :     }

  00016	c3		 ret	 0
??0?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
;	COMDAT ?Destroy@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXXZ
_TEXT	SEGMENT
?Destroy@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXXZ PROC ; CDynamicPool<CPythonItem::SGroundItemInstance>::Destroy, COMDAT
; _this$ = ecx

; 38   : 		{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 39   : /*
; 40   : #ifdef _DEBUG
; 41   : 			if (!m_kVct_pkData.empty())
; 42   : 			{
; 43   : 				char szText[256];
; 44   : 				sprintf(szText, "--------------------------------------------------------------------- %s Pool Destroy\n", typeid(T).name());
; 45   : 				OutputDebugString(szText);
; 46   : 				printf(szText);
; 47   : 			}
; 48   : #endif			
; 49   : */
; 50   : 			for (auto v : m_kVct_pkData)

  00005	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  00008	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 14		 je	 SHORT $LN3@Destroy
  0000f	90		 npad	 1
$LL4@Destroy:

; 111  : 			delete pkData;

  00010	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00012	85 c9		 test	 ecx, ecx
  00014	74 06		 je	 SHORT $LN2@Destroy
  00016	8b 01		 mov	 eax, DWORD PTR [ecx]
  00018	6a 01		 push	 1
  0001a	ff 10		 call	 DWORD PTR [eax]
$LN2@Destroy:

; 39   : /*
; 40   : #ifdef _DEBUG
; 41   : 			if (!m_kVct_pkData.empty())
; 42   : 			{
; 43   : 				char szText[256];
; 44   : 				sprintf(szText, "--------------------------------------------------------------------- %s Pool Destroy\n", typeid(T).name());
; 45   : 				OutputDebugString(szText);
; 46   : 				printf(szText);
; 47   : 			}
; 48   : #endif			
; 49   : */
; 50   : 			for (auto v : m_kVct_pkData)

  0001c	83 c6 04	 add	 esi, 4
  0001f	3b f3		 cmp	 esi, ebx
  00021	75 ed		 jne	 SHORT $LL4@Destroy
$LN3@Destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00023	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00026	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  00029	74 03		 je	 SHORT $LN10@Destroy

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0002b	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN10@Destroy:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0002e	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00031	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00034	74 03		 je	 SHORT $LN13@Destroy

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00036	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN13@Destroy:
  00039	5f		 pop	 edi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h

; 54   : 		}

  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	c3		 ret	 0
?Destroy@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@QAEXXZ ENDP ; CDynamicPool<CPythonItem::SGroundItemInstance>::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Ptr$dead$ = 8						; size = 4
?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Orphan_ptr, COMDAT
; _this$dead$ = ecx

; 716  : #if _ITERATOR_DEBUG_LEVEL == 2
; 717  :         _Lockit _Lock(_LOCK_DEBUG);
; 718  :         _Iterator_base12** _Pnext = &this->_Myproxy->_Myfirstiter;
; 719  :         while (*_Pnext) {
; 720  :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;
; 721  :             if (_Pnextptr == _Myhead || (_Ptr != nullptr && _Pnextptr != _Ptr)) {
; 722  :                 _Pnext = &(*_Pnext)->_Mynextiter;
; 723  :             } else { // orphan the iterator
; 724  :                 (*_Pnext)->_Myproxy = nullptr;
; 725  :                 *_Pnext             = (*_Pnext)->_Mynextiter;
; 726  :             }
; 727  :         }
; 728  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 729  :         (void) _Ptr;
; 730  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 731  :     }

  00000	c2 04 00	 ret	 4
?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Orphan_ptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_scary@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Get_scary, COMDAT
; _this$ = ecx

; 1971 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00000	8b c1		 mov	 eax, ecx

; 1972 :     }

  00002	c3		 ret	 0
?_Get_scary@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_scary@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Get_scary, COMDAT
; _this$ = ecx

; 1967 :         return _STD addressof(_Mypair._Myval2._Myval2);

  00000	8b c1		 mov	 eax, ecx

; 1968 :     }

  00002	c3		 ret	 0
?_Get_scary@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1959 :         return _Mypair._Myval2._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 1960 :     }

  00002	c3		 ret	 0
?_Getal@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@K@1@@Z
_TEXT	SEGMENT
__Parg$dead$ = 8					; size = 4
??0?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@K@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >, COMDAT
; _this$ = ecx

; 882  :     _Tree(const key_compare& _Parg) : _Mypair(_One_then_variadic_args_t{}, _Parg, _Zero_then_variadic_args_t{}) {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00003	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0000b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0001a	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0001c	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0001f	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00022	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00028	89 06		 mov	 DWORD PTR [esi], eax

; 883  :         _Alloc_sentinel_and_proxy();
; 884  :     }

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	c2 04 00	 ret	 4
??0?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@K@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Tidy@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEXXZ PROC ; std::vector<CItemData *,std::allocator<CItemData *> >::_Tidy, COMDAT
; _this$ = ecx

; 2098 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2099 :         auto& _Al         = _Getal();
; 2100 :         auto& _My_data    = _Mypair._Myval2;
; 2101 :         pointer& _Myfirst = _My_data._Myfirst;
; 2102 :         pointer& _Mylast  = _My_data._Mylast;
; 2103 :         pointer& _Myend   = _My_data._Myend;
; 2104 : 
; 2105 :         _My_data._Orphan_all();
; 2106 : 
; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN2@Tidy

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN20@Tidy

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN17@Tidy

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN20@Tidy:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2114 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:

; 2116 :     }

  00049	5e		 pop	 esi
  0004a	c3		 ret	 0
$LN17@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@Tidy:
  00050	cc		 int	 3
?_Tidy@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEXXZ ENDP ; std::vector<CItemData *,std::allocator<CItemData *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator*, COMDAT
; _this$ = ecx

; 180  : #if _ITERATOR_DEBUG_LEVEL == 2
; 181  :         const auto _Mycont = static_cast<const _Mytree*>(this->_Getcont());
; 182  :         _STL_ASSERT(_Mycont, "cannot dereference value-initialized map/set iterator");
; 183  :         _STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot dereference end map/set iterator");
; 184  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 185  : 
; 186  :         return this->_Ptr->_Myval;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 187  :     }

  00005	c3		 ret	 0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 50   :     _Tree_unchecked_const_iterator& operator++() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN19@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN19@operator

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN19@operator:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())
; 58   :         } else {
; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 60   :         }
; 61   : 
; 62   :         return *this;

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 63   :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 453  :         while (!_Pnode->_Left->_Isnil) {

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN9@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL8@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 454  :             _Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL8@operator
$LN9@operator:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())
; 58   :         } else {
; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 60   :         }
; 61   : 
; 62   :         return *this;

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 63   :     }

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Getal@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Getal, COMDAT
; _this$ = ecx

; 2244 :         return _Mypair._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 2245 :     }

  00002	c3		 ret	 0
?_Getal@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEXPAPAUSGroundItemInstance@CPythonItem@@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEXPAPAUSGroundItemInstance@CPythonItem@@0@Z PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 2240 :     _CONSTEXPR20 void _Orphan_range(pointer, pointer) const {}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEXPAPAUSGroundItemInstance@CPythonItem@@0@Z ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Tidy@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEXXZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Tidy, COMDAT
; _this$ = ecx

; 2098 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2099 :         auto& _Al         = _Getal();
; 2100 :         auto& _My_data    = _Mypair._Myval2;
; 2101 :         pointer& _Myfirst = _My_data._Myfirst;
; 2102 :         pointer& _Mylast  = _My_data._Mylast;
; 2103 :         pointer& _Myend   = _My_data._Myend;
; 2104 : 
; 2105 :         _My_data._Orphan_all();
; 2106 : 
; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN2@Tidy

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN20@Tidy

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN17@Tidy

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN20@Tidy:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2114 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:

; 2116 :     }

  00049	5e		 pop	 esi
  0004a	c3		 ret	 0
$LN17@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@Tidy:
  00050	cc		 int	 3
?_Tidy@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEXXZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Unchecked_end@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ
_TEXT	SEGMENT
?_Unchecked_end@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1918 :         return _Mypair._Myval2._Mylast;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1919 :     }

  00003	c3		 ret	 0
?_Unchecked_end@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Unchecked_begin@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ
_TEXT	SEGMENT
?_Unchecked_begin@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Unchecked_begin, COMDAT
; _this$ = ecx

; 1910 :         return _Mypair._Myval2._Myfirst;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1911 :     }

  00002	c3		 ret	 0
?_Unchecked_begin@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?clear@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXXZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::clear, COMDAT
; _this$ = ecx

; 1825 :         auto& _My_data    = _Mypair._Myval2;
; 1826 :         pointer& _Myfirst = _My_data._Myfirst;
; 1827 :         pointer& _Mylast  = _My_data._Mylast;
; 1828 : 
; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00005	74 03		 je	 SHORT $LN1@clear

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00007	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN1@clear:

; 1840 :     }

  0000a	c3		 ret	 0
?clear@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEXXZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@KAXPAUSGroundItemInstance@CPythonItem@@@Z
_TEXT	SEGMENT
?Delete@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@KAXPAUSGroundItemInstance@CPythonItem@@@Z PROC ; CDynamicPool<CPythonItem::SGroundItemInstance>::Delete, COMDAT
; _pkData$ = ecx

; 111  : 			delete pkData;

  00000	85 c9		 test	 ecx, ecx
  00002	74 06		 je	 SHORT $LN3@Delete
  00004	8b 01		 mov	 eax, DWORD PTR [ecx]
  00006	6a 01		 push	 1
  00008	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 112  : 		}

  0000a	c3		 ret	 0
?Delete@?$CDynamicPool@USGroundItemInstance@CPythonItem@@@@KAXPAUSGroundItemInstance@CPythonItem@@@Z ENDP ; CDynamicPool<CPythonItem::SGroundItemInstance>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1384 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1385 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Alloc_sentinel_and_proxy, COMDAT
; _this$ = ecx

; 1937 :     void _Alloc_sentinel_and_proxy() {

  00000	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00001	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1937 :     void _Alloc_sentinel_and_proxy() {

  00003	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0000d	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0000f	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00012	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00015	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1938 :         const auto _Scary = _Get_scary();
; 1939 :         auto&& _Alproxy   = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());
; 1940 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);
; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0001b	89 06		 mov	 DWORD PTR [esi], eax
  0001d	5e		 pop	 esi

; 1942 :         _Proxy._Release();
; 1943 :     }

  0001e	c3		 ret	 0
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Alloc_sentinel_and_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Getal@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEAAV?$allocator@PAVCItemData@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEAAV?$allocator@PAVCItemData@@@2@XZ PROC ; std::vector<CItemData *,std::allocator<CItemData *> >::_Getal, COMDAT
; _this$ = ecx

; 2244 :         return _Mypair._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 2245 :     }

  00002	c3		 ret	 0
?_Getal@?$vector@PAVCItemData@@V?$allocator@PAVCItemData@@@std@@@std@@AAEAAV?$allocator@PAVCItemData@@@2@XZ ENDP ; std::vector<CItemData *,std::allocator<CItemData *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?deallocate@?$allocator@PAVCItemData@@@std@@QAEXQAPAVCItemData@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PAVCItemData@@@std@@QAEXQAPAVCItemData@@I@Z PROC ; std::allocator<CItemData *>::deallocate, COMDAT
; _this$dead$ = ecx

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000d	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00010	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00016	72 12		 jb	 SHORT $LN17@deallocate

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00018	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00020	83 c0 fc	 add	 eax, -4			; fffffffcH
  00023	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00026	77 10		 ja	 SHORT $LN14@deallocate

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00028	8b c2		 mov	 eax, edx
$LN17@deallocate:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002a	51		 push	 ecx
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00031	83 c4 08	 add	 esp, 8

; 831  :     }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
$LN14@deallocate:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00038	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
  0003d	cc		 int	 3
?deallocate@?$allocator@PAVCItemData@@@std@@QAEXQAPAVCItemData@@I@Z ENDP ; std::allocator<CItemData *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QAEAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QAEAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1384 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1385 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QAEAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?deallocate@?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAEXQAPAUSGroundItemInstance@CPythonItem@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAEXQAPAUSGroundItemInstance@CPythonItem@@I@Z PROC ; std::allocator<CPythonItem::SGroundItemInstance *>::deallocate, COMDAT
; _this$dead$ = ecx

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000d	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00010	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00016	72 12		 jb	 SHORT $LN17@deallocate

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00018	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00020	83 c0 fc	 add	 eax, -4			; fffffffcH
  00023	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00026	77 10		 ja	 SHORT $LN14@deallocate

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00028	8b c2		 mov	 eax, edx
$LN17@deallocate:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002a	51		 push	 ecx
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00031	83 c4 08	 add	 esp, 8

; 831  :     }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
$LN14@deallocate:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00038	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN20@deallocate:
  0003d	cc		 int	 3
?deallocate@?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAEXQAPAUSGroundItemInstance@CPythonItem@@I@Z ENDP ; std::allocator<CPythonItem::SGroundItemInstance *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Min, COMDAT
; __Pnode$ = ecx

; 453  :         while (!_Pnode->_Left->_Isnil) {

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00006	75 0d		 jne	 SHORT $LN9@Min
$LL2@Min:
  00008	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 454  :             _Pnode = _Pnode->_Left;

  0000a	8b c2		 mov	 eax, edx
  0000c	8b d1		 mov	 edx, ecx
  0000e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00012	74 f4		 je	 SHORT $LL2@Min

; 458  :     }

  00014	c3		 ret	 0
$LN9@Min:

; 455  :         }
; 456  : 
; 457  :         return _Pnode;

  00015	8b c1		 mov	 eax, ecx

; 458  :     }

  00017	c3		 ret	 0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PAVCItemData@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVCItemData@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@PAVCItemData@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVCItemData@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<CItemData *>,std::_Vector_val<std::_Simple_types<CItemData *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1384 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1385 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@PAVCItemData@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVCItemData@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<CItemData *>,std::_Vector_val<std::_Simple_types<CItemData *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 5185 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4750 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]

; 2301 :         return _BUF_SIZE <= _Myres;

  00006	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 4750 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  0000a	8b 50 10	 mov	 edx, DWORD PTR [eax+16]

; 2293 :         if (_Large_string_engaged()) {

  0000d	72 02		 jb	 SHORT $LN6@operator

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN6@operator:

; 4750 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00014	56		 push	 esi

; 2301 :         return _BUF_SIZE <= _Myres;

  00015	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 4750 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00019	8b 71 10	 mov	 esi, DWORD PTR [ecx+16]

; 2293 :         if (_Large_string_engaged()) {

  0001c	72 02		 jb	 SHORT $LN11@operator

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0001e	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN11@operator:

; 4750 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00020	52		 push	 edx
  00021	50		 push	 eax
  00022	56		 push	 esi
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
  00029	83 c4 10	 add	 esp, 16			; 00000010H

; 5186 :     return _Left._Equal(_Right);

  0002c	5e		 pop	 esi

; 5187 : }

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$make_pair@MH@std@@YA?AU?$pair@MH@0@$$QAM$$QAH@Z
_TEXT	SEGMENT
__Val2$ = 8						; size = 4
??$make_pair@MH@std@@YA?AU?$pair@MH@0@$$QAM$$QAH@Z PROC	; std::make_pair<float,int>, COMDAT
; ___$ReturnUdt$ = ecx
; __Val1$ = edx

; 443  :         is_nothrow_constructible_v<_Unrefwrap_t<_Ty2>, _Ty2>) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00003	8b 02		 mov	 eax, DWORD PTR [edx]
  00005	89 01		 mov	 DWORD PTR [ecx], eax
  00007	8b 45 08	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]
  0000c	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 444  :     // return pair composed from arguments
; 445  :     using _Mypair = pair<_Unrefwrap_t<_Ty1>, _Unrefwrap_t<_Ty2>>;
; 446  :     return _Mypair(_STD forward<_Ty1>(_Val1), _STD forward<_Ty2>(_Val2));

  0000f	8b c1		 mov	 eax, ecx

; 447  : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$make_pair@MH@std@@YA?AU?$pair@MH@0@$$QAM$$QAH@Z ENDP	; std::make_pair<float,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
;	COMDAT ??$sort@PAU?$pair@MH@std@@@std@@YAXQAU?$pair@MH@0@0@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
??$sort@PAU?$pair@MH@std@@@std@@YAXQAU?$pair@MH@0@0@Z PROC ; std::sort<std::pair<float,int> *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 7673 : _CONSTEXPR20 void sort(const _RanIt _First, const _RanIt _Last) { // order [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 7669 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  00006	8b c2		 mov	 eax, edx
  00008	c6 45 fc 00	 mov	 BYTE PTR $T1[ebp], 0
  0000c	ff 75 fc	 push	 DWORD PTR $T1[ebp]
  0000f	2b c1		 sub	 eax, ecx
  00011	c1 f8 03	 sar	 eax, 3
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,int> *,std::less<void> >
  0001a	83 c4 08	 add	 esp, 8

; 7674 :     _STD sort(_First, _Last, less<>{});
; 7675 : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$sort@PAU?$pair@MH@std@@@std@@YAXQAU?$pair@MH@0@0@Z ENDP ; std::sort<std::pair<float,int> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$?0AAKAAPAUSGroundItemInstance@CPythonItem@@$0A@@?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@QAE@AAKAAPAUSGroundItemInstance@CPythonItem@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAKAAPAUSGroundItemInstance@CPythonItem@@$0A@@?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@QAE@AAKAAPAUSGroundItemInstance@CPythonItem@@@Z PROC ; std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>::pair<unsigned long const ,CPythonItem::SGroundItemInstance *><unsigned long &,CPythonItem::SGroundItemInstance * &,0>, COMDAT
; _this$ = ecx

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 173  :     }

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAKAAPAUSGroundItemInstance@CPythonItem@@$0A@@?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@QAE@AAKAAPAUSGroundItemInstance@CPythonItem@@@Z ENDP ; std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>::pair<unsigned long const ,CPythonItem::SGroundItemInstance *><unsigned long &,CPythonItem::SGroundItemInstance * &,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
_TEXT	SEGMENT
__Loc$2 = -36						; size = 12
$T3 = -24						; size = 12
$T4 = -20						; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::insert<0,0>, COMDAT
; _this$ = ecx

; 1229 :     pair<iterator, bool> insert(value_type&& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  0002a	8b 5d 0c	 mov	 ebx, DWORD PTR __Val$[ebp]
  0002d	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  00030	53		 push	 ebx
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>
  00037	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003a	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0003e	66 0f d6 45 dc	 movq	 QWORD PTR __Loc$2[ebp], xmm0

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00043	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00047	75 0b		 jne	 SHORT $LN4@insert
  00049	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004b	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0004e	72 04		 jb	 SHORT $LN4@insert
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00050	32 d2		 xor	 dl, dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1003 :                 return {_Loc._Bound, false};

  00052	eb 51		 jmp	 SHORT $LN82@insert
$LN4@insert:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  00054	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  0005b	74 64		 je	 SHORT $LN97@insert

; 1007 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0005d	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0005f	89 7d ec	 mov	 DWORD PTR $T4[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00062	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00069	6a 18		 push	 24			; 00000018H

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0006b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  00072	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00077	8b 0b		 mov	 ecx, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00079	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0007c	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0007f	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00082	8b cf		 mov	 ecx, edi
  00084	50		 push	 eax
  00085	ff 75 e0	 push	 DWORD PTR __Loc$2[ebp+4]

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00088	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0008b	ff 75 dc	 push	 DWORD PTR __Loc$2[ebp]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0008e	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00090	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00093	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  00096	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0009c	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000a1	8b c8		 mov	 ecx, eax
  000a3	b2 01		 mov	 dl, 1
$LN82@insert:
  000a5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a8	89 08		 mov	 DWORD PTR [eax], ecx
  000aa	88 50 04	 mov	 BYTE PTR [eax+4], dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1232 :     }

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 08 00	 ret	 8
$LN97@insert:

; 1630 :             _Throw_tree_length_error();

  000c1	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN95@insert:
  000c6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::insert<0,0>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$erase@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@1@V21@@Z
_TEXT	SEGMENT
__Successor$1 = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
??$erase@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@1@V21@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::erase<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,0>, COMDAT
; _this$ = ecx

; 1319 :     iterator erase(iterator _Where) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 1285 :         _Unchecked_const_iterator _Successor = _Where;

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Where$[ebp]

; 1319 :     iterator erase(iterator _Where) noexcept /* strengthened */ {

  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 1285 :         _Unchecked_const_iterator _Successor = _Where;

  0000b	89 75 fc	 mov	 DWORD PTR __Successor$1[ebp], esi

; 1286 :         ++_Successor; // save successor iterator for return

  0000e	8d 4d fc	 lea	 ecx, DWORD PTR __Successor$1[ebp]
  00011	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++

; 1287 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  00016	56		 push	 esi
  00017	8b cf		 mov	 ecx, edi
  00019	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Extract
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0001e	6a 18		 push	 24			; 00000018H
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00026	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00029	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR __Successor$1[ebp]

; 1320 :         const auto _Scary = _Get_scary();
; 1321 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1322 :         _STL_VERIFY(_Where._Getcont() == _Scary, "map/set erase iterator from incorrect container");
; 1323 :         _STL_VERIFY(!_Where._Ptr->_Isnil, "cannot erase map/set end() iterator");
; 1324 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1325 :         return iterator(_Erase_unchecked(_Where._Unwrapped()), _Scary);

  0002f	5f		 pop	 edi

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00030	89 08		 mov	 DWORD PTR [eax], ecx

; 1320 :         const auto _Scary = _Get_scary();
; 1321 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1322 :         _STL_VERIFY(_Where._Getcont() == _Scary, "map/set erase iterator from incorrect container");
; 1323 :         _STL_VERIFY(!_Where._Ptr->_Isnil, "cannot erase map/set end() iterator");
; 1324 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1325 :         return iterator(_Erase_unchecked(_Where._Unwrapped()), _Scary);

  00032	5e		 pop	 esi

; 1326 :     }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
??$erase@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@$0A@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@1@V21@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::erase<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Find@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@ABK@Z
_TEXT	SEGMENT
__Loc$ = -12						; size = 12
__Keyval$ = 8						; size = 4
??$_Find@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find<unsigned long>, COMDAT
; _this$ = ecx

; 1366 :     _NODISCARD _Nodeptr _Find(const _Other& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00008	8b 7d 08	 mov	 edi, DWORD PTR __Keyval$[ebp]
  0000b	8d 45 f4	 lea	 eax, DWORD PTR __Loc$[ebp]
  0000e	57		 push	 edi
  0000f	50		 push	 eax
  00010	8b f1		 mov	 esi, ecx
  00012	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00017	8b 45 fc	 mov	 eax, DWORD PTR __Loc$[ebp+8]
  0001a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001e	75 07		 jne	 SHORT $LN2@Find
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00020	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00022	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00025	73 02		 jae	 SHORT $LN1@Find
$LN2@Find:

; 1368 :         if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {
; 1369 :             return _Loc._Bound;
; 1370 :         }
; 1371 : 
; 1372 :         return _Get_scary()->_Myhead;

  00027	8b 06		 mov	 eax, DWORD PTR [esi]
$LN1@Find:
  00029	5f		 pop	 edi

; 1373 :     }

  0002a	5e		 pop	 esi
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??$_Find@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@ABEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >, COMDAT
; _this$ = ecx

; 752  :     void _Erase_head(_Alnode& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 753  :         this->_Orphan_all();
; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	ff 70 04	 push	 DWORD PTR [eax+4]
  0000b	ff 75 08	 push	 DWORD PTR __Al$[ebp]
  0000e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00013	6a 18		 push	 24			; 00000018H
  00015	ff 36		 push	 DWORD PTR [esi]
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
  0001f	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 756  :     }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@PAVCItemData@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@PAVCItemData@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<CItemData *>,std::_Vector_val<std::_Simple_types<CItemData *> >,1>::_Compressed_pair<std::allocator<CItemData *>,std::_Vector_val<std::_Simple_types<CItemData *> >,1><>, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1376 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00006	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1376 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00016	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@PAVCItemData@@@std@@V?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<CItemData *>,std::_Vector_val<std::_Simple_types<CItemData *> >,1>::_Compressed_pair<std::allocator<CItemData *>,std::_Vector_val<std::_Simple_types<CItemData *> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_one_at_back@ABK@?$vector@KV?$allocator@K@std@@@std@@AAEAAKABK@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Emplace_one_at_back@ABK@?$vector@KV?$allocator@K@std@@@std@@AAEAAKABK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_one_at_back<unsigned long const &>, COMDAT
; _this$ = ecx

; 839  :     _CONSTEXPR20 _Ty& _Emplace_one_at_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b d1		 mov	 edx, ecx

; 840  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 841  :         auto& _My_data   = _Mypair._Myval2;
; 842  :         pointer& _Mylast = _My_data._Mylast;
; 843  : 
; 844  :         if (_Mylast != _My_data._Myend) {

  00005	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00008	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  0000b	74 14		 je	 SHORT $LN2@Emplace_on

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	89 01		 mov	 DWORD PTR [ecx], eax

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;

  00014	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 869  :         ++_Mylast;

  00017	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0001a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 849  :     }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN2@Emplace_on:

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);
; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00021	ff 75 08	 push	 DWORD PTR _<_Val_0>$[ebp]
  00024	51		 push	 ecx
  00025	8b ca		 mov	 ecx, edx
  00027	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABK@?$vector@KV?$allocator@K@std@@@std@@AAEPAKQAKABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long const &>

; 849  :     }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??$_Emplace_one_at_back@ABK@?$vector@KV?$allocator@K@std@@@std@@AAEAAKABK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_one_at_back<unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z
_TEXT	SEGMENT
??$addressof@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z PROC ; std::addressof<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >, COMDAT
; __Val$ = ecx

; 281  :     return __builtin_addressof(_Val);

  00000	8b c1		 mov	 eax, ecx

; 282  : }

  00002	c3		 ret	 0
??$addressof@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z ENDP ; std::addressof<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$_Unfancy@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@Z
_TEXT	SEGMENT
??$_Unfancy@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@Z PROC ; std::_Unfancy<CPythonItem::SGroundItemInstance *>, COMDAT
; __Ptr$ = ecx

; 294  :     return _Ptr;

  00000	8b c1		 mov	 eax, ecx

; 295  : }

  00002	c3		 ret	 0
??$_Unfancy@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@Z ENDP ; std::_Unfancy<CPythonItem::SGroundItemInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$destroy@PAUSGroundItemInstance@CPythonItem@@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@@Z
_TEXT	SEGMENT
??$destroy@PAUSGroundItemInstance@CPythonItem@@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@@Z PROC ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::destroy<CPythonItem::SGroundItemInstance *>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$dead$ = edx

; 686  : #if _HAS_CXX20
; 687  :         _STD destroy_at(_Ptr);
; 688  : #else // _HAS_CXX20
; 689  :         _Ptr->~_Uty();
; 690  : #endif // _HAS_CXX20
; 691  :     }

  00000	c2 00 00	 ret	 0
??$destroy@PAUSGroundItemInstance@CPythonItem@@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::destroy<CPythonItem::SGroundItemInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_one_at_back@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAPAUSGroundItemInstance@CPythonItem@@ABQAU23@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Emplace_one_at_back@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAPAUSGroundItemInstance@CPythonItem@@ABQAU23@@Z PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_one_at_back<CPythonItem::SGroundItemInstance * const &>, COMDAT
; _this$ = ecx

; 839  :     _CONSTEXPR20 _Ty& _Emplace_one_at_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b d1		 mov	 edx, ecx

; 840  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 841  :         auto& _My_data   = _Mypair._Myval2;
; 842  :         pointer& _Mylast = _My_data._Mylast;
; 843  : 
; 844  :         if (_Mylast != _My_data._Myend) {

  00005	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00008	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  0000b	74 14		 je	 SHORT $LN2@Emplace_on

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	89 01		 mov	 DWORD PTR [ecx], eax

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;

  00014	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 869  :         ++_Mylast;

  00017	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0001a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 849  :     }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN2@Emplace_on:

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);
; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00021	ff 75 08	 push	 DWORD PTR _<_Val_0>$[ebp]
  00024	51		 push	 ecx
  00025	8b ca		 mov	 ecx, edx
  00027	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEPAPAUSGroundItemInstance@CPythonItem@@QAPAU23@ABQAU23@@Z ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_reallocate<CPythonItem::SGroundItemInstance * const &>

; 849  :     }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??$_Emplace_one_at_back@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAPAUSGroundItemInstance@CPythonItem@@ABQAU23@@Z ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_one_at_back<CPythonItem::SGroundItemInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1>::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1><>, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1376 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00006	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1376 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00016	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1>::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@0@ABV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > const >, COMDAT
; __Val$ = ecx

; 281  :     return __builtin_addressof(_Val);

  00000	8b c1		 mov	 eax, ecx

; 282  : }

  00002	c3		 ret	 0
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >, COMDAT
; __Val$ = ecx

; 281  :     return __builtin_addressof(_Val);

  00000	8b c1		 mov	 eax, ecx

; 282  : }

  00002	c3		 ret	 0
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$?0ABU?$less@K@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@K@1@$$QAU_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$dead$ = 12					; size = 4
_<_Val2_0>$dead$ = 16					; size = 4
??$?0ABU?$less@K@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@K@1@$$QAU_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>,1>::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>,1><std::less<unsigned long> const &,std::_Zero_then_variadic_args_t>, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1381 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00006	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1381 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0000f	c2 0c 00	 ret	 12			; 0000000cH
??$?0ABU?$less@K@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@K@1@$$QAU_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>,1>::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>,1><std::less<unsigned long> const &,std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAVCItemData@@@std@@@std@@YAXPAPAVCItemData@@QAPAV1@AAV?$allocator@PAVCItemData@@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$allocator@PAVCItemData@@@std@@@std@@YAXPAPAVCItemData@@QAPAV1@AAV?$allocator@PAVCItemData@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CItemData *> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 944  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 945  :     using _Ty = typename _Alloc::value_type;
; 946  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 947  :         for (; _First != _Last; ++_First) {
; 948  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 949  :         }
; 950  :     }
; 951  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@PAVCItemData@@@std@@@std@@YAXPAPAVCItemData@@QAPAV1@AAV?$allocator@PAVCItemData@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CItemData *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAXPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAXPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CPythonItem::SGroundItemInstance *> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 944  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 945  :     using _Ty = typename _Alloc::value_type;
; 946  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 947  :         for (; _First != _Last; ++_First) {
; 948  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 949  :         }
; 950  :     }
; 951  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAXPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z PROC ; std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >, COMDAT
; __Al$dead$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00000	6a 18		 push	 24			; 00000018H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0000a	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0000c	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0000f	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00012	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 351  :         _Pnode->_Isnil = true;
; 352  :         return _Pnode;
; 353  :     }

  00018	c3		 ret	 0
??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Unwrapped@?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Unwrapped@?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Unwrapped, COMDAT
; _this$ = ecx

; 306  :     _NODISCARD _Tree_unchecked_iterator<_Mytree> _Unwrapped() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 307  :         return _Tree_unchecked_iterator<_Mytree>(this->_Ptr, static_cast<const _Mytree*>(this->_Getcont()));
; 308  :     }

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?_Unwrapped@?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QBE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >, COMDAT
; _this$ = ecx

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAE@XZ PROC ; std::allocator<CPythonItem::SGroundItemInstance *>::allocator<CPythonItem::SGroundItemInstance *>, COMDAT
; _this$ = ecx

; 819  :     constexpr allocator() noexcept {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAE@XZ ENDP ; std::allocator<CPythonItem::SGroundItemInstance *>::allocator<CPythonItem::SGroundItemInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@AAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
__Successor$ = -4					; size = 4
__Where$ = 8						; size = 4
?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@AAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Erase_unchecked, COMDAT
; _this$ = ecx

; 1283 :     _Nodeptr _Erase_unchecked(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 1284 :         const auto _Scary                    = _Get_scary();
; 1285 :         _Unchecked_const_iterator _Successor = _Where;

  00005	8b 75 08	 mov	 esi, DWORD PTR __Where$[ebp]
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	89 75 fc	 mov	 DWORD PTR __Successor$[ebp], esi

; 1286 :         ++_Successor; // save successor iterator for return

  0000e	8d 4d fc	 lea	 ecx, DWORD PTR __Successor$[ebp]
  00011	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++

; 1287 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  00016	56		 push	 esi
  00017	8b cf		 mov	 ecx, edi
  00019	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Extract
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0001e	6a 18		 push	 24			; 00000018H
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1290 :         return _Successor._Ptr; // return successor nodeptr

  00026	8b 45 fc	 mov	 eax, DWORD PTR __Successor$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00029	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1290 :         return _Successor._Ptr; // return successor nodeptr

  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi

; 1291 :     }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?_Erase_unchecked@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@AAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Erase_unchecked
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >::allocate, COMDAT
; _this$dead$ = ecx

; 77   :         return ::operator new(_Bytes);

  00000	6a 18		 push	 24			; 00000018H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 834  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 836  :     }

  0000a	c2 04 00	 ret	 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CItemData *> >::_Vector_val<std::_Simple_types<CItemData *> >, COMDAT
; _this$ = ecx

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@PAVCItemData@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CItemData *> >::_Vector_val<std::_Simple_types<CItemData *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0?$allocator@PAVCItemData@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAVCItemData@@@std@@QAE@XZ PROC		; std::allocator<CItemData *>::allocator<CItemData *>, COMDAT
; _this$ = ecx

; 819  :     constexpr allocator() noexcept {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@PAVCItemData@@@std@@QAE@XZ ENDP		; std::allocator<CItemData *>::allocator<CItemData *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal, COMDAT
; _this$ = ecx

; 4748 :     _CONSTEXPR20 bool _Equal(const basic_string& _Right) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4749 :         // compare [0, size()) with _Right for equality
; 4750 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	56		 push	 esi

; 2301 :         return _BUF_SIZE <= _Myres;

  00007	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 4749 :         // compare [0, size()) with _Right for equality
; 4750 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  0000b	8b 70 10	 mov	 esi, DWORD PTR [eax+16]

; 2293 :         if (_Large_string_engaged()) {

  0000e	72 02		 jb	 SHORT $LN4@Equal

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00010	8b 00		 mov	 eax, DWORD PTR [eax]
$LN4@Equal:

; 2301 :         return _BUF_SIZE <= _Myres;

  00012	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 4749 :         // compare [0, size()) with _Right for equality
; 4750 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00016	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]

; 2293 :         if (_Large_string_engaged()) {

  00019	72 02		 jb	 SHORT $LN9@Equal

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0001b	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN9@Equal:

; 4749 :         // compare [0, size()) with _Right for equality
; 4750 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  0001d	56		 push	 esi
  0001e	50		 push	 eax
  0001f	52		 push	 edx
  00020	51		 push	 ecx
  00021	e8 00 00 00 00	 call	 ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
  00026	83 c4 10	 add	 esp, 16			; 00000010H
  00029	5e		 pop	 esi

; 4751 :             _Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);
; 4752 :     }

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00003	8b 45 08	 mov	 eax, DWORD PTR ___param0$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
tv1038 = -16						; size = 4
$T1 = -12						; size = 4
tv1091 = -12						; size = 4
tv1075 = -12						; size = 4
tv1042 = -12						; size = 4
__Erasednode$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Extract, COMDAT
; _this$ = ecx

; 504  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 505  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Where$[ebp]
  0000a	56		 push	 esi
  0000b	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx

; 506  :         ++_Where; // save successor iterator for return

  0000e	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00011	57		 push	 edi
  00012	89 5d f8	 mov	 DWORD PTR __Erasednode$1$[ebp], ebx
  00015	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,std::_Iterator_base0>::operator++

; 507  : 
; 508  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 509  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 510  :         _Nodeptr _Pnode = _Erasednode;
; 511  : 
; 512  :         if (_Pnode->_Left->_Isnil) {

  0001a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0001c	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]
  0001f	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00023	75 18		 jne	 SHORT $LN86@Extract

; 513  :             _Fixnode = _Pnode->_Right; // stitch up right subtree
; 514  :         } else if (_Pnode->_Right->_Isnil) {

  00025	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00029	74 04		 je	 SHORT $LN7@Extract

; 515  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

  0002b	8b f8		 mov	 edi, eax

; 516  :         } else { // two subtrees, must lift successor node to replace erased

  0002d	eb 0e		 jmp	 SHORT $LN86@Extract
$LN7@Extract:

; 517  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

  0002f	8b 55 08	 mov	 edx, DWORD PTR __Where$[ebp]

; 518  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

  00032	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00035	3b d3		 cmp	 edx, ebx

; 519  :         }
; 520  : 
; 521  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

  00037	0f 85 95 00 00
	00		 jne	 $LN9@Extract
$LN86@Extract:

; 522  :             _Fixnodeparent = _Erasednode->_Parent;
; 523  :             if (!_Fixnode->_Isnil) {

  0003d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00041	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00044	75 03		 jne	 SHORT $LN11@Extract

; 524  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

  00046	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@Extract:

; 525  :             }
; 526  : 
; 527  :             if (_Myhead->_Parent == _Erasednode) {

  00049	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  0004c	8b 02		 mov	 eax, DWORD PTR [edx]
  0004e	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  00051	75 05		 jne	 SHORT $LN12@Extract

; 528  :                 _Myhead->_Parent = _Fixnode; // link down from root

  00053	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00056	eb 0b		 jmp	 SHORT $LN15@Extract
$LN12@Extract:

; 529  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

  00058	39 1e		 cmp	 DWORD PTR [esi], ebx
  0005a	75 04		 jne	 SHORT $LN14@Extract

; 530  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

  0005c	89 3e		 mov	 DWORD PTR [esi], edi

; 531  :             } else {

  0005e	eb 03		 jmp	 SHORT $LN15@Extract
$LN14@Extract:

; 532  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

  00060	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@Extract:

; 533  :             }
; 534  : 
; 535  :             if (_Myhead->_Left == _Erasednode) {

  00063	8b 02		 mov	 eax, DWORD PTR [edx]
  00065	89 45 f4	 mov	 DWORD PTR tv1075[ebp], eax
  00068	39 18		 cmp	 DWORD PTR [eax], ebx
  0006a	75 28		 jne	 SHORT $LN16@Extract

; 536  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0006c	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00070	74 04		 je	 SHORT $LN42@Extract
  00072	8b d6		 mov	 edx, esi
  00074	eb 19		 jmp	 SHORT $LN64@Extract
$LN42@Extract:

; 453  :         while (!_Pnode->_Left->_Isnil) {

  00076	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 536  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00078	8b d7		 mov	 edx, edi

; 453  :         while (!_Pnode->_Left->_Isnil) {

  0007a	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0007e	75 0f		 jne	 SHORT $LN64@Extract
$LL63@Extract:
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 454  :             _Pnode = _Pnode->_Left;

  00082	8b d1		 mov	 edx, ecx
  00084	8b c8		 mov	 ecx, eax
  00086	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008a	74 f4		 je	 SHORT $LL63@Extract
  0008c	8b 45 f4	 mov	 eax, DWORD PTR tv1075[ebp]
$LN64@Extract:

; 536  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0008f	89 10		 mov	 DWORD PTR [eax], edx
  00091	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
$LN16@Extract:

; 537  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 538  :             }
; 539  : 
; 540  :             if (_Myhead->_Right == _Erasednode) {

  00094	8b 02		 mov	 eax, DWORD PTR [edx]
  00096	39 58 08	 cmp	 DWORD PTR [eax+8], ebx
  00099	0f 85 a0 00 00
	00		 jne	 $LN47@Extract

; 541  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  0009f	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000a3	74 0a		 je	 SHORT $LN44@Extract
  000a5	8b ce		 mov	 ecx, esi
  000a7	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 542  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 543  :             }
; 544  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000aa	e9 90 00 00 00	 jmp	 $LN47@Extract
$LN44@Extract:

; 445  :         while (!_Pnode->_Right->_Isnil) {

  000af	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 541  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000b2	8b cf		 mov	 ecx, edi

; 445  :         while (!_Pnode->_Right->_Isnil) {

  000b4	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b8	75 11		 jne	 SHORT $LN68@Extract
  000ba	66 0f 1f 44 00
	00		 npad	 6
$LL67@Extract:

; 446  :             _Pnode = _Pnode->_Right;

  000c0	8b c8		 mov	 ecx, eax
  000c2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000c5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000c9	74 f5		 je	 SHORT $LL67@Extract
$LN68@Extract:
  000cb	8b 02		 mov	 eax, DWORD PTR [edx]

; 541  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000cd	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 542  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 543  :             }
; 544  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000d0	eb 6d		 jmp	 SHORT $LN47@Extract
$LN9@Extract:

; 545  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

  000d2	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 546  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down
; 547  : 
; 548  :             if (_Pnode == _Erasednode->_Right) {

  000d5	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
  000d8	8b 03		 mov	 eax, DWORD PTR [ebx]
  000da	89 02		 mov	 DWORD PTR [edx], eax
  000dc	89 4d f4	 mov	 DWORD PTR $T1[ebp], ecx
  000df	3b 53 08	 cmp	 edx, DWORD PTR [ebx+8]
  000e2	75 04		 jne	 SHORT $LN18@Extract

; 549  :                 _Fixnodeparent = _Pnode; // successor is next to erased

  000e4	8b f2		 mov	 esi, edx

; 550  :             } else { // successor further down, link in place of erased

  000e6	eb 1c		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 551  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's
; 552  :                 if (!_Fixnode->_Isnil) {

  000e8	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000ec	8b 31		 mov	 esi, DWORD PTR [ecx]
  000ee	75 03		 jne	 SHORT $LN20@Extract

; 553  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

  000f0	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@Extract:

; 554  :                 }
; 555  : 
; 556  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

  000f3	89 3e		 mov	 DWORD PTR [esi], edi

; 557  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

  000f5	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000f8	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 558  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

  000fb	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000fe	89 4d f4	 mov	 DWORD PTR $T1[ebp], ecx
  00101	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN19@Extract:

; 559  :             }
; 560  : 
; 561  :             if (_Myhead->_Parent == _Erasednode) {

  00104	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00107	8b 00		 mov	 eax, DWORD PTR [eax]
  00109	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  0010c	75 05		 jne	 SHORT $LN21@Extract

; 562  :                 _Myhead->_Parent = _Pnode; // link down from root

  0010e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00111	eb 0e		 jmp	 SHORT $LN94@Extract
$LN21@Extract:

; 563  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

  00113	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00116	39 18		 cmp	 DWORD PTR [eax], ebx
  00118	75 04		 jne	 SHORT $LN23@Extract

; 564  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

  0011a	89 10		 mov	 DWORD PTR [eax], edx

; 565  :             } else {

  0011c	eb 03		 jmp	 SHORT $LN94@Extract
$LN23@Extract:

; 566  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

  0011e	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN94@Extract:

; 567  :             }
; 568  : 
; 569  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  00121	b9 04 00 00 00	 mov	 ecx, 4
  00126	8b c3		 mov	 eax, ebx
  00128	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  0012b	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0012e	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

  00130	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]

; 101  :     _Left    = _STD move(_Right);

  00133	8a 43 0c	 mov	 al, BYTE PTR [ebx+12]
  00136	88 42 0c	 mov	 BYTE PTR [edx+12], al
  00139	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]

; 102  :     _Right   = _STD move(_Tmp);

  0013c	88 4b 0c	 mov	 BYTE PTR [ebx+12], cl
$LN47@Extract:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 573  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

  0013f	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  00143	0f 85 88 01 00
	00		 jne	 $LN25@Extract

; 574  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  00149	8b 02		 mov	 eax, DWORD PTR [edx]
  0014b	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  0014e	0f 84 79 01 00
	00		 je	 $LN3@Extract
  00154	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL4@Extract:
  00160	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  00164	89 75 f4	 mov	 DWORD PTR tv1091[ebp], esi
  00167	0f 85 5d 01 00
	00		 jne	 $LN93@Extract

; 575  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

  0016d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0016f	3b f9		 cmp	 edi, ecx
  00171	0f 85 c2 00 00
	00		 jne	 $LN26@Extract

; 576  :                     _Pnode = _Fixnodeparent->_Right;

  00177	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 577  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

  0017a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0017e	75 57		 jne	 SHORT $LN87@Extract

; 578  :                         _Pnode->_Color         = _Black;

  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00184	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 579  :                         _Fixnodeparent->_Color = _Red;

  00187	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  0018b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0018d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  00190	8b 01		 mov	 eax, DWORD PTR [ecx]
  00192	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00196	75 03		 jne	 SHORT $LN49@Extract

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00198	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN49@Extract:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  0019b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0019e	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  001a1	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001a4	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001a7	8b 00		 mov	 eax, DWORD PTR [eax]
  001a9	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  001ac	75 0c		 jne	 SHORT $LN50@Extract

; 471  :             _Myhead->_Parent = _Pnode;

  001ae	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001b1	89 31		 mov	 DWORD PTR [ecx], esi

; 479  :         _Wherenode->_Parent = _Pnode;

  001b3	89 0a		 mov	 DWORD PTR [edx], ecx

; 580  :                         _Lrotate(_Fixnodeparent);
; 581  :                         _Pnode = _Fixnodeparent->_Right;

  001b5	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001b8	eb 20		 jmp	 SHORT $LN80@Extract
$LN50@Extract:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001ba	8b 02		 mov	 eax, DWORD PTR [edx]
  001bc	3b 30		 cmp	 esi, DWORD PTR [eax]
  001be	75 0b		 jne	 SHORT $LN52@Extract

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 08		 mov	 DWORD PTR [eax], ecx

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c2	89 31		 mov	 DWORD PTR [ecx], esi

; 479  :         _Wherenode->_Parent = _Pnode;

  001c4	89 0a		 mov	 DWORD PTR [edx], ecx

; 580  :                         _Lrotate(_Fixnodeparent);
; 581  :                         _Pnode = _Fixnodeparent->_Right;

  001c6	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001c9	eb 0f		 jmp	 SHORT $LN80@Extract
$LN52@Extract:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001cb	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001ce	89 31		 mov	 DWORD PTR [ecx], esi

; 479  :         _Wherenode->_Parent = _Pnode;

  001d0	89 0a		 mov	 DWORD PTR [edx], ecx

; 580  :                         _Lrotate(_Fixnodeparent);
; 581  :                         _Pnode = _Fixnodeparent->_Right;

  001d2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001d5	eb 03		 jmp	 SHORT $LN80@Extract
$LN87@Extract:
  001d7	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN80@Extract:

; 582  :                     }
; 583  : 
; 584  :                     if (_Pnode->_Isnil) {

  001da	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001de	0f 85 d1 00 00
	00		 jne	 $LN2@Extract

; 585  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 586  :                     } else if (_Pnode->_Left->_Color == _Black
; 587  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

  001e4	8b 01		 mov	 eax, DWORD PTR [ecx]
  001e6	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001ea	75 0d		 jne	 SHORT $LN89@Extract
  001ec	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001ef	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001f3	0f 84 b8 00 00
	00		 je	 $LN95@Extract
$LN89@Extract:

; 588  :                         _Pnode->_Color = _Red;
; 589  :                         _Fixnode       = _Fixnodeparent;
; 590  :                     } else { // must rearrange right subtree
; 591  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

  001f9	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001fc	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00200	75 16		 jne	 SHORT $LN33@Extract

; 592  :                             _Pnode->_Left->_Color = _Black;

  00202	8b 01		 mov	 eax, DWORD PTR [ecx]

; 593  :                             _Pnode->_Color        = _Red;
; 594  :                             _Rrotate(_Pnode);

  00204	51		 push	 ecx
  00205	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00209	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  0020d	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00210	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Rrotate

; 595  :                             _Pnode = _Fixnodeparent->_Right;

  00215	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@Extract:

; 596  :                         }
; 597  : 
; 598  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  00218	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  0021b	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 599  :                         _Fixnodeparent->_Color = _Black;

  0021e	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 600  :                         _Pnode->_Right->_Color = _Black;

  00222	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 601  :                         _Lrotate(_Fixnodeparent);

  00225	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00228	56		 push	 esi
  00229	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0022d	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Lrotate

; 602  :                         break; // tree now recolored/rebalanced

  00232	8b d1		 mov	 edx, ecx
  00234	e9 91 00 00 00	 jmp	 $LN93@Extract
$LN26@Extract:

; 603  :                     }
; 604  :                 } else { // fixup right subtree
; 605  :                     _Pnode = _Fixnodeparent->_Left;
; 606  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

  00239	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0023d	75 58		 jne	 SHORT $LN88@Extract

; 607  :                         _Pnode->_Color         = _Black;

  0023f	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00243	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 608  :                         _Fixnodeparent->_Color = _Red;

  00245	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00249	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0024c	89 06		 mov	 DWORD PTR [esi], eax

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0024e	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00251	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00255	75 03		 jne	 SHORT $LN56@Extract

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00257	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN56@Extract:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  0025a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0025d	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00260	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  00263	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00266	8b 00		 mov	 eax, DWORD PTR [eax]
  00268	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0026b	75 0c		 jne	 SHORT $LN57@Extract

; 493  :             _Myhead->_Parent = _Pnode;

  0026d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00270	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 501  :         _Wherenode->_Parent = _Pnode;

  00273	89 0a		 mov	 DWORD PTR [edx], ecx

; 609  :                         _Rrotate(_Fixnodeparent);
; 610  :                         _Pnode = _Fixnodeparent->_Left;

  00275	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00277	eb 21		 jmp	 SHORT $LN79@Extract
$LN57@Extract:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00279	8b 02		 mov	 eax, DWORD PTR [edx]
  0027b	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0027e	75 0c		 jne	 SHORT $LN59@Extract

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00280	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00283	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 501  :         _Wherenode->_Parent = _Pnode;

  00286	89 0a		 mov	 DWORD PTR [edx], ecx

; 609  :                         _Rrotate(_Fixnodeparent);
; 610  :                         _Pnode = _Fixnodeparent->_Left;

  00288	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0028a	eb 0e		 jmp	 SHORT $LN79@Extract
$LN59@Extract:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  0028c	89 08		 mov	 DWORD PTR [eax], ecx

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  0028e	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 501  :         _Wherenode->_Parent = _Pnode;

  00291	89 0a		 mov	 DWORD PTR [edx], ecx

; 609  :                         _Rrotate(_Fixnodeparent);
; 610  :                         _Pnode = _Fixnodeparent->_Left;

  00293	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00295	eb 03		 jmp	 SHORT $LN79@Extract
$LN88@Extract:
  00297	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN79@Extract:

; 611  :                     }
; 612  : 
; 613  :                     if (_Pnode->_Isnil) {

  0029a	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0029e	75 15		 jne	 SHORT $LN2@Extract

; 614  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 615  :                     } else if (_Pnode->_Right->_Color == _Black
; 616  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

  002a0	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  002a3	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  002a7	75 3e		 jne	 SHORT $LN90@Extract
  002a9	8b 01		 mov	 eax, DWORD PTR [ecx]
  002ab	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  002af	75 36		 jne	 SHORT $LN90@Extract
$LN95@Extract:

; 574  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  002b1	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@Extract:
  002b5	8b 32		 mov	 esi, DWORD PTR [edx]
  002b7	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  002ba	8b 4d f4	 mov	 ecx, DWORD PTR tv1091[ebp]
  002bd	8b f9		 mov	 edi, ecx
  002bf	8b 02		 mov	 eax, DWORD PTR [edx]
  002c1	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  002c4	0f 85 96 fe ff
	ff		 jne	 $LL4@Extract
$LN93@Extract:

; 631  :                         break; // tree now recolored/rebalanced
; 632  :                     }
; 633  :                 }
; 634  :             }
; 635  : 
; 636  :             _Fixnode->_Color = _Black; // stopping node is black

  002ca	8b 5d f8	 mov	 ebx, DWORD PTR __Erasednode$1$[ebp]
$LN3@Extract:
  002cd	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@Extract:

; 637  :         }
; 638  : 
; 639  :         if (0 < _Mysize) {

  002d1	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  002d4	8b c3		 mov	 eax, ebx
  002d6	85 c9		 test	 ecx, ecx
  002d8	74 04		 je	 SHORT $LN40@Extract

; 640  :             --_Mysize;

  002da	49		 dec	 ecx
  002db	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN40@Extract:

; 641  :         }
; 642  : 
; 643  :         return _Erasednode;
; 644  :     }

  002de	5f		 pop	 edi
  002df	5e		 pop	 esi
  002e0	5b		 pop	 ebx
  002e1	8b e5		 mov	 esp, ebp
  002e3	5d		 pop	 ebp
  002e4	c2 04 00	 ret	 4
$LN90@Extract:

; 617  :                         _Pnode->_Color = _Red;
; 618  :                         _Fixnode       = _Fixnodeparent;
; 619  :                     } else { // must rearrange left subtree
; 620  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002e7	8b 01		 mov	 eax, DWORD PTR [ecx]
  002e9	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  002ed	75 13		 jne	 SHORT $LN39@Extract

; 621  :                             _Pnode->_Right->_Color = _Black;

  002ef	c6 43 0c 01	 mov	 BYTE PTR [ebx+12], 1

; 622  :                             _Pnode->_Color         = _Red;

  002f3	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 623  :                             _Lrotate(_Pnode);

  002f7	51		 push	 ecx
  002f8	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  002fb	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Lrotate

; 624  :                             _Pnode = _Fixnodeparent->_Left;

  00300	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN39@Extract:

; 625  :                         }
; 626  : 
; 627  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  00302	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  00305	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 628  :                         _Fixnodeparent->_Color = _Black;

  00308	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 629  :                         _Pnode->_Left->_Color  = _Black;

  0030c	8b 01		 mov	 eax, DWORD PTR [ecx]

; 630  :                         _Rrotate(_Fixnodeparent);

  0030e	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00311	56		 push	 esi
  00312	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00316	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Rrotate
  0031b	8b d1		 mov	 edx, ecx
  0031d	eb ab		 jmp	 SHORT $LN93@Extract
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Rrotate, COMDAT
; _this$ = ecx

; 482  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 493  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;
; 501  :         _Wherenode->_Parent = _Pnode;
; 502  :     }

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;
; 501  :         _Wherenode->_Parent = _Pnode;
; 502  :     }

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 496  :         } else {
; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;
; 501  :         _Wherenode->_Parent = _Pnode;
; 502  :     }

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Lrotate, COMDAT
; _this$ = ecx

; 460  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 471  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;
; 479  :         _Wherenode->_Parent = _Pnode;
; 480  :     }

  0002a	89 16		 mov	 DWORD PTR [esi], edx
  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;
; 479  :         _Wherenode->_Parent = _Pnode;
; 480  :     }

  0003d	89 16		 mov	 DWORD PTR [esi], edx
  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 474  :         } else {
; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;
; 479  :         _Wherenode->_Parent = _Pnode;
; 480  :     }

  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Max, COMDAT
; __Pnode$ = ecx

; 445  :         while (!_Pnode->_Right->_Isnil) {

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00007	75 13		 jne	 SHORT $LN9@Max
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@Max:

; 446  :             _Pnode = _Pnode->_Right;

  00010	8b c2		 mov	 eax, edx
  00012	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00015	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00019	74 f5		 je	 SHORT $LL2@Max

; 450  :     }

  0001b	c3		 ret	 0
$LN9@Max:

; 447  :         }
; 448  : 
; 449  :         return _Pnode;

  0001c	8b c1		 mov	 eax, ecx

; 450  :     }

  0001e	c3		 ret	 0
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1><>, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1376 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00006	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1376 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0000f	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$?0MH$0A@@?$pair@MH@std@@QAE@$$QAM$$QAH@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0MH$0A@@?$pair@MH@std@@QAE@$$QAM$$QAH@Z PROC	; std::pair<float,int>::pair<float,int><float,int,0>, COMDAT
; _this$ = ecx

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 173  :     }

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0MH$0A@@?$pair@MH@std@@QAE@$$QAM$$QAH@Z ENDP	; std::pair<float,int>::pair<float,int><float,int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
;	COMDAT ??$sort@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXQAU?$pair@MH@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
__Pred$ = 8						; size = 1
??$sort@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXQAU?$pair@MH@0@0U?$less@X@0@@Z PROC ; std::sort<std::pair<float,int> *,std::less<void> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 7665 : _CONSTEXPR20 void sort(const _RanIt _First, const _RanIt _Last, _Pr _Pred) { // order [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 7666 :     _Adl_verify_range(_First, _Last);
; 7667 :     const auto _UFirst = _Get_unwrapped(_First);
; 7668 :     const auto _ULast  = _Get_unwrapped(_Last);
; 7669 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  00004	ff 75 08	 push	 DWORD PTR __Pred$[ebp]
  00007	8b c2		 mov	 eax, edx
  00009	2b c1		 sub	 eax, ecx
  0000b	c1 f8 03	 sar	 eax, 3
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,int> *,std::less<void> >
  00014	83 c4 08	 add	 esp, 8

; 7670 : }

  00017	59		 pop	 ecx
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
??$sort@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXQAU?$pair@MH@0@0U?$less@X@0@@Z ENDP ; std::sort<std::pair<float,int> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAU?$pair@MH@std@@@std@@YA?A_TABQAU?$pair@MH@0@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABQAU?$pair@MH@std@@@std@@YA?A_TABQAU?$pair@MH@0@@Z PROC ; std::_Get_unwrapped<std::pair<float,int> * const &>, COMDAT
; __It$ = ecx

; 912  :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 913  :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 914  :         return _It + 0;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 915  :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 916  :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 917  :     } else {
; 918  :         return static_cast<_Iter&&>(_It);
; 919  :     }
; 920  : }

  00002	c3		 ret	 0
??$_Get_unwrapped@ABQAU?$pair@MH@std@@@std@@YA?A_TABQAU?$pair@MH@0@@Z ENDP ; std::_Get_unwrapped<std::pair<float,int> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@AAPAUSGroundItemInstance@CPythonItem@@@std@@YAAAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z
_TEXT	SEGMENT
??$forward@AAPAUSGroundItemInstance@CPythonItem@@@std@@YAAAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z PROC ; std::forward<CPythonItem::SGroundItemInstance * &>, COMDAT
; __Arg$ = ecx

; 1426 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1427 : }

  00002	c3		 ret	 0
??$forward@AAPAUSGroundItemInstance@CPythonItem@@@std@@YAAAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z ENDP ; std::forward<CPythonItem::SGroundItemInstance * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$move@AAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YA$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z
_TEXT	SEGMENT
??$move@AAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YA$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z PROC ; std::move<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> &>, COMDAT
; __Arg$ = ecx

; 1437 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1438 : }

  00002	c3		 ret	 0
??$move@AAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YA$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z ENDP ; std::move<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
_TEXT	SEGMENT
__Loc$ = -36						; size = 12
$T2 = -24						; size = 12
$T3 = -20						; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_<_Vals_0>$ = 12					; size = 4
??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Emplace<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >, COMDAT
; _this$ = ecx

; 994  :     pair<_Nodeptr, bool> _Emplace(_Valtys&&... _Vals) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 995  :         using _In_place_key_extractor = typename _Traits::template _In_place_key_extractor<_Remove_cvref_t<_Valtys>...>;
; 996  :         const auto _Scary             = _Get_scary();
; 997  :         _Tree_find_result<_Nodeptr> _Loc;
; 998  :         _Nodeptr _Inserted;
; 999  :         if constexpr (!_Multi && _In_place_key_extractor::_Extractable) {
; 1000 :             const auto& _Keyval = _In_place_key_extractor::_Extract(_Vals...);
; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  0002a	8b 5d 0c	 mov	 ebx, DWORD PTR _<_Vals_0>$[ebp]
  0002d	8d 45 e8	 lea	 eax, DWORD PTR $T2[ebp]
  00030	53		 push	 ebx
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>
  00037	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003a	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0003e	66 0f d6 45 dc	 movq	 QWORD PTR __Loc$[ebp], xmm0

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00043	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00047	75 24		 jne	 SHORT $LN2@Emplace
  00049	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004b	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0004e	72 1d		 jb	 SHORT $LN2@Emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00050	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00053	89 08		 mov	 DWORD PTR [eax], ecx
  00055	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1027 :     }

  00059	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 08 00	 ret	 8
$LN2@Emplace:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  0006d	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  00074	74 63		 je	 SHORT $LN86@Emplace

; 1002 :             if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {
; 1003 :                 return {_Loc._Bound, false};
; 1004 :             }
; 1005 : 
; 1006 :             _Check_grow_by_1();
; 1007 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  00076	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00078	89 7d ec	 mov	 DWORD PTR $T3[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0007b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00082	6a 18		 push	 24			; 00000018H

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00084	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  0008b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00090	8b 0b		 mov	 ecx, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00092	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00095	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  00098	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0009b	8b cf		 mov	 ecx, edi
  0009d	50		 push	 eax
  0009e	ff 75 e0	 push	 DWORD PTR __Loc$[ebp+4]

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  000a1	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000a4	ff 75 dc	 push	 DWORD PTR __Loc$[ebp]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  000a7	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000a9	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000ac	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  000af	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000b5	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000ba	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000bd	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000bf	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000c1	c6 41 04 01	 mov	 BYTE PTR [ecx+4], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1027 :     }

  000c5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cf	59		 pop	 ecx
  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c2 08 00	 ret	 8
$LN86@Emplace:

; 1630 :             _Throw_tree_length_error();

  000d9	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN84@Emplace:
  000de	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Emplace<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@AB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@1@AB_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@AB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@1@AB_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,bool const &,0>, COMDAT
; _this$ = ecx

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 173  :     }

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@AB_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@1@AB_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > >,bool const &,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1609 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1610 :         const auto _Scary = _Get_scary();
; 1611 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1614 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1616 :                 _Result._Location._Child = _Tree_child::_Right;
; 1617 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1618 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1619 :                 _Result._Location._Child = _Tree_child::_Left;
; 1620 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1621 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower

; 1622 :             }
; 1623 :         }
; 1624 : 
; 1625 :         return _Result;

  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1626 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Lower_bound_duplicate@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@ABK@Z
_TEXT	SEGMENT
__Bound$ = 8						; size = 4
__Keyval$ = 12						; size = 4
??$_Lower_bound_duplicate@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Lower_bound_duplicate<unsigned long>, COMDAT
; _this$dead$ = ecx

; 1604 :     bool _Lower_bound_duplicate(const _Nodeptr _Bound, const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Bound$[ebp]
  00006	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0000a	75 10		 jne	 SHORT $LN3@Lower_boun
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  0000c	8b 45 0c	 mov	 eax, DWORD PTR __Keyval$[ebp]
  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
  00011	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00014	72 06		 jb	 SHORT $LN3@Lower_boun
  00016	b0 01		 mov	 al, 1

; 1606 :     }

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
$LN3@Lower_boun:

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0001c	32 c0		 xor	 al, al

; 1606 :     }

  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
??$_Lower_bound_duplicate@K@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Lower_bound_duplicate<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$exchange@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@0@Z
_TEXT	SEGMENT
??$exchange@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@0@Z PROC ; std::exchange<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &>, COMDAT
; __Val$ = ecx
; __New_val$ = edx

; 652  :     // assign _New_val to _Val, return previous _Val
; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00002	8b 12		 mov	 edx, DWORD PTR [edx]
  00004	89 11		 mov	 DWORD PTR [ecx], edx

; 655  :     return _Old_val;
; 656  : }

  00006	c3		 ret	 0
??$exchange@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@0@Z ENDP ; std::exchange<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00000	6a 18		 push	 24			; 00000018H
  00002	52		 push	 edx
  00003	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00008	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 384  :     }

  0000b	c3		 ret	 0
??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00000	6a 18		 push	 24			; 00000018H
  00002	52		 push	 edx
  00003	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00008	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 377  :     }

  0000b	c3		 ret	 0
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABK@?$vector@KV?$allocator@K@std@@@std@@AAEAAKABK@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABK@?$vector@KV?$allocator@K@std@@@std@@AAEAAKABK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_back_with_unused_capacity<unsigned long const &>, COMDAT
; _this$ = ecx

; 852  :     _CONSTEXPR20 _Ty& _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 853  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 854  :         auto& _My_data   = _Mypair._Myval2;
; 855  :         pointer& _Mylast = _My_data._Mylast;
; 856  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 857  :         if constexpr (conjunction_v<is_nothrow_constructible<_Ty, _Valty...>,
; 858  :                           _Uses_default_construct<_Alloc, _Ty*, _Valty...>>) {
; 859  :             _ASAN_VECTOR_MODIFY(1);
; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	89 02		 mov	 DWORD PTR [edx], eax

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;

  0000d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 869  :         ++_Mylast;

  00010	8d 50 04	 lea	 edx, DWORD PTR [eax+4]
  00013	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 870  : 
; 871  :         return _Result;
; 872  :     }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@ABK@?$vector@KV?$allocator@K@std@@@std@@AAEAAKABK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_back_with_unused_capacity<unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABK@?$vector@KV?$allocator@K@std@@@std@@AAEPAKQAKABK@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
tv527 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABK@?$vector@KV?$allocator@K@std@@@std@@AAEPAKQAKABK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b 13		 mov	 edx, DWORD PTR [ebx]
  00010	2b c2		 sub	 eax, edx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	2b c2		 sub	 eax, edx
  0001d	c1 f8 02	 sar	 eax, 2

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 d2 00 00
	00		 je	 $LN82@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b ca		 sub	 ecx, edx

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 f9 02	 sar	 ecx, 2

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b d1		 mov	 edx, ecx
  00040	d1 ea		 shr	 edx, 1
  00042	2b c2		 sub	 eax, edx
  00044	3b c8		 cmp	 ecx, eax
  00046	76 17		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  00048	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004d	be ff ff ff 3f	 mov	 esi, 1073741823		; 3fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00058	83 c4 04	 add	 esp, 4
  0005b	8b f8		 mov	 edi, eax
  0005d	eb 44		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005f	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00062	8b f7		 mov	 esi, edi
  00064	3b c7		 cmp	 eax, edi
  00066	0f 43 f0	 cmovae	 esi, eax
  00069	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0006f	0f 87 8d 00 00
	00		 ja	 $LN83@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00075	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00081	72 0d		 jb	 SHORT $LN25@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00089	83 c4 04	 add	 esp, 4
  0008c	8b f8		 mov	 edi, eax
  0008e	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00090	85 c0		 test	 eax, eax
  00092	74 0d		 je	 SHORT $LN26@Emplace_re

; 77   :         return ::operator new(_Bytes);

  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0009a	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0009d	8b f8		 mov	 edi, eax
  0009f	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN26@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000a1	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a3	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000a6	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a9	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000ac	89 4d fc	 mov	 DWORD PTR tv527[ebp], ecx
  000af	8b 00		 mov	 eax, DWORD PTR [eax]
  000b1	89 01		 mov	 DWORD PTR [ecx], eax

; 900  :         _Constructed_first = _Newvec + _Whereoff;
; 901  : 
; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000b3	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000b6	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  000b9	8b 13		 mov	 edx, DWORD PTR [ebx]
  000bb	3b c8		 cmp	 ecx, eax
  000bd	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bf	8b cf		 mov	 ecx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 908  :         } else { // provide basic guarantee

  000c1	eb 17		 jmp	 SHORT $LN57@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c3	57		 push	 edi
  000c4	51		 push	 ecx
  000c5	52		 push	 edx
  000c6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z ; std::_Copy_memmove<unsigned long *,unsigned long *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000cb	8b 4d fc	 mov	 ecx, DWORD PTR tv527[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1793 :     const auto _ULast = _Get_unwrapped(_Last);

  000d1	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	83 c1 04	 add	 ecx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d7	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
$LN57@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000da	51		 push	 ecx
  000db	50		 push	 eax
  000dc	52		 push	 edx
  000dd	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z ; std::_Copy_memmove<unsigned long *,unsigned long *>
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000e5	8b cb		 mov	 ecx, ebx
  000e7	56		 push	 esi
  000e8	ff 75 f8	 push	 DWORD PTR __Newsize$1$[ebp]
  000eb	57		 push	 edi
  000ec	e8 00 00 00 00	 call	 ?_Change_array@?$vector@KV?$allocator@K@std@@@std@@AAEXQAKII@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Change_array

; 920  :         return _Newvec + _Whereoff;

  000f1	8b 45 fc	 mov	 eax, DWORD PTR tv527[ebp]
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx

; 921  :     }

  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 08 00	 ret	 8
$LN82@Emplace_re:

; 888  :             _Xlength();

  000fd	e8 00 00 00 00	 call	 ?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength
$LN83@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00102	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN80@Emplace_re:
  00107	cc		 int	 3
??$_Emplace_reallocate@ABK@?$vector@KV?$allocator@K@std@@@std@@AAEPAKQAKABK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$destroy_at@PAUSGroundItemInstance@CPythonItem@@@std@@YAXQAPAUSGroundItemInstance@CPythonItem@@@Z
_TEXT	SEGMENT
??$destroy_at@PAUSGroundItemInstance@CPythonItem@@@std@@YAXQAPAUSGroundItemInstance@CPythonItem@@@Z PROC ; std::destroy_at<CPythonItem::SGroundItemInstance *>, COMDAT
; __Location$dead$ = ecx

; 305  : #if _HAS_CXX20
; 306  :     if constexpr (is_array_v<_Ty>) {
; 307  :         _Destroy_range(_STD begin(*_Location), _STD end(*_Location));
; 308  :     } else
; 309  : #endif // _HAS_CXX20
; 310  :     {
; 311  :         _Location->~_Ty();
; 312  :     }
; 313  : }

  00000	c2 00 00	 ret	 0
??$destroy_at@PAUSGroundItemInstance@CPythonItem@@@std@@YAXQAPAUSGroundItemInstance@CPythonItem@@@Z ENDP ; std::destroy_at<CPythonItem::SGroundItemInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@ABQAUSGroundItemInstance@CPythonItem@@@std@@YAABQAUSGroundItemInstance@CPythonItem@@ABQAU12@@Z
_TEXT	SEGMENT
??$forward@ABQAUSGroundItemInstance@CPythonItem@@@std@@YAABQAUSGroundItemInstance@CPythonItem@@ABQAU12@@Z PROC ; std::forward<CPythonItem::SGroundItemInstance * const &>, COMDAT
; __Arg$ = ecx

; 1426 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1427 : }

  00002	c3		 ret	 0
??$forward@ABQAUSGroundItemInstance@CPythonItem@@@std@@YAABQAUSGroundItemInstance@CPythonItem@@ABQAU12@@Z ENDP ; std::forward<CPythonItem::SGroundItemInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAPAUSGroundItemInstance@CPythonItem@@ABQAU23@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAPAUSGroundItemInstance@CPythonItem@@ABQAU23@@Z PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_back_with_unused_capacity<CPythonItem::SGroundItemInstance * const &>, COMDAT
; _this$ = ecx

; 852  :     _CONSTEXPR20 _Ty& _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 853  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 854  :         auto& _My_data   = _Mypair._Myval2;
; 855  :         pointer& _Mylast = _My_data._Mylast;
; 856  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 857  :         if constexpr (conjunction_v<is_nothrow_constructible<_Ty, _Valty...>,
; 858  :                           _Uses_default_construct<_Alloc, _Ty*, _Valty...>>) {
; 859  :             _ASAN_VECTOR_MODIFY(1);
; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	89 02		 mov	 DWORD PTR [edx], eax

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;

  0000d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 869  :         ++_Mylast;

  00010	8d 50 04	 lea	 edx, DWORD PTR [eax+4]
  00013	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 870  : 
; 871  :         return _Result;
; 872  :     }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEAAPAUSGroundItemInstance@CPythonItem@@ABQAU23@@Z ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_back_with_unused_capacity<CPythonItem::SGroundItemInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEPAPAUSGroundItemInstance@CPythonItem@@QAPAU23@ABQAU23@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv655 = -8						; size = 4
tv672 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEPAPAUSGroundItemInstance@CPythonItem@@QAPAU23@ABQAU23@@Z PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_reallocate<CPythonItem::SGroundItemInstance * const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 16		 mov	 edx, DWORD PTR [esi]
  00010	2b da		 sub	 ebx, edx

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c2		 sub	 eax, edx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0b 01 00
	00		 je	 $LN106@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b ca		 sub	 ecx, edx

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 f9 02	 sar	 ecx, 2

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b d1		 mov	 edx, ecx
  0003d	d1 ea		 shr	 edx, 1
  0003f	2b c2		 sub	 eax, edx
  00041	3b c8		 cmp	 ecx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  0004b	89 45 fc	 mov	 DWORD PTR tv672[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0006a	0f 87 c8 00 00
	00		 ja	 $LN107@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00070	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00077	89 45 fc	 mov	 DWORD PTR tv672[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN25@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN26@Emplace_re

; 77   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN26@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 900  :         _Constructed_first = _Newvec + _Whereoff;
; 901  : 
; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a7	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000aa	89 4d f8	 mov	 DWORD PTR tv655[ebp], ecx
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	3b da		 cmp	 ebx, edx
  000b8	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000ba	8b c7		 mov	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 908  :         } else { // provide basic guarantee

  000bc	eb 16		 jmp	 SHORT $LN80@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000be	57		 push	 edi
  000bf	8b d3		 mov	 edx, ebx
  000c1	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@00@Z ; std::_Copy_memmove<CPythonItem::SGroundItemInstance * *,CPythonItem::SGroundItemInstance * *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000c6	8b 45 f8	 mov	 eax, DWORD PTR tv655[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c9	83 c4 04	 add	 esp, 4

; 1793 :     const auto _ULast = _Get_unwrapped(_Last);

  000cc	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000cf	83 c0 04	 add	 eax, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d2	8b cb		 mov	 ecx, ebx
$LN80@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@00@Z ; std::_Copy_memmove<CPythonItem::SGroundItemInstance * *,CPythonItem::SGroundItemInstance * *>

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000da	8b 06		 mov	 eax, DWORD PTR [esi]

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000dc	83 c4 04	 add	 esp, 4

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000df	85 c0		 test	 eax, eax
  000e1	74 2c		 je	 SHORT $LN38@Emplace_re

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e3	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000e6	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e8	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000eb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f1	72 12		 jb	 SHORT $LN50@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f3	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f6	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f9	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fb	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fe	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00101	77 2b		 ja	 SHORT $LN47@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00103	8b c2		 mov	 eax, edx
$LN50@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00105	51		 push	 ecx
  00106	50		 push	 eax
  00107	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010c	83 c4 08	 add	 esp, 8
$LN38@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0010f	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00112	89 3e		 mov	 DWORD PTR [esi], edi
  00114	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  00117	8b 45 f8	 mov	 eax, DWORD PTR tv655[ebp]

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0011a	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  0011d	8b 4d fc	 mov	 ecx, DWORD PTR tv672[ebp]
  00120	03 cf		 add	 ecx, edi

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  00122	5f		 pop	 edi

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00123	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  00126	5e		 pop	 esi
  00127	5b		 pop	 ebx

; 921  :     }

  00128	8b e5		 mov	 esp, ebp
  0012a	5d		 pop	 ebp
  0012b	c2 08 00	 ret	 8
$LN47@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN106@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 888  :             _Xlength();

  00133	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@CAXXZ ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Xlength
$LN107@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00138	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN104@Emplace_re:
  0013d	cc		 int	 3
??$_Emplace_reallocate@ABQAUSGroundItemInstance@CPythonItem@@@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEPAPAUSGroundItemInstance@CPythonItem@@QAPAU23@ABQAU23@@Z ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_reallocate<CPythonItem::SGroundItemInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * const &>, COMDAT
; __Obj$ = ecx
; _<_Args_0>$ = edx

; 225  : #if _HAS_CXX20
; 226  :     if (_STD is_constant_evaluated()) {
; 227  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 228  :     } else
; 229  : #endif // _HAS_CXX20
; 230  :     {
; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
; 232  :     }
; 233  : }

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	89 01		 mov	 DWORD PTR [ecx], eax
  00004	c3		 ret	 0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Extract@?$_In_place_key_extract_map@KU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAABKABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@2@@Z
_TEXT	SEGMENT
?_Extract@?$_In_place_key_extract_map@KU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAABKABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@2@@Z PROC ; std::_In_place_key_extract_map<unsigned long,std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >::_Extract, COMDAT
; __Val$ = ecx

; 1974 :         return _Val.first;

  00000	8b c1		 mov	 eax, ecx

; 1975 :     }

  00002	c3		 ret	 0
?_Extract@?$_In_place_key_extract_map@KU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAABKABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@2@@Z ENDP ; std::_In_place_key_extract_map<unsigned long,std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN14@Tree_temp_

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN14@Tree_temp_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 825  :     }

  00012	c3		 ret	 0
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Release, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00003	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1009 :     }

  0000a	c3		 ret	 0
?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@CAXXZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@CAXXZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Change_array@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEXQAPAUSGroundItemInstance@CPythonItem@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEXQAPAUSGroundItemInstance@CPythonItem@@II@Z PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Change_array, COMDAT
; _this$ = ecx

; 2076 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2077 :         // orphan all iterators, discard old array, acquire new array
; 2078 :         auto& _Al         = _Getal();
; 2079 :         auto& _My_data    = _Mypair._Myval2;
; 2080 :         pointer& _Myfirst = _My_data._Myfirst;
; 2081 :         pointer& _Mylast  = _My_data._Mylast;
; 2082 :         pointer& _Myend   = _My_data._Myend;
; 2083 : 
; 2084 :         _My_data._Orphan_all();
; 2085 : 
; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN8@Change_arr

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN20@Change_arr

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN17@Change_arr

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN20@Change_arr:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN8@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2092 :         _Myfirst = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 2096 :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN17@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@Change_arr:
  00059	cc		 int	 3
?_Change_array@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@AAEXQAPAUSGroundItemInstance@CPythonItem@@II@Z ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Calculate_growth@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEII@Z PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 2024 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	2b 11		 sub	 edx, DWORD PTR [ecx]

; 2025 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 2026 :         const size_type _Oldcapacity = capacity();
; 2027 :         const auto _Max              = max_size();
; 2028 : 
; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00008	b9 ff ff ff 3f	 mov	 ecx, 1073741823		; 3fffffffH

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0000d	c1 fa 02	 sar	 edx, 2

; 2024 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

  00010	56		 push	 esi

; 2025 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 2026 :         const size_type _Oldcapacity = capacity();
; 2027 :         const auto _Max              = max_size();
; 2028 : 
; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00011	8b f2		 mov	 esi, edx
  00013	d1 ee		 shr	 esi, 1
  00015	2b ce		 sub	 ecx, esi
  00017	3b d1		 cmp	 edx, ecx
  00019	76 0a		 jbe	 SHORT $LN2@Calculate_

; 2030 :             return _Max; // geometric growth would overflow

  0001b	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  00020	5e		 pop	 esi

; 2036 :             return _Newsize; // geometric growth would be insufficient
; 2037 :         }
; 2038 : 
; 2039 :         return _Geometric; // geometric growth is sufficient
; 2040 :     }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
$LN2@Calculate_:

; 2031 :         }
; 2032 : 
; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00025	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]

; 2034 : 
; 2035 :         if (_Geometric < _Newsize) {

  00028	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  0002b	5e		 pop	 esi
  0002c	0f 42 45 08	 cmovb	 eax, DWORD PTR __Newsize$[ebp]

; 2036 :             return _Newsize; // geometric growth would be insufficient
; 2037 :         }
; 2038 : 
; 2039 :         return _Geometric; // geometric growth is sufficient
; 2040 :     }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEII@Z ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?max_size@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::max_size, COMDAT
; _this$dead$ = ecx

; 1936 :         return (_STD min)(

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1937 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1938 :     }

  00005	c3		 ret	 0
?max_size@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?allocate@?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@I@Z PROC ; std::allocator<CPythonItem::SGroundItemInstance *>::allocate, COMDAT
; _this$dead$ = ecx

; 833  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   :         if (_Count > _Max_possible) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0000b	77 2e		 ja	 SHORT $LN16@allocate

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0000d	c1 e0 02	 shl	 eax, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00010	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00015	72 0d		 jb	 SHORT $LN9@allocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0001d	83 c4 04	 add	 esp, 4

; 834  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 836  :     }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN9@allocate:

; 234  :     if (_Bytes != 0) {

  00024	85 c0		 test	 eax, eax
  00026	74 0d		 je	 SHORT $LN10@allocate

; 77   :         return ::operator new(_Bytes);

  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002e	83 c4 04	 add	 esp, 4

; 834  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 836  :     }

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN10@allocate:

; 238  :     return nullptr;

  00035	33 c0		 xor	 eax, eax

; 834  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 836  :     }

  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
$LN16@allocate:

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0003b	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN14@allocate:
  00040	cc		 int	 3
?allocate@?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@I@Z ENDP ; std::allocator<CPythonItem::SGroundItemInstance *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN54@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN34@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN35@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN37@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN38@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN20@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN20@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN21@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN53@Insert_nod
$LN21@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN23@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN53@Insert_nod
$LN23@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN53@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN54@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN32@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN46@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN41@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN41@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN42@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN44@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN45@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN27@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN28@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN31@Insert_nod
$LN28@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN30@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN31@Insert_nod
$LN30@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN31@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN53@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN32@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >, COMDAT
; _this$ = ecx

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Getcomp@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEABU?$less@K@2@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEABU?$less@K@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 1955 :         return _Mypair._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 1956 :     }

  00002	c3		 ret	 0
?_Getcomp@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEABU?$less@K@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Check_grow_by_1, COMDAT
; _this$ = ecx

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  00000	81 79 04 aa aa
	aa 0a		 cmp	 DWORD PTR [ecx+4], 178956970 ; 0aaaaaaaH
  00007	0f 84 00 00 00
	00		 je	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error

; 1630 :             _Throw_tree_length_error();
; 1631 :         }
; 1632 :     }

  0000d	c3		 ret	 0
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Check_grow_by_1
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::deallocate, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 255  :         ::operator delete(_Ptr, _Bytes);

  00000	6a 18		 push	 24			; 00000018H
  00002	52		 push	 edx
  00003	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00008	83 c4 08	 add	 esp, 8

; 660  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 661  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 662  :         if (_STD is_constant_evaluated()) {
; 663  :             _Al.deallocate(_Ptr, _Count);
; 664  :         } else
; 665  : #endif // _HAS_CXX20
; 666  :         {
; 667  :             (void) _Al;
; 668  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);
; 669  :         }
; 670  :     }

  0000b	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >, COMDAT
; _this$ = ecx

; 819  :     constexpr allocator() noexcept {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Tree_temp_

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Tree_temp_:
  00012	c3		 ret	 0
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1018 :             _Al.deallocate(_Ptr, 1);
; 1019 :         }
; 1020 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Getal@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Getal, COMDAT
; _this$ = ecx

; 2248 :         return _Mypair._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 2249 :     }

  00002	c3		 ret	 0
?_Getal@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@ABEABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?capacity@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ PROC ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::capacity, COMDAT
; _this$ = ecx

; 1941 :         auto& _My_data = _Mypair._Myval2;
; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1943 :     }

  00008	c3		 ret	 0
?capacity@?$vector@PAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QBEIXZ ENDP ; std::vector<CPythonItem::SGroundItemInstance *,std::allocator<CPythonItem::SGroundItemInstance *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAIABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@@Z
_TEXT	SEGMENT
?max_size@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAIABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::max_size, COMDAT
; ___formal$dead$ = ecx

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 695  :     }

  00005	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAIABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@K@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@K@2@XZ PROC ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 1388 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1389 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$less@K@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@K@2@XZ ENDP ; std::_Compressed_pair<std::less<unsigned long>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::max_size, COMDAT
; _this$dead$ = ecx

; 1197 :         return (_STD min)(

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1198 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alnode_traits::max_size(_Getal()));
; 1199 :     }

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$dead$ = 12					; size = 4
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >::deallocate, COMDAT
; _this$dead$ = ecx

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 255  :         ::operator delete(_Ptr, _Bytes);

  00003	6a 18		 push	 24			; 00000018H
  00005	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00008	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);
; 831  :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QBEABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QBEABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1388 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1389 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@V?$_Vector_val@U?$_Simple_types@PAUSGroundItemInstance@CPythonItem@@@std@@@2@$00@std@@QBEABV?$allocator@PAUSGroundItemInstance@CPythonItem@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<CPythonItem::SGroundItemInstance *>,std::_Vector_val<std::_Simple_types<CPythonItem::SGroundItemInstance *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1963 :         return _Mypair._Myval2._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 1964 :     }

  00002	c3		 ret	 0
?_Getal@?$_Tree@V?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@@Z
_TEXT	SEGMENT
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::max_size, COMDAT
; ___formal$dead$ = ecx

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 695  :     }

  00005	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1388 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1389 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Adl_verify_range@PAU?$pair@MH@std@@PAU12@@std@@YAXABQAU?$pair@MH@0@0@Z
_TEXT	SEGMENT
??$_Adl_verify_range@PAU?$pair@MH@std@@PAU12@@std@@YAXABQAU?$pair@MH@0@0@Z PROC ; std::_Adl_verify_range<std::pair<float,int> *,std::pair<float,int> *>, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 889  :     // check that [_First, _Last) forms an iterator range
; 890  :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 891  :         _Verify_range(_First, _Last);
; 892  :     }
; 893  : }

  00000	c2 00 00	 ret	 0
??$_Adl_verify_range@PAU?$pair@MH@std@@PAU12@@std@@YAXABQAU?$pair@MH@0@0@Z ENDP ; std::_Adl_verify_range<std::pair<float,int> *,std::pair<float,int> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Pass_fn@U?$less@X@std@@$0A@@std@@YA?AU?$less@X@0@U10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 1
??$_Pass_fn@U?$less@X@std@@$0A@@std@@YA?AU?$less@X@0@U10@@Z PROC ; std::_Pass_fn<std::less<void>,0>, COMDAT

; 334  : constexpr _Fn _Pass_fn(_Fn _Val) { // pass functor by value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 335  :     return _Val;

  00003	8a 45 08	 mov	 al, BYTE PTR __Val$[ebp]

; 336  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Pass_fn@U?$less@X@std@@$0A@@std@@YA?AU?$less@X@0@U10@@Z ENDP ; std::_Pass_fn<std::less<void>,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0HU?$less@X@0@@Z
_TEXT	SEGMENT
__Val$1 = -16						; size = 8
__Mid$2 = -8						; size = 8
tv307 = -4						; size = 4
__Ideal$ = 8						; size = 4
__Pred$ = 12						; size = 1
??$_Sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0HU?$less@X@0@@Z PROC ; std::_Sort_unchecked<std::pair<float,int> *,std::less<void> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 7635 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b da		 mov	 ebx, edx
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 7636 :     // order [_First, _Last)
; 7637 :     for (;;) {
; 7638 :         if (_Last - _First <= _ISORT_MAX) { // small

  0000d	8b c3		 mov	 eax, ebx
  0000f	2b c7		 sub	 eax, edi
  00011	83 e0 f8	 and	 eax, -8			; fffffff8H
  00014	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00019	8b 45 0c	 mov	 eax, DWORD PTR __Pred$[ebp]
  0001c	7e 67		 jle	 SHORT $LN25@Sort_unche
  0001e	8b 75 08	 mov	 esi, DWORD PTR __Ideal$[ebp]
$LL2@Sort_unche:

; 7640 :             return;
; 7641 :         }
; 7642 : 
; 7643 :         if (_Ideal <= 0) { // heap sort if too many divisions

  00021	50		 push	 eax
  00022	85 f6		 test	 esi, esi
  00024	7e 73		 jle	 SHORT $LN26@Sort_unche

; 7645 :             _Sort_heap_unchecked(_First, _Last, _Pred);
; 7646 :             return;
; 7647 :         }
; 7648 : 
; 7649 :         // divide and conquer by quicksort
; 7650 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);

  00026	53		 push	 ebx
  00027	8b d7		 mov	 edx, edi
  00029	8d 4d f8	 lea	 ecx, DWORD PTR __Mid$2[ebp]
  0002c	e8 00 00 00 00	 call	 ??$_Partition_by_median_guess_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MH@std@@PAU12@@0@PAU?$pair@MH@0@0U?$less@X@0@@Z ; std::_Partition_by_median_guess_unchecked<std::pair<float,int> *,std::less<void> >

; 7651 : 
; 7652 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions
; 7653 : 
; 7654 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

  00031	8b 55 f8	 mov	 edx, DWORD PTR __Mid$2[ebp]
  00034	8b c6		 mov	 eax, esi
  00036	c1 f8 02	 sar	 eax, 2
  00039	8b cb		 mov	 ecx, ebx
  0003b	2b 4d fc	 sub	 ecx, DWORD PTR __Mid$2[ebp+4]
  0003e	83 c4 08	 add	 esp, 8
  00041	d1 fe		 sar	 esi, 1
  00043	83 e1 f8	 and	 ecx, -8			; fffffff8H
  00046	03 f0		 add	 esi, eax
  00048	8b c2		 mov	 eax, edx
  0004a	2b c7		 sub	 eax, edi
  0004c	83 e0 f8	 and	 eax, -8			; fffffff8H
  0004f	3b c1		 cmp	 eax, ecx
  00051	8b 45 0c	 mov	 eax, DWORD PTR __Pred$[ebp]
  00054	50		 push	 eax
  00055	56		 push	 esi
  00056	7d 0c		 jge	 SHORT $LN7@Sort_unche

; 7655 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

  00058	8b cf		 mov	 ecx, edi
  0005a	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,int> *,std::less<void> >

; 7656 :             _First = _Mid.second;

  0005f	8b 7d fc	 mov	 edi, DWORD PTR __Mid$2[ebp+4]

; 7657 :         } else { // loop on first half

  00062	eb 0d		 jmp	 SHORT $LN34@Sort_unche
$LN7@Sort_unche:

; 7658 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

  00064	8b 4d fc	 mov	 ecx, DWORD PTR __Mid$2[ebp+4]
  00067	8b d3		 mov	 edx, ebx
  00069	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0HU?$less@X@0@@Z ; std::_Sort_unchecked<std::pair<float,int> *,std::less<void> >

; 7659 :             _Last = _Mid.first;

  0006e	8b 5d f8	 mov	 ebx, DWORD PTR __Mid$2[ebp]
$LN34@Sort_unche:

; 7636 :     // order [_First, _Last)
; 7637 :     for (;;) {
; 7638 :         if (_Last - _First <= _ISORT_MAX) { // small

  00071	8b c3		 mov	 eax, ebx
  00073	83 c4 08	 add	 esp, 8
  00076	2b c7		 sub	 eax, edi
  00078	83 e0 f8	 and	 eax, -8			; fffffff8H
  0007b	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00080	8b 45 0c	 mov	 eax, DWORD PTR __Pred$[ebp]
  00083	7f 9c		 jg	 SHORT $LL2@Sort_unche
$LN25@Sort_unche:

; 7639 :             _Insertion_sort_unchecked(_First, _Last, _Pred);

  00085	50		 push	 eax
  00086	8b d3		 mov	 edx, ebx
  00088	8b cf		 mov	 ecx, edi
  0008a	e8 00 00 00 00	 call	 ??$_Insertion_sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAPAU?$pair@MH@0@QAU10@0U?$less@X@0@@Z ; std::_Insertion_sort_unchecked<std::pair<float,int> *,std::less<void> >
  0008f	83 c4 04	 add	 esp, 4
$LN12@Sort_unche:

; 7660 :         }
; 7661 :     }
; 7662 : }

  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
$LN26@Sort_unche:

; 7644 :             _Make_heap_unchecked(_First, _Last, _Pred);

  00099	8b d3		 mov	 edx, ebx
  0009b	8b cf		 mov	 ecx, edi
  0009d	e8 00 00 00 00	 call	 ??$_Make_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z ; std::_Make_heap_unchecked<std::pair<float,int> *,std::less<void> >

; 6416 :     for (; _Last - _First >= 2; --_Last) {

  000a2	8b d3		 mov	 edx, ebx

; 7644 :             _Make_heap_unchecked(_First, _Last, _Pred);

  000a4	83 c4 04	 add	 esp, 4

; 6416 :     for (; _Last - _First >= 2; --_Last) {

  000a7	2b d7		 sub	 edx, edi
  000a9	8b c2		 mov	 eax, edx
  000ab	83 e0 f8	 and	 eax, -8			; fffffff8H
  000ae	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b1	7c df		 jl	 SHORT $LN12@Sort_unche

; 7644 :             _Make_heap_unchecked(_First, _Last, _Pred);

  000b3	83 c3 f8	 add	 ebx, -8			; fffffff8H
  000b6	83 c2 f8	 add	 edx, -8			; fffffff8H
  000b9	89 55 fc	 mov	 DWORD PTR tv307[ebp], edx
  000bc	0f 1f 40 00	 npad	 4
$LL13@Sort_unche:

; 6071 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  000c0	8b 03		 mov	 eax, DWORD PTR [ebx]

; 6062 :     _Pop_heap_hole_by_index(

  000c2	8b f2		 mov	 esi, edx

; 6071 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  000c4	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]

; 6062 :     _Pop_heap_hole_by_index(

  000c7	ff 75 0c	 push	 DWORD PTR __Pred$[ebp]

; 6071 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  000ca	89 45 f0	 mov	 DWORD PTR __Val$1[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 253  :         first  = _STD forward<_Ty1>(_Right.first);

  000cd	8b 07		 mov	 eax, DWORD PTR [edi]
  000cf	89 03		 mov	 DWORD PTR [ebx], eax

; 254  :         second = _STD forward<_Ty2>(_Right.second);

  000d1	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000d4	89 44 3a 04	 mov	 DWORD PTR [edx+edi+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 6062 :     _Pop_heap_hole_by_index(

  000d8	8d 45 f0	 lea	 eax, DWORD PTR __Val$1[ebp]
  000db	50		 push	 eax

; 6071 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  000dc	89 4d f4	 mov	 DWORD PTR __Val$1[ebp+4], ecx

; 6062 :     _Pop_heap_hole_by_index(

  000df	33 d2		 xor	 edx, edx
  000e1	c1 fe 03	 sar	 esi, 3
  000e4	8b cf		 mov	 ecx, edi
  000e6	56		 push	 esi
  000e7	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<std::pair<float,int> *,std::pair<float,int>,std::less<void> >

; 6416 :     for (; _Last - _First >= 2; --_Last) {

  000ec	8b 55 fc	 mov	 edx, DWORD PTR tv307[ebp]
  000ef	8d 5b f8	 lea	 ebx, DWORD PTR [ebx-8]
  000f2	83 ea 08	 sub	 edx, 8

; 6062 :     _Pop_heap_hole_by_index(

  000f5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6416 :     for (; _Last - _First >= 2; --_Last) {

  000f8	89 55 fc	 mov	 DWORD PTR tv307[ebp], edx
  000fb	83 fe 02	 cmp	 esi, 2
  000fe	7d c0		 jge	 SHORT $LL13@Sort_unche

; 7660 :         }
; 7661 :     }
; 7662 : }

  00100	5f		 pop	 edi
  00101	5e		 pop	 esi
  00102	5b		 pop	 ebx
  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c3		 ret	 0
??$_Sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0HU?$less@X@0@@Z ENDP ; std::_Sort_unchecked<std::pair<float,int> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YA$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z
_TEXT	SEGMENT
??$forward@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YA$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z PROC ; std::forward<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >, COMDAT
; __Arg$ = ecx

; 1426 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1427 : }

  00002	c3		 ret	 0
??$forward@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YA$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@AAU10@@Z ENDP ; std::forward<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al_$ = 8						; size = 4
__Myhead$ = 12						; size = 4
_<_Vals_0>$ = 16					; size = 4
??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > ><std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >, COMDAT
; _this$ = ecx

; 806  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00029	8b 45 08	 mov	 eax, DWORD PTR __Al_$[ebp]
  0002c	89 06		 mov	 DWORD PTR [esi], eax
  0002e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0003c	6a 18		 push	 24			; 00000018H

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0003e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 77   :         return ::operator new(_Bytes);

  00045	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0004a	8b 4d 10	 mov	 ecx, DWORD PTR _<_Vals_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0004d	83 c4 04	 add	 esp, 4

; 1013 :         _Ptr = _Al.allocate(1);

  00050	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00053	8b 11		 mov	 edx, DWORD PTR [ecx]
  00055	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00058	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0005b	8b 4d 0c	 mov	 ecx, DWORD PTR __Myhead$[ebp]
  0005e	89 50 10	 mov	 DWORD PTR [eax+16], edx
  00061	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00064	89 08		 mov	 DWORD PTR [eax], ecx

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00066	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00069	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0006c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0006f	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 811  :         this->_Ptr->_Color = _Red;

  00072	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00075	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 812  :         this->_Ptr->_Isnil = false;

  00079	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0007c	c6 40 0d 00	 mov	 BYTE PTR [eax+13], 0

; 813  :     }

  00080	8b c6		 mov	 eax, esi
  00082	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00085	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008c	59		 pop	 ecx
  0008d	5e		 pop	 esi
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z$1:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > ><std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$?0AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@std@@QAE@AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@std@@QAE@AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QA_N@Z PROC ; std::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool>::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool><std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &,bool,0>, COMDAT
; _this$ = ecx

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 173  :     }

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@std@@QAE@AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool>::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool><std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &,bool,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$?0PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QA_N@Z PROC ; std::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool>::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool><std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool,0>, COMDAT
; _this$ = ecx

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 173  :     }

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool>::pair<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool><std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,bool,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > > >, COMDAT
; __Arg$ = ecx

; 1426 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1427 : }

  00002	c3		 ret	 0
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
;	COMDAT ??$_Kfn@$$CBKPAUSGroundItemInstance@CPythonItem@@@?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@SAABKABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
_TEXT	SEGMENT
??$_Kfn@$$CBKPAUSGroundItemInstance@CPythonItem@@@?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@SAABKABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z PROC ; std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0>::_Kfn<unsigned long const ,CPythonItem::SGroundItemInstance *>, COMDAT
; __Val$ = ecx

; 68   :         return _Val.first;

  00000	8b c1		 mov	 eax, ecx

; 69   :     }

  00002	c3		 ret	 0
??$_Kfn@$$CBKPAUSGroundItemInstance@CPythonItem@@@?$_Tmap_traits@KPAUSGroundItemInstance@CPythonItem@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@4@$0A@@std@@SAABKABU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z ENDP ; std::_Tmap_traits<unsigned long,CPythonItem::SGroundItemInstance *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >,0>::_Kfn<unsigned long const ,CPythonItem::SGroundItemInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$destroy@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z
_TEXT	SEGMENT
??$destroy@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::destroy<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >, COMDAT
; ___formal$dead$ = ecx
; __Ptr$dead$ = edx

; 686  : #if _HAS_CXX20
; 687  :         _STD destroy_at(_Ptr);
; 688  : #else // _HAS_CXX20
; 689  :         _Ptr->~_Uty();
; 690  : #endif // _HAS_CXX20
; 691  :     }

  00000	c2 00 00	 ret	 0
??$destroy@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::destroy<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@@Z
_TEXT	SEGMENT
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *>, COMDAT
; __Obj$dead$ = ecx

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Construct_in_place@KABK@std@@YAXAAKABK@Z
_TEXT	SEGMENT
??$_Construct_in_place@KABK@std@@YAXAAKABK@Z PROC	; std::_Construct_in_place<unsigned long,unsigned long const &>, COMDAT
; __Obj$ = ecx
; _<_Args_0>$ = edx

; 225  : #if _HAS_CXX20
; 226  :     if (_STD is_constant_evaluated()) {
; 227  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 228  :     } else
; 229  : #endif // _HAS_CXX20
; 230  :     {
; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
; 232  :     }
; 233  : }

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	89 01		 mov	 DWORD PTR [ecx], eax
  00004	c3		 ret	 0
??$_Construct_in_place@KABK@std@@YAXAAKABK@Z ENDP	; std::_Construct_in_place<unsigned long,unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$construct@KABK@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@QAKABK@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@KABK@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@QAKABK@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned long> >::construct<unsigned long,unsigned long const &>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);
; 681  :         }
; 682  :     }

  00003	8b 45 08	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 02		 mov	 DWORD PTR [edx], eax
  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
??$construct@KABK@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@QAKABK@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned long> >::construct<unsigned long,unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Construct_in_place@PAUSGroundItemInstance@CPythonItem@@ABQAU12@@std@@YAXAAPAUSGroundItemInstance@CPythonItem@@ABQAU12@@Z
_TEXT	SEGMENT
??$_Construct_in_place@PAUSGroundItemInstance@CPythonItem@@ABQAU12@@std@@YAXAAPAUSGroundItemInstance@CPythonItem@@ABQAU12@@Z PROC ; std::_Construct_in_place<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance * const &>, COMDAT
; __Obj$ = ecx
; _<_Args_0>$ = edx

; 225  : #if _HAS_CXX20
; 226  :     if (_STD is_constant_evaluated()) {
; 227  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 228  :     } else
; 229  : #endif // _HAS_CXX20
; 230  :     {
; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
; 232  :     }
; 233  : }

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	89 01		 mov	 DWORD PTR [ecx], eax
  00004	c3		 ret	 0
??$_Construct_in_place@PAUSGroundItemInstance@CPythonItem@@ABQAU12@@std@@YAXAAPAUSGroundItemInstance@CPythonItem@@ABQAU12@@Z ENDP ; std::_Construct_in_place<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$construct@PAUSGroundItemInstance@CPythonItem@@ABQAU12@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@ABQAU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAUSGroundItemInstance@CPythonItem@@ABQAU12@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@ABQAU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::construct<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance * const &>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);
; 681  :         }
; 682  :     }

  00003	8b 45 08	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 02		 mov	 DWORD PTR [edx], eax
  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
??$construct@PAUSGroundItemInstance@CPythonItem@@ABQAU12@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@ABQAU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::construct<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAPAUSGroundItemInstance@CPythonItem@@@std@@YA?A_TABQAPAUSGroundItemInstance@CPythonItem@@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABQAPAUSGroundItemInstance@CPythonItem@@@std@@YA?A_TABQAPAUSGroundItemInstance@CPythonItem@@@Z PROC ; std::_Get_unwrapped<CPythonItem::SGroundItemInstance * * const &>, COMDAT
; __It$ = ecx

; 912  :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 913  :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 914  :         return _It + 0;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 915  :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 916  :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 917  :     } else {
; 918  :         return static_cast<_Iter&&>(_It);
; 919  :     }
; 920  : }

  00002	c3		 ret	 0
??$_Get_unwrapped@ABQAPAUSGroundItemInstance@CPythonItem@@@std@@YA?A_TABQAPAUSGroundItemInstance@CPythonItem@@@Z ENDP ; std::_Get_unwrapped<CPythonItem::SGroundItemInstance * * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@0PAPAU12@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAPAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@0PAPAU12@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@0@@Z PROC ; std::_Uninitialized_move<CPythonItem::SGroundItemInstance * *,std::allocator<CPythonItem::SGroundItemInstance *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1788 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 1789 :     // move [_First, _Last) to raw _Dest, using _Al
; 1790 :     // note: only called internally from elsewhere in the STL
; 1791 :     using _Ptrval     = typename _Alloc::value_type*;
; 1792 :     auto _UFirst      = _Get_unwrapped(_First);
; 1793 :     const auto _ULast = _Get_unwrapped(_Last);
; 1794 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1795 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1796 : #if _HAS_CXX20
; 1797 :         if (!_STD is_constant_evaluated())
; 1798 : #endif // _HAS_CXX20
; 1799 :         {
; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00006	8b 7d 08	 mov	 edi, DWORD PTR __Dest$[ebp]
  00009	8b da		 mov	 ebx, edx
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@00@Z ; std::_Copy_memmove<CPythonItem::SGroundItemInstance * *,CPythonItem::SGroundItemInstance * *>
  00013	83 c4 04	 add	 esp, 4

; 1801 :             return _Dest + (_ULast - _UFirst);

  00016	2b de		 sub	 ebx, esi
  00018	c1 fb 02	 sar	 ebx, 2
  0001b	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5b		 pop	 ebx

; 1802 :         }
; 1803 :     }
; 1804 : 
; 1805 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {
; 1807 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1808 :     }
; 1809 : 
; 1810 :     return _Backout._Release();
; 1811 : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??$_Uninitialized_move@PAPAUSGroundItemInstance@CPythonItem@@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@0PAPAU12@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@0@@Z ENDP ; std::_Uninitialized_move<CPythonItem::SGroundItemInstance * *,std::allocator<CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
??$addressof@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *>, COMDAT
; __Val$ = ecx

; 281  :     return __builtin_addressof(_Val);

  00000	8b c1		 mov	 eax, ecx

; 282  : }

  00002	c3		 ret	 0
??$addressof@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@ABQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
??$forward@ABQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@ABQAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * const &>, COMDAT
; __Arg$ = ecx

; 1426 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1427 : }

  00002	c3		 ret	 0
??$forward@ABQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@ABQAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$construct_at@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@ABQAU12@$0A@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@QAPAU10@ABQAU10@@Z
_TEXT	SEGMENT
??$construct_at@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@ABQAU12@$0A@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@QAPAU10@ABQAU10@@Z PROC ; std::construct_at<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * const &,0>, COMDAT
; __Location$ = ecx
; _<_Args_0>$ = edx

; 218  :     _MSVC_CONSTEXPR return ::new (_Voidify_iter(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	89 01		 mov	 DWORD PTR [ecx], eax
  00004	8b c1		 mov	 eax, ecx

; 219  : }

  00006	c3		 ret	 0
??$construct_at@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@ABQAU12@$0A@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@QAPAU10@ABQAU10@@Z ENDP ; std::construct_at<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * const &,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@@Z
_TEXT	SEGMENT
??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@@Z PROC ; std::_Voidify_iter<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * *>, COMDAT
; __It$ = ecx

; 201  :     if constexpr (is_pointer_v<_Iter>) {
; 202  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  00000	8b c1		 mov	 eax, ecx

; 203  :     } else {
; 204  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 205  :     }
; 206  : }

  00002	c3		 ret	 0
??$_Voidify_iter@PAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAPAXPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@@Z ENDP ; std::_Voidify_iter<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$exchange@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
??$exchange@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::nullptr_t>, COMDAT
; __Val$ = ecx
; __New_val$ = edx

; 652  :     // assign _New_val to _Val, return previous _Val
; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00002	8b 12		 mov	 edx, DWORD PTR [edx]
  00004	89 11		 mov	 DWORD PTR [ecx], edx

; 655  :     return _Old_val;
; 656  : }

  00006	c3		 ret	 0
??$exchange@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ
_TEXT	SEGMENT
?_Release@?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::_Release, COMDAT
; _this$ = ecx

; 1668 :         _First = _Last;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	89 01		 mov	 DWORD PTR [ecx], eax

; 1669 :         return _Last;
; 1670 :     }

  00005	c3		 ret	 0
?_Release@?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEPAPAUSGroundItemInstance@CPythonItem@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::~_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >, COMDAT
; _this$ = ecx

; 1658 :         _Destroy_range(_First, _Last, _Al);
; 1659 :     }

  00000	c2 00 00	 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::~_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@PAPAUSGroundItemInstance@CPythonItem@@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@PAPAUSGroundItemInstance@CPythonItem@@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >, COMDAT
; _this$ = ecx

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Al_$[ebp]
  0000e	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00011	8b c1		 mov	 eax, ecx
  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??0?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAE@PAPAUSGroundItemInstance@CPythonItem@@AAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al_$ = 8						; size = 4
??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >, COMDAT
; _this$ = ecx

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00029	8b 45 08	 mov	 eax, DWORD PTR __Al_$[ebp]
  0002c	89 06		 mov	 DWORD PTR [esi], eax
  0002e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0003c	6a 18		 push	 24			; 00000018H

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0003e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 77   :         return ::operator new(_Bytes);

  00045	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 1013 :         _Ptr = _Al.allocate(1);

  0004a	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 77   :         return ::operator new(_Bytes);

  0004d	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 787  :     }

  00050	8b c6		 mov	 eax, esi
  00052	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00055	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005c	59		 pop	 ecx
  0005d	5e		 pop	 esi
  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAEXXZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Allocate, COMDAT
; _this$ = ecx

; 1011 :     _CONSTEXPR20 void _Allocate() { // disengage *this, then allocate a new memory block

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 77   :         return ::operator new(_Bytes);

  00003	6a 18		 push	 24			; 00000018H

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00005	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 77   :         return ::operator new(_Bytes);

  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 1013 :         _Ptr = _Al.allocate(1);

  00014	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00017	5e		 pop	 esi

; 1014 :     }

  00018	c3		 ret	 0
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAEXXZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
__Al_$ = 8						; size = 4
??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >, COMDAT
; _this$ = ecx

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Al_$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b c1		 mov	 eax, ecx
  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@@Z ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
;	COMDAT ??$_Insertion_sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAPAU?$pair@MH@0@QAU10@0U?$less@X@0@@Z
_TEXT	SEGMENT
tv940 = -32						; size = 8
tv184 = -32						; size = 8
__Val$11 = -24						; size = 8
__Last$1$ = -16						; size = 4
tv890 = -12						; size = 4
__Mid$1$ = -8						; size = 4
__First$1$ = -4						; size = 4
__Pred$ = 8						; size = 1
??$_Insertion_sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAPAU?$pair@MH@0@QAU10@0U?$less@X@0@@Z PROC ; std::_Insertion_sort_unchecked<std::pair<float,int> *,std::less<void> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 7508 : _CONSTEXPR20 _BidIt _Insertion_sort_unchecked(const _BidIt _First, const _BidIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	53		 push	 ebx
  00007	8b c2		 mov	 eax, edx
  00009	89 4d fc	 mov	 DWORD PTR __First$1$[ebp], ecx
  0000c	89 45 f0	 mov	 DWORD PTR __Last$1$[ebp], eax
  0000f	56		 push	 esi
  00010	57		 push	 edi

; 7509 :     // insertion sort [_First, _Last)
; 7510 :     if (_First != _Last) {

  00011	3b c8		 cmp	 ecx, eax
  00013	0f 84 0d 01 00
	00		 je	 $LN3@Insertion_

; 7511 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  00019	8d 51 08	 lea	 edx, DWORD PTR [ecx+8]
  0001c	89 55 f8	 mov	 DWORD PTR __Mid$1$[ebp], edx
  0001f	3b d0		 cmp	 edx, eax
  00021	0f 84 ff 00 00
	00		 je	 $LN3@Insertion_
  00027	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0002a	89 45 f4	 mov	 DWORD PTR tv890[ebp], eax
  0002d	8b f0		 mov	 esi, eax
  0002f	90		 npad	 1
$LL2@Insertion_:

; 7513 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);

  00030	8b 02		 mov	 eax, DWORD PTR [edx]
  00032	8b fa		 mov	 edi, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  00034	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7513 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);

  00038	8b 5a 04	 mov	 ebx, DWORD PTR [edx+4]
  0003b	89 45 e8	 mov	 DWORD PTR __Val$11[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  0003e	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR __Val$11[ebp]
  00043	0f 2f c1	 comiss	 xmm0, xmm1
  00046	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv940[ebp+4], 0
  0004d	76 04		 jbe	 SHORT $LN52@Insertion_
  0004f	0c ff		 or	 al, 255			; 000000ffH
  00051	eb 30		 jmp	 SHORT $LN61@Insertion_
$LN52@Insertion_:
  00053	0f 2f c8	 comiss	 xmm1, xmm0
  00056	76 04		 jbe	 SHORT $LN50@Insertion_
  00058	b0 01		 mov	 al, 1
  0005a	eb 0f		 jmp	 SHORT $LN49@Insertion_
$LN50@Insertion_:
  0005c	0f 2e c8	 ucomiss xmm1, xmm0
  0005f	9f		 lahf
  00060	f6 c4 44	 test	 ah, 68			; 00000044H
  00063	7a 04		 jp	 SHORT $LN48@Insertion_
  00065	32 c0		 xor	 al, al
  00067	eb 02		 jmp	 SHORT $LN49@Insertion_
$LN48@Insertion_:
  00069	b0 80		 mov	 al, 128			; 00000080H
$LN49@Insertion_:
  0006b	8b 75 f4	 mov	 esi, DWORD PTR tv890[ebp]

; 45   :         return _Val._Value == 0;

  0006e	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 373  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  00070	75 11		 jne	 SHORT $LN61@Insertion_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  00072	3b 1e		 cmp	 ebx, DWORD PTR [esi]
  00074	74 0d		 je	 SHORT $LN61@Insertion_
$LN59@Insertion_:
  00076	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0007b	b9 01 00 00 00	 mov	 ecx, 1
  00080	0f 4d c1	 cmovge	 eax, ecx
$LN61@Insertion_:

; 51   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  00083	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7515 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

  00085	75 29		 jne	 SHORT $LN9@Insertion_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 4253 :     while (_First != _Last) {

  00087	8b 7d fc	 mov	 edi, DWORD PTR __First$1$[ebp]
  0008a	3b d7		 cmp	 edx, edi
  0008c	74 1c		 je	 SHORT $LN68@Insertion_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7516 :                 _Move_backward_unchecked(_First, _Mid, ++_Hole);

  0008e	83 c2 04	 add	 edx, 4
$LL78@Insertion_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 253  :         first  = _STD forward<_Ty1>(_Right.first);

  00091	8b 42 f4	 mov	 eax, DWORD PTR [edx-12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 4254 :         *--_Dest = _STD move(*--_Last);

  00094	8b ca		 mov	 ecx, edx
  00096	83 ea 08	 sub	 edx, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 253  :         first  = _STD forward<_Ty1>(_Right.first);

  00099	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 254  :         second = _STD forward<_Ty2>(_Right.second);

  0009c	8b 02		 mov	 eax, DWORD PTR [edx]
  0009e	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 4253 :     while (_First != _Last) {

  000a0	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  000a3	3b c7		 cmp	 eax, edi
  000a5	75 ea		 jne	 SHORT $LL78@Insertion_
  000a7	8b 55 f8	 mov	 edx, DWORD PTR __Mid$1$[ebp]
$LN68@Insertion_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 254  :         second = _STD forward<_Ty2>(_Right.second);

  000aa	89 1e		 mov	 DWORD PTR [esi], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7518 :             } else { // look for insertion point after first

  000ac	8b cf		 mov	 ecx, edi
  000ae	eb 61		 jmp	 SHORT $LN89@Insertion_
$LN9@Insertion_:

; 7519 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  000b0	8b ca		 mov	 ecx, edx
$LL7@Insertion_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  000b2	f3 0f 10 41 f8	 movss	 xmm0, DWORD PTR [ecx-8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7519 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  000b7	8b f1		 mov	 esi, ecx
  000b9	83 e9 08	 sub	 ecx, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  000bc	0f 2f c1	 comiss	 xmm0, xmm1
  000bf	76 04		 jbe	 SHORT $LN23@Insertion_
  000c1	0c ff		 or	 al, 255			; 000000ffH
  000c3	eb 2e		 jmp	 SHORT $LN32@Insertion_
$LN23@Insertion_:
  000c5	0f 2f c8	 comiss	 xmm1, xmm0
  000c8	76 04		 jbe	 SHORT $LN21@Insertion_
  000ca	b0 01		 mov	 al, 1
  000cc	eb 0f		 jmp	 SHORT $LN20@Insertion_
$LN21@Insertion_:
  000ce	0f 2e c8	 ucomiss xmm1, xmm0
  000d1	9f		 lahf
  000d2	f6 c4 44	 test	 ah, 68			; 00000044H
  000d5	7a 04		 jp	 SHORT $LN19@Insertion_
  000d7	32 c0		 xor	 al, al
  000d9	eb 02		 jmp	 SHORT $LN20@Insertion_
$LN19@Insertion_:
  000db	b0 80		 mov	 al, 128			; 00000080H
$LN20@Insertion_:

; 45   :         return _Val._Value == 0;

  000dd	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 373  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  000df	75 12		 jne	 SHORT $LN32@Insertion_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  000e1	3b 5e fc	 cmp	 ebx, DWORD PTR [esi-4]
  000e4	74 0d		 je	 SHORT $LN32@Insertion_
$LN31@Insertion_:
  000e6	b8 01 00 00 00	 mov	 eax, 1
  000eb	ba ff 00 00 00	 mov	 edx, 255		; 000000ffH
  000f0	0f 4c c2	 cmovl	 eax, edx
$LN32@Insertion_:

; 51   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  000f3	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7519 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  000f5	75 0e		 jne	 SHORT $LN6@Insertion_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 253  :         first  = _STD forward<_Ty1>(_Right.first);

  000f7	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0

; 254  :         second = _STD forward<_Ty2>(_Right.second);

  000fb	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  000fe	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7519 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  00101	8b f9		 mov	 edi, ecx
  00103	eb ad		 jmp	 SHORT $LL7@Insertion_
$LN6@Insertion_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 254  :         second = _STD forward<_Ty2>(_Right.second);

  00105	8b 4d fc	 mov	 ecx, DWORD PTR __First$1$[ebp]
  00108	8b 55 f8	 mov	 edx, DWORD PTR __Mid$1$[ebp]
  0010b	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  0010e	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
$LN89@Insertion_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7511 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  00111	8b 45 f0	 mov	 eax, DWORD PTR __Last$1$[ebp]
  00114	83 c2 08	 add	 edx, 8
  00117	f3 0f 11 0f	 movss	 DWORD PTR [edi], xmm1
  0011b	89 55 f8	 mov	 DWORD PTR __Mid$1$[ebp], edx
  0011e	3b d0		 cmp	 edx, eax
  00120	0f 85 0a ff ff
	ff		 jne	 $LL2@Insertion_
$LN3@Insertion_:

; 7520 :                     *_Hole = _STD move(*_Prev); // move hole down
; 7521 :                 }
; 7522 : 
; 7523 :                 *_Hole = _STD move(_Val); // insert element in hole
; 7524 :             }
; 7525 :         }
; 7526 :     }
; 7527 : 
; 7528 :     return _Last;
; 7529 : }

  00126	5f		 pop	 edi
  00127	5e		 pop	 esi
  00128	5b		 pop	 ebx
  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c3		 ret	 0
??$_Insertion_sort_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAPAU?$pair@MH@0@QAU10@0U?$less@X@0@@Z ENDP ; std::_Insertion_sort_unchecked<std::pair<float,int> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
;	COMDAT ??$?RMM@_Synth_three_way@std@@QBE?A_PABM0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?RMM@_Synth_three_way@std@@QBE?A_PABM0@Z PROC	; std::_Synth_three_way::operator()<float,float>, COMDAT
; _this$dead$ = ecx

; 344  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 345  :         if constexpr (three_way_comparable_with<_Ty1, _Ty2>) {
; 346  :             return _Left <=> _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  0000a	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
  0000d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00011	0f 2f c1	 comiss	 xmm0, xmm1
  00014	76 0c		 jbe	 SHORT $LN7@operator
  00016	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00019	80 c9 ff	 or	 cl, 255			; 000000ffH
  0001c	88 08		 mov	 BYTE PTR [eax], cl

; 347  :         } else {
; 348  :             if (_Left < _Right) {
; 349  :                 return weak_ordering::less;
; 350  :             } else if (_Right < _Left) {
; 351  :                 return weak_ordering::greater;
; 352  :             } else {
; 353  :                 return weak_ordering::equivalent;
; 354  :             }
; 355  :         }
; 356  :     }

  0001e	5d		 pop	 ebp
  0001f	c2 0c 00	 ret	 12			; 0000000cH
$LN7@operator:

; 345  :         if constexpr (three_way_comparable_with<_Ty1, _Ty2>) {
; 346  :             return _Left <=> _Right;

  00022	0f 2f c8	 comiss	 xmm1, xmm0
  00025	76 0d		 jbe	 SHORT $LN5@operator
  00027	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0002a	b0 01		 mov	 al, 1
  0002c	88 01		 mov	 BYTE PTR [ecx], al
  0002e	8b c1		 mov	 eax, ecx

; 347  :         } else {
; 348  :             if (_Left < _Right) {
; 349  :                 return weak_ordering::less;
; 350  :             } else if (_Right < _Left) {
; 351  :                 return weak_ordering::greater;
; 352  :             } else {
; 353  :                 return weak_ordering::equivalent;
; 354  :             }
; 355  :         }
; 356  :     }

  00030	5d		 pop	 ebp
  00031	c2 0c 00	 ret	 12			; 0000000cH
$LN5@operator:

; 345  :         if constexpr (three_way_comparable_with<_Ty1, _Ty2>) {
; 346  :             return _Left <=> _Right;

  00034	0f 2e c8	 ucomiss xmm1, xmm0
  00037	9f		 lahf
  00038	f6 c4 44	 test	 ah, 68			; 00000044H
  0003b	7a 0d		 jp	 SHORT $LN3@operator
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00040	32 c0		 xor	 al, al
  00042	88 01		 mov	 BYTE PTR [ecx], al
  00044	8b c1		 mov	 eax, ecx

; 347  :         } else {
; 348  :             if (_Left < _Right) {
; 349  :                 return weak_ordering::less;
; 350  :             } else if (_Right < _Left) {
; 351  :                 return weak_ordering::greater;
; 352  :             } else {
; 353  :                 return weak_ordering::equivalent;
; 354  :             }
; 355  :         }
; 356  :     }

  00046	5d		 pop	 ebp
  00047	c2 0c 00	 ret	 12			; 0000000cH
$LN3@operator:

; 345  :         if constexpr (three_way_comparable_with<_Ty1, _Ty2>) {
; 346  :             return _Left <=> _Right;

  0004a	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0004d	b0 80		 mov	 al, 128			; 00000080H
  0004f	88 01		 mov	 BYTE PTR [ecx], al
  00051	8b c1		 mov	 eax, ecx

; 347  :         } else {
; 348  :             if (_Left < _Right) {
; 349  :                 return weak_ordering::less;
; 350  :             } else if (_Right < _Left) {
; 351  :                 return weak_ordering::greater;
; 352  :             } else {
; 353  :                 return weak_ordering::equivalent;
; 354  :             }
; 355  :         }
; 356  :     }

  00053	5d		 pop	 ebp
  00054	c2 0c 00	 ret	 12			; 0000000cH
??$?RMM@_Synth_three_way@std@@QBE?A_PABM0@Z ENDP	; std::_Synth_three_way::operator()<float,float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
;	COMDAT ??$?RHH@_Synth_three_way@std@@QBE?A_PABH0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?RHH@_Synth_three_way@std@@QBE?A_PABH0@Z PROC	; std::_Synth_three_way::operator()<int,int>, COMDAT
; _this$dead$ = ecx

; 344  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 345  :         if constexpr (three_way_comparable_with<_Ty1, _Ty2>) {
; 346  :             return _Left <=> _Right;

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 10		 mov	 edx, DWORD PTR [eax]
  00008	8b 45 10	 mov	 eax, DWORD PTR __Right$[ebp]
  0000b	3b 10		 cmp	 edx, DWORD PTR [eax]
  0000d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00010	75 08		 jne	 SHORT $LN4@operator
  00012	32 c9		 xor	 cl, cl

; 347  :         } else {
; 348  :             if (_Left < _Right) {
; 349  :                 return weak_ordering::less;
; 350  :             } else if (_Right < _Left) {
; 351  :                 return weak_ordering::greater;
; 352  :             } else {
; 353  :                 return weak_ordering::equivalent;
; 354  :             }
; 355  :         }
; 356  :     }

  00014	88 08		 mov	 BYTE PTR [eax], cl
  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
$LN4@operator:
  0001a	56		 push	 esi

; 345  :         if constexpr (three_way_comparable_with<_Ty1, _Ty2>) {
; 346  :             return _Left <=> _Right;

  0001b	be 01 00 00 00	 mov	 esi, 1
  00020	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  00025	0f 4d ce	 cmovge	 ecx, esi
  00028	5e		 pop	 esi

; 347  :         } else {
; 348  :             if (_Left < _Right) {
; 349  :                 return weak_ordering::less;
; 350  :             } else if (_Right < _Left) {
; 351  :                 return weak_ordering::greater;
; 352  :             } else {
; 353  :                 return weak_ordering::equivalent;
; 354  :             }
; 355  :         }
; 356  :     }

  00029	88 08		 mov	 BYTE PTR [eax], cl
  0002b	5d		 pop	 ebp
  0002c	c2 0c 00	 ret	 12			; 0000000cH
??$?RHH@_Synth_three_way@std@@QBE?A_PABH0@Z ENDP	; std::_Synth_three_way::operator()<int,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
;	COMDAT ??$_Make_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
__Val$11 = -24						; size = 8
__Bottom$1$ = -16					; size = 4
__Val$1$ = -12						; size = 4
__Hole$1$ = -8						; size = 4
__Max_sequence_non_leaf$1$ = -4				; size = 4
__Pred$ = 8						; size = 1
??$_Make_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z PROC ; std::_Make_heap_unchecked<std::pair<float,int> *,std::less<void> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 6192 : _CONSTEXPR20 void _Make_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b c2		 mov	 eax, edx
  0000a	8b f1		 mov	 esi, ecx

; 6193 :     // make [_First, _Last) into a heap
; 6194 :     using _Diff   = _Iter_diff_t<_RanIt>;
; 6195 :     _Diff _Bottom = _Last - _First;

  0000c	2b c6		 sub	 eax, esi
  0000e	c1 f8 03	 sar	 eax, 3

; 6196 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  00011	8b d0		 mov	 edx, eax
  00013	89 45 f0	 mov	 DWORD PTR __Bottom$1$[ebp], eax
  00016	d1 fa		 sar	 edx, 1
  00018	57		 push	 edi
  00019	85 d2		 test	 edx, edx
  0001b	0f 8e 3e 01 00
	00		 jle	 $LN3@Make_heap_
  00021	48		 dec	 eax
  00022	d1 f8		 sar	 eax, 1
  00024	89 45 fc	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], eax
$LL2@Make_heap_:

; 6199 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

  00027	8b 44 d6 f8	 mov	 eax, DWORD PTR [esi+edx*8-8]
  0002b	4a		 dec	 edx
  0002c	89 45 e8	 mov	 DWORD PTR __Val$11[ebp], eax

; 6200 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  0002f	8b da		 mov	 ebx, edx

; 6038 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  00031	8b 45 fc	 mov	 eax, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  00034	8b ca		 mov	 ecx, edx

; 6197 :         // reheap top half, bottom to top
; 6198 :         --_Hole;

  00036	89 55 f8	 mov	 DWORD PTR __Hole$1$[ebp], edx

; 6199 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

  00039	8b 7c d6 04	 mov	 edi, DWORD PTR [esi+edx*8+4]
  0003d	89 7d f4	 mov	 DWORD PTR __Val$1$[ebp], edi

; 6038 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  00040	3b d0		 cmp	 edx, eax
  00042	0f 8d 7e 00 00
	00		 jge	 $LN8@Make_heap_
  00048	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL7@Make_heap_:

; 6039 :         _Idx = 2 * _Idx + 2;

  00050	8d 3c 09	 lea	 edi, DWORD PTR [ecx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  00053	f3 0f 10 4c fe
	10		 movss	 xmm1, DWORD PTR [esi+edi*8+16]
  00059	f3 0f 10 44 fe
	08		 movss	 xmm0, DWORD PTR [esi+edi*8+8]
  0005f	0f 2f c1	 comiss	 xmm0, xmm1
  00062	76 05		 jbe	 SHORT $LN23@Make_heap_
  00064	80 c9 ff	 or	 cl, 255			; 000000ffH
  00067	eb 33		 jmp	 SHORT $LN32@Make_heap_
$LN23@Make_heap_:
  00069	0f 2f c8	 comiss	 xmm1, xmm0
  0006c	76 04		 jbe	 SHORT $LN21@Make_heap_
  0006e	b1 01		 mov	 cl, 1
  00070	eb 0f		 jmp	 SHORT $LN20@Make_heap_
$LN21@Make_heap_:
  00072	0f 2e c8	 ucomiss xmm1, xmm0
  00075	9f		 lahf
  00076	f6 c4 44	 test	 ah, 68			; 00000044H
  00079	7a 04		 jp	 SHORT $LN19@Make_heap_
  0007b	32 c9		 xor	 cl, cl
  0007d	eb 02		 jmp	 SHORT $LN20@Make_heap_
$LN19@Make_heap_:
  0007f	b1 80		 mov	 cl, 128			; 00000080H
$LN20@Make_heap_:

; 45   :         return _Val._Value == 0;

  00081	84 c9		 test	 cl, cl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 373  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  00083	75 17		 jne	 SHORT $LN32@Make_heap_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  00085	8b 44 fe 14	 mov	 eax, DWORD PTR [esi+edi*8+20]
  00089	3b 44 fe 0c	 cmp	 eax, DWORD PTR [esi+edi*8+12]
  0008d	74 0d		 je	 SHORT $LN32@Make_heap_
$LN30@Make_heap_:
  0008f	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  00094	b8 01 00 00 00	 mov	 eax, 1
  00099	0f 4d c8	 cmovge	 ecx, eax
$LN32@Make_heap_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 6043 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  0009c	33 c0		 xor	 eax, eax
  0009e	80 f9 ff	 cmp	 cl, -1
  000a1	0f 95 c0	 setne	 al
  000a4	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  000a7	03 cf		 add	 ecx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 253  :         first  = _STD forward<_Ty1>(_Right.first);

  000a9	8b 04 ce	 mov	 eax, DWORD PTR [esi+ecx*8]
  000ac	89 04 de	 mov	 DWORD PTR [esi+ebx*8], eax

; 254  :         second = _STD forward<_Ty2>(_Right.second);

  000af	8b 44 ce 04	 mov	 eax, DWORD PTR [esi+ecx*8+4]
  000b3	89 44 de 04	 mov	 DWORD PTR [esi+ebx*8+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 6044 :         _Hole             = _Idx;

  000b7	8b d9		 mov	 ebx, ecx
  000b9	8b 45 fc	 mov	 eax, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  000bc	3b c8		 cmp	 ecx, eax
  000be	7c 90		 jl	 SHORT $LL7@Make_heap_
  000c0	8b 55 f8	 mov	 edx, DWORD PTR __Hole$1$[ebp]
  000c3	8b 7d f4	 mov	 edi, DWORD PTR __Val$1$[ebp]
$LN8@Make_heap_:

; 6045 :     }
; 6046 : 
; 6047 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  000c6	3b d8		 cmp	 ebx, eax
  000c8	75 1c		 jne	 SHORT $LN10@Make_heap_
  000ca	8b 4d f0	 mov	 ecx, DWORD PTR __Bottom$1$[ebp]
  000cd	f6 c1 01	 test	 cl, 1
  000d0	75 14		 jne	 SHORT $LN10@Make_heap_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 253  :         first  = _STD forward<_Ty1>(_Right.first);

  000d2	8b 44 ce f8	 mov	 eax, DWORD PTR [esi+ecx*8-8]
  000d6	89 04 de	 mov	 DWORD PTR [esi+ebx*8], eax

; 254  :         second = _STD forward<_Ty2>(_Right.second);

  000d9	8b 44 ce fc	 mov	 eax, DWORD PTR [esi+ecx*8-4]
  000dd	89 44 de 04	 mov	 DWORD PTR [esi+ebx*8+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 6049 :         _Hole             = _Bottom - 1;

  000e1	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  000e4	8b d8		 mov	 ebx, eax
$LN10@Make_heap_:

; 5921 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  000e6	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR __Val$11[ebp]
  000eb	8d 4b ff	 lea	 ecx, DWORD PTR [ebx-1]
  000ee	d1 f9		 sar	 ecx, 1
  000f0	3b d3		 cmp	 edx, ebx
  000f2	7d 5a		 jge	 SHORT $LN89@Make_heap_
$LL42@Make_heap_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  000f4	f3 0f 10 04 ce	 movss	 xmm0, DWORD PTR [esi+ecx*8]
  000f9	0f 2f c8	 comiss	 xmm1, xmm0
  000fc	76 04		 jbe	 SHORT $LN57@Make_heap_
  000fe	0c ff		 or	 al, 255			; 000000ffH
  00100	eb 32		 jmp	 SHORT $LN48@Make_heap_
$LN57@Make_heap_:
  00102	0f 2f c1	 comiss	 xmm0, xmm1
  00105	76 04		 jbe	 SHORT $LN55@Make_heap_
  00107	b0 01		 mov	 al, 1
  00109	eb 0f		 jmp	 SHORT $LN54@Make_heap_
$LN55@Make_heap_:
  0010b	0f 2e c1	 ucomiss xmm0, xmm1
  0010e	9f		 lahf
  0010f	f6 c4 44	 test	 ah, 68			; 00000044H
  00112	7a 04		 jp	 SHORT $LN53@Make_heap_
  00114	32 c0		 xor	 al, al
  00116	eb 02		 jmp	 SHORT $LN54@Make_heap_
$LN53@Make_heap_:
  00118	b0 80		 mov	 al, 128			; 00000080H
$LN54@Make_heap_:

; 45   :         return _Val._Value == 0;

  0011a	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 373  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  0011c	75 16		 jne	 SHORT $LN48@Make_heap_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  0011e	39 7c ce 04	 cmp	 DWORD PTR [esi+ecx*8+4], edi
  00122	74 0d		 je	 SHORT $LN66@Make_heap_
$LN65@Make_heap_:
  00124	b8 01 00 00 00	 mov	 eax, 1
  00129	ba ff 00 00 00	 mov	 edx, 255		; 000000ffH
  0012e	0f 4c c2	 cmovl	 eax, edx
$LN66@Make_heap_:
  00131	8b 55 f8	 mov	 edx, DWORD PTR __Hole$1$[ebp]
$LN48@Make_heap_:

; 51   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  00134	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 5921 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00136	75 16		 jne	 SHORT $LN89@Make_heap_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 253  :         first  = _STD forward<_Ty1>(_Right.first);

  00138	f3 0f 11 04 de	 movss	 DWORD PTR [esi+ebx*8], xmm0

; 254  :         second = _STD forward<_Ty2>(_Right.second);

  0013d	8b 44 ce 04	 mov	 eax, DWORD PTR [esi+ecx*8+4]
  00141	89 44 de 04	 mov	 DWORD PTR [esi+ebx*8+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 5925 :         _Hole             = _Idx;

  00145	8b d9		 mov	 ebx, ecx
  00147	49		 dec	 ecx
  00148	d1 f9		 sar	 ecx, 1
  0014a	3b d3		 cmp	 edx, ebx
  0014c	7c a6		 jl	 SHORT $LL42@Make_heap_
$LN89@Make_heap_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 253  :         first  = _STD forward<_Ty1>(_Right.first);

  0014e	f3 0f 11 0c de	 movss	 DWORD PTR [esi+ebx*8], xmm1

; 254  :         second = _STD forward<_Ty2>(_Right.second);

  00153	89 7c de 04	 mov	 DWORD PTR [esi+ebx*8+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 6196 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  00157	85 d2		 test	 edx, edx
  00159	0f 8f c8 fe ff
	ff		 jg	 $LL2@Make_heap_
$LN3@Make_heap_:

; 6201 :     }
; 6202 : }

  0015f	5f		 pop	 edi
  00160	5e		 pop	 esi
  00161	5b		 pop	 ebx
  00162	8b e5		 mov	 esp, ebp
  00164	5d		 pop	 ebp
  00165	c3		 ret	 0
??$_Make_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z ENDP ; std::_Make_heap_unchecked<std::pair<float,int> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
;	COMDAT ??$_Sort_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
__Val$1 = -16						; size = 8
tv285 = -8						; size = 4
__Pred$ = 8						; size = 1
??$_Sort_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z PROC ; std::_Sort_heap_unchecked<std::pair<float,int> *,std::less<void> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 6414 : _CONSTEXPR20 void _Sort_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b d9		 mov	 ebx, ecx
  0000b	8b fa		 mov	 edi, edx

; 6415 :     // order heap by repeatedly popping
; 6416 :     for (; _Last - _First >= 2; --_Last) {

  0000d	2b d3		 sub	 edx, ebx
  0000f	8b c2		 mov	 eax, edx
  00011	83 e0 f8	 and	 eax, -8			; fffffff8H
  00014	83 f8 10	 cmp	 eax, 16			; 00000010H
  00017	7c 49		 jl	 SHORT $LN3@Sort_heap_
  00019	83 c7 f8	 add	 edi, -8			; fffffff8H
  0001c	83 c2 f8	 add	 edx, -8			; fffffff8H
  0001f	89 55 f8	 mov	 DWORD PTR tv285[ebp], edx
$LL4@Sort_heap_:

; 6071 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  00022	8b 07		 mov	 eax, DWORD PTR [edi]

; 6062 :     _Pop_heap_hole_by_index(

  00024	8b f2		 mov	 esi, edx

; 6071 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  00026	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 6062 :     _Pop_heap_hole_by_index(

  00029	ff 75 08	 push	 DWORD PTR __Pred$[ebp]

; 6071 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  0002c	89 45 f0	 mov	 DWORD PTR __Val$1[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 253  :         first  = _STD forward<_Ty1>(_Right.first);

  0002f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00031	89 07		 mov	 DWORD PTR [edi], eax

; 254  :         second = _STD forward<_Ty2>(_Right.second);

  00033	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00036	89 44 1a 04	 mov	 DWORD PTR [edx+ebx+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 6062 :     _Pop_heap_hole_by_index(

  0003a	8d 45 f0	 lea	 eax, DWORD PTR __Val$1[ebp]
  0003d	50		 push	 eax

; 6071 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  0003e	89 4d f4	 mov	 DWORD PTR __Val$1[ebp+4], ecx

; 6062 :     _Pop_heap_hole_by_index(

  00041	33 d2		 xor	 edx, edx
  00043	c1 fe 03	 sar	 esi, 3
  00046	8b cb		 mov	 ecx, ebx
  00048	56		 push	 esi
  00049	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<std::pair<float,int> *,std::pair<float,int>,std::less<void> >

; 6415 :     // order heap by repeatedly popping
; 6416 :     for (; _Last - _First >= 2; --_Last) {

  0004e	8b 55 f8	 mov	 edx, DWORD PTR tv285[ebp]
  00051	8d 7f f8	 lea	 edi, DWORD PTR [edi-8]
  00054	83 ea 08	 sub	 edx, 8

; 6062 :     _Pop_heap_hole_by_index(

  00057	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6415 :     // order heap by repeatedly popping
; 6416 :     for (; _Last - _First >= 2; --_Last) {

  0005a	89 55 f8	 mov	 DWORD PTR tv285[ebp], edx
  0005d	83 fe 02	 cmp	 esi, 2
  00060	7d c0		 jge	 SHORT $LL4@Sort_heap_
$LN3@Sort_heap_:

; 6417 :         _Pop_heap_unchecked(_First, _Last, _Pred);
; 6418 :     }
; 6419 : }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
??$_Sort_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z ENDP ; std::_Sort_heap_unchecked<std::pair<float,int> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MH@std@@PAU12@@0@PAU?$pair@MH@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$1$ = -16					; size = 4
__Gfirst$1$ = -12					; size = 4
__Pfirst$1$ = -12					; size = 4
__First$1$ = -8						; size = 4
__Glast$1$ = -4						; size = 4
__Last$ = 8						; size = 4
__Plast$1$ = 12						; size = 4
__Pred$ = 12						; size = 1
??$_Partition_by_median_guess_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MH@std@@PAU12@@0@PAU?$pair@MH@0@0U?$less@X@0@@Z PROC ; std::_Partition_by_median_guess_unchecked<std::pair<float,int> *,std::less<void> >, COMDAT
; ___$ReturnUdt$ = ecx
; __First$ = edx

; 7565 : _CONSTEXPR20 pair<_RanIt, _RanIt> _Partition_by_median_guess_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	89 4d f0	 mov	 DWORD PTR ___$ReturnUdt$1$[ebp], ecx

; 7566 :     // partition [_First, _Last)
; 7567 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __Last$[ebp]
  0000e	8b c1		 mov	 eax, ecx
  00010	57		 push	 edi
  00011	8b fa		 mov	 edi, edx

; 7568 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

  00013	83 c1 f8	 add	 ecx, -8			; fffffff8H
  00016	2b c7		 sub	 eax, edi
  00018	89 7d f8	 mov	 DWORD PTR __First$1$[ebp], edi
  0001b	c1 f8 04	 sar	 eax, 4
  0001e	8d 14 c7	 lea	 edx, DWORD PTR [edi+eax*8]

; 7551 :     const _Diff _Count = _Last - _First;

  00021	8b c1		 mov	 eax, ecx
  00023	2b c7		 sub	 eax, edi

; 7566 :     // partition [_First, _Last)
; 7567 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  00025	89 55 f4	 mov	 DWORD PTR __Pfirst$1$[ebp], edx

; 7551 :     const _Diff _Count = _Last - _First;

  00028	c1 f8 03	 sar	 eax, 3

; 7552 :     if (40 < _Count) { // Tukey's ninther

  0002b	83 f8 28	 cmp	 eax, 40			; 00000028H
  0002e	7e 60		 jle	 SHORT $LN342@Partition_

; 7553 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller
; 7554 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 7555 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  00030	8b 4d f8	 mov	 ecx, DWORD PTR __First$1$[ebp]
  00033	40		 inc	 eax
  00034	c1 f8 03	 sar	 eax, 3
  00037	8b d8		 mov	 ebx, eax
  00039	c1 e3 04	 shl	 ebx, 4
  0003c	8d 34 c5 00 00
	00 00		 lea	 esi, DWORD PTR [eax*8]
  00043	8b 45 f8	 mov	 eax, DWORD PTR __First$1$[ebp]
  00046	8d 14 3e	 lea	 edx, DWORD PTR [esi+edi]
  00049	03 c3		 add	 eax, ebx
  0004b	8b 7d 0c	 mov	 edi, DWORD PTR __Pred$[ebp]
  0004e	57		 push	 edi
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >

; 7556 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00055	8b 55 f4	 mov	 edx, DWORD PTR __Pfirst$1$[ebp]
  00058	8b ca		 mov	 ecx, edx
  0005a	57		 push	 edi
  0005b	2b ce		 sub	 ecx, esi
  0005d	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >

; 7557 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

  00066	8b 45 08	 mov	 eax, DWORD PTR __Last$[ebp]
  00069	83 c0 f8	 add	 eax, -8			; fffffff8H
  0006c	8b d0		 mov	 edx, eax
  0006e	57		 push	 edi
  0006f	50		 push	 eax
  00070	2b c3		 sub	 eax, ebx
  00072	2b d6		 sub	 edx, esi
  00074	8b c8		 mov	 ecx, eax
  00076	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >

; 7558 :         _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);

  0007b	57		 push	 edi
  0007c	8b 7d f8	 mov	 edi, DWORD PTR __First$1$[ebp]
  0007f	52		 push	 edx
  00080	8b 55 f4	 mov	 edx, DWORD PTR __Pfirst$1$[ebp]
  00083	8d 0c 3e	 lea	 ecx, DWORD PTR [esi+edi]
  00086	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >
  0008b	83 c4 20	 add	 esp, 32			; 00000020H

; 7559 :     } else {

  0008e	eb 0e		 jmp	 SHORT $LN343@Partition_
$LN342@Partition_:

; 7560 :         _Med3_unchecked(_First, _Mid, _Last, _Pred);

  00090	ff 75 0c	 push	 DWORD PTR __Pred$[ebp]
  00093	51		 push	 ecx
  00094	8b cf		 mov	 ecx, edi
  00096	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >
  0009b	83 c4 08	 add	 esp, 8
$LN343@Partition_:

; 7569 :     _RanIt _Pfirst = _Mid;
; 7570 :     _RanIt _Plast  = _Next_iter(_Pfirst);

  0009e	8d 5a 08	 lea	 ebx, DWORD PTR [edx+8]
  000a1	89 5d 0c	 mov	 DWORD PTR __Plast$1$[ebp], ebx

; 7573 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  000a4	3b fa		 cmp	 edi, edx
  000a6	0f 83 97 00 00
	00		 jae	 $LN347@Partition_
  000ac	8b 5d f8	 mov	 ebx, DWORD PTR __First$1$[ebp]
  000af	90		 npad	 1
$LL2@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  000b0	f3 0f 10 42 f8	 movss	 xmm0, DWORD PTR [edx-8]
  000b5	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  000b9	0f 2f c8	 comiss	 xmm1, xmm0
  000bc	76 04		 jbe	 SHORT $LN237@Partition_
  000be	0c ff		 or	 al, 255			; 000000ffH
  000c0	eb 31		 jmp	 SHORT $LN246@Partition_
$LN237@Partition_:
  000c2	0f 2f c1	 comiss	 xmm0, xmm1
  000c5	76 04		 jbe	 SHORT $LN235@Partition_
  000c7	b0 01		 mov	 al, 1
  000c9	eb 0f		 jmp	 SHORT $LN234@Partition_
$LN235@Partition_:
  000cb	0f 2e c1	 ucomiss xmm0, xmm1
  000ce	9f		 lahf
  000cf	f6 c4 44	 test	 ah, 68			; 00000044H
  000d2	7a 04		 jp	 SHORT $LN233@Partition_
  000d4	32 c0		 xor	 al, al
  000d6	eb 02		 jmp	 SHORT $LN234@Partition_
$LN233@Partition_:
  000d8	b0 80		 mov	 al, 128			; 00000080H
$LN234@Partition_:

; 45   :         return _Val._Value == 0;

  000da	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 373  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  000dc	75 15		 jne	 SHORT $LN246@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  000de	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000e1	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  000e4	74 0d		 je	 SHORT $LN246@Partition_
$LN244@Partition_:
  000e6	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000eb	b9 01 00 00 00	 mov	 ecx, 1
  000f0	0f 4d c1	 cmovge	 eax, ecx
$LN246@Partition_:

; 51   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  000f3	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7573 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  000f5	74 49		 je	 SHORT $LN380@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  000f7	0f 2f c1	 comiss	 xmm0, xmm1
  000fa	76 04		 jbe	 SHORT $LN287@Partition_
  000fc	0c ff		 or	 al, 255			; 000000ffH
  000fe	eb 31		 jmp	 SHORT $LN296@Partition_
$LN287@Partition_:
  00100	0f 2f c8	 comiss	 xmm1, xmm0
  00103	76 04		 jbe	 SHORT $LN285@Partition_
  00105	b0 01		 mov	 al, 1
  00107	eb 0f		 jmp	 SHORT $LN284@Partition_
$LN285@Partition_:
  00109	0f 2e c8	 ucomiss xmm1, xmm0
  0010c	9f		 lahf
  0010d	f6 c4 44	 test	 ah, 68			; 00000044H
  00110	7a 04		 jp	 SHORT $LN283@Partition_
  00112	32 c0		 xor	 al, al
  00114	eb 02		 jmp	 SHORT $LN284@Partition_
$LN283@Partition_:
  00116	b0 80		 mov	 al, 128			; 00000080H
$LN284@Partition_:

; 45   :         return _Val._Value == 0;

  00118	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 373  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  0011a	75 15		 jne	 SHORT $LN296@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  0011c	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0011f	3b 4a fc	 cmp	 ecx, DWORD PTR [edx-4]
  00122	74 0d		 je	 SHORT $LN296@Partition_
$LN294@Partition_:
  00124	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00129	b9 01 00 00 00	 mov	 ecx, 1
  0012e	0f 4d c1	 cmovge	 eax, ecx
$LN296@Partition_:

; 51   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  00131	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7573 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  00133	74 0b		 je	 SHORT $LN380@Partition_

; 7574 :         --_Pfirst;

  00135	83 c2 f8	 add	 edx, -8			; fffffff8H
  00138	3b da		 cmp	 ebx, edx
  0013a	0f 82 70 ff ff
	ff		 jb	 $LL2@Partition_
$LN380@Partition_:
  00140	8b 5d 0c	 mov	 ebx, DWORD PTR __Plast$1$[ebp]
$LN347@Partition_:

; 7577 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  00143	8b 45 08	 mov	 eax, DWORD PTR __Last$[ebp]
  00146	3b d8		 cmp	 ebx, eax
  00148	0f 83 9a 00 00
	00		 jae	 $LN5@Partition_
  0014e	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
$LL4@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  00152	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  00156	0f 2f c8	 comiss	 xmm1, xmm0
  00159	76 04		 jbe	 SHORT $LN262@Partition_
  0015b	0c ff		 or	 al, 255			; 000000ffH
  0015d	eb 31		 jmp	 SHORT $LN271@Partition_
$LN262@Partition_:
  0015f	0f 2f c1	 comiss	 xmm0, xmm1
  00162	76 04		 jbe	 SHORT $LN260@Partition_
  00164	b0 01		 mov	 al, 1
  00166	eb 0f		 jmp	 SHORT $LN259@Partition_
$LN260@Partition_:
  00168	0f 2e c1	 ucomiss xmm0, xmm1
  0016b	9f		 lahf
  0016c	f6 c4 44	 test	 ah, 68			; 00000044H
  0016f	7a 04		 jp	 SHORT $LN258@Partition_
  00171	32 c0		 xor	 al, al
  00173	eb 02		 jmp	 SHORT $LN259@Partition_
$LN258@Partition_:
  00175	b0 80		 mov	 al, 128			; 00000080H
$LN259@Partition_:

; 45   :         return _Val._Value == 0;

  00177	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 373  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  00179	75 15		 jne	 SHORT $LN271@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  0017b	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0017e	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  00181	74 0d		 je	 SHORT $LN271@Partition_
$LN269@Partition_:
  00183	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00188	b9 01 00 00 00	 mov	 ecx, 1
  0018d	0f 4d c1	 cmovge	 eax, ecx
$LN271@Partition_:

; 51   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  00190	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7577 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  00192	74 4e		 je	 SHORT $LN387@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  00194	0f 2f c1	 comiss	 xmm0, xmm1
  00197	76 04		 jbe	 SHORT $LN312@Partition_
  00199	0c ff		 or	 al, 255			; 000000ffH
  0019b	eb 31		 jmp	 SHORT $LN321@Partition_
$LN312@Partition_:
  0019d	0f 2f c8	 comiss	 xmm1, xmm0
  001a0	76 04		 jbe	 SHORT $LN310@Partition_
  001a2	b0 01		 mov	 al, 1
  001a4	eb 0f		 jmp	 SHORT $LN309@Partition_
$LN310@Partition_:
  001a6	0f 2e c8	 ucomiss xmm1, xmm0
  001a9	9f		 lahf
  001aa	f6 c4 44	 test	 ah, 68			; 00000044H
  001ad	7a 04		 jp	 SHORT $LN308@Partition_
  001af	32 c0		 xor	 al, al
  001b1	eb 02		 jmp	 SHORT $LN309@Partition_
$LN308@Partition_:
  001b3	b0 80		 mov	 al, 128			; 00000080H
$LN309@Partition_:

; 45   :         return _Val._Value == 0;

  001b5	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 373  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  001b7	75 15		 jne	 SHORT $LN321@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 4b 04	 cmp	 ecx, DWORD PTR [ebx+4]
  001bf	74 0d		 je	 SHORT $LN321@Partition_
$LN319@Partition_:
  001c1	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  001c6	b9 01 00 00 00	 mov	 ecx, 1
  001cb	0f 4d c1	 cmovge	 eax, ecx
$LN321@Partition_:

; 51   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  001ce	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7577 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  001d0	8b 45 08	 mov	 eax, DWORD PTR __Last$[ebp]
  001d3	74 10		 je	 SHORT $LN381@Partition_

; 7578 :         ++_Plast;

  001d5	83 c3 08	 add	 ebx, 8
  001d8	3b d8		 cmp	 ebx, eax
  001da	0f 82 72 ff ff
	ff		 jb	 $LL4@Partition_

; 7577 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  001e0	eb 03		 jmp	 SHORT $LN381@Partition_
$LN387@Partition_:
  001e2	8b 45 08	 mov	 eax, DWORD PTR __Last$[ebp]
$LN381@Partition_:
  001e5	89 5d 0c	 mov	 DWORD PTR __Plast$1$[ebp], ebx
$LN5@Partition_:

; 7579 :     }
; 7580 : 
; 7581 :     _RanIt _Gfirst = _Plast;

  001e8	8b f3		 mov	 esi, ebx

; 7582 :     _RanIt _Glast  = _Pfirst;

  001ea	89 55 fc	 mov	 DWORD PTR __Glast$1$[ebp], edx
$LN389@Partition_:

; 7585 :         for (; _Gfirst < _Last; ++_Gfirst) {

  001ed	89 75 f4	 mov	 DWORD PTR __Gfirst$1$[ebp], esi
$LL6@Partition_:
  001f0	3b f0		 cmp	 esi, eax
  001f2	0f 83 bf 00 00
	00		 jae	 $LN351@Partition_
  001f8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL11@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  00200	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00204	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  00208	0f 2f c8	 comiss	 xmm1, xmm0
  0020b	76 04		 jbe	 SHORT $LN157@Partition_
  0020d	0c ff		 or	 al, 255			; 000000ffH
  0020f	eb 31		 jmp	 SHORT $LN166@Partition_
$LN157@Partition_:
  00211	0f 2f c1	 comiss	 xmm0, xmm1
  00214	76 04		 jbe	 SHORT $LN155@Partition_
  00216	b0 01		 mov	 al, 1
  00218	eb 0f		 jmp	 SHORT $LN154@Partition_
$LN155@Partition_:
  0021a	0f 2e c1	 ucomiss xmm0, xmm1
  0021d	9f		 lahf
  0021e	f6 c4 44	 test	 ah, 68			; 00000044H
  00221	7a 04		 jp	 SHORT $LN153@Partition_
  00223	32 c0		 xor	 al, al
  00225	eb 02		 jmp	 SHORT $LN154@Partition_
$LN153@Partition_:
  00227	b0 80		 mov	 al, 128			; 00000080H
$LN154@Partition_:

; 45   :         return _Val._Value == 0;

  00229	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 373  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  0022b	75 15		 jne	 SHORT $LN166@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  0022d	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00230	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  00233	74 0d		 je	 SHORT $LN166@Partition_
$LN164@Partition_:
  00235	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0023a	b9 01 00 00 00	 mov	 ecx, 1
  0023f	0f 4d c1	 cmovge	 eax, ecx
$LN166@Partition_:

; 51   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  00242	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7586 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

  00244	74 5d		 je	 SHORT $LN9@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  00246	0f 2f c1	 comiss	 xmm0, xmm1
  00249	76 04		 jbe	 SHORT $LN212@Partition_
  0024b	0c ff		 or	 al, 255			; 000000ffH
  0024d	eb 31		 jmp	 SHORT $LN221@Partition_
$LN212@Partition_:
  0024f	0f 2f c8	 comiss	 xmm1, xmm0
  00252	76 04		 jbe	 SHORT $LN210@Partition_
  00254	b0 01		 mov	 al, 1
  00256	eb 0f		 jmp	 SHORT $LN209@Partition_
$LN210@Partition_:
  00258	0f 2e c8	 ucomiss xmm1, xmm0
  0025b	9f		 lahf
  0025c	f6 c4 44	 test	 ah, 68			; 00000044H
  0025f	7a 04		 jp	 SHORT $LN208@Partition_
  00261	32 c0		 xor	 al, al
  00263	eb 02		 jmp	 SHORT $LN209@Partition_
$LN208@Partition_:
  00265	b0 80		 mov	 al, 128			; 00000080H
$LN209@Partition_:

; 45   :         return _Val._Value == 0;

  00267	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 373  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  00269	75 15		 jne	 SHORT $LN221@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  0026b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0026e	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  00271	74 0d		 je	 SHORT $LN221@Partition_
$LN219@Partition_:
  00273	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00278	b9 01 00 00 00	 mov	 ecx, 1
  0027d	0f 4d c1	 cmovge	 eax, ecx
$LN221@Partition_:

; 51   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  00280	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7588 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

  00282	74 2d		 je	 SHORT $LN382@Partition_

; 7589 :                 break;
; 7590 :             } else if (_Plast != _Gfirst) {

  00284	3b de		 cmp	 ebx, esi
  00286	74 18		 je	 SHORT $LN19@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

  00288	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

  0028c	f3 0f 11 0b	 movss	 DWORD PTR [ebx], xmm1
  00290	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 102  :     _Right   = _STD move(_Tmp);

  00293	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0

; 100  :     _Ty _Tmp = _STD move(_Left);

  00297	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]

; 101  :     _Left    = _STD move(_Right);

  0029a	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 102  :     _Right   = _STD move(_Tmp);

  0029d	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
$LN19@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7585 :         for (; _Gfirst < _Last; ++_Gfirst) {

  002a0	83 c3 08	 add	 ebx, 8
$LN9@Partition_:
  002a3	8b 45 08	 mov	 eax, DWORD PTR __Last$[ebp]
  002a6	83 c6 08	 add	 esi, 8
  002a9	3b f0		 cmp	 esi, eax
  002ab	0f 82 4f ff ff
	ff		 jb	 $LL11@Partition_
$LN382@Partition_:
  002b1	89 5d 0c	 mov	 DWORD PTR __Plast$1$[ebp], ebx
  002b4	89 75 f4	 mov	 DWORD PTR __Gfirst$1$[ebp], esi
$LN351@Partition_:

; 7598 :         for (; _First < _Glast; --_Glast) {

  002b7	8b 5d fc	 mov	 ebx, DWORD PTR __Glast$1$[ebp]
  002ba	8b 45 f8	 mov	 eax, DWORD PTR __First$1$[ebp]
  002bd	3b d8		 cmp	 ebx, eax
  002bf	0f 86 c9 00 00
	00		 jbe	 $LN388@Partition_
  002c5	8d 7b fc	 lea	 edi, DWORD PTR [ebx-4]
  002c8	be 01 00 00 00	 mov	 esi, 1
  002cd	0f 1f 00	 npad	 3
$LL14@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  002d0	f3 0f 10 4f fc	 movss	 xmm1, DWORD PTR [edi-4]
  002d5	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  002d9	0f 2f c1	 comiss	 xmm0, xmm1
  002dc	76 04		 jbe	 SHORT $LN45@Partition_
  002de	0c ff		 or	 al, 255			; 000000ffH
  002e0	eb 2e		 jmp	 SHORT $LN36@Partition_
$LN45@Partition_:
  002e2	0f 2f c8	 comiss	 xmm1, xmm0
  002e5	76 04		 jbe	 SHORT $LN43@Partition_
  002e7	b0 01		 mov	 al, 1
  002e9	eb 0f		 jmp	 SHORT $LN42@Partition_
$LN43@Partition_:
  002eb	0f 2e c8	 ucomiss xmm1, xmm0
  002ee	9f		 lahf
  002ef	f6 c4 44	 test	 ah, 68			; 00000044H
  002f2	7a 04		 jp	 SHORT $LN41@Partition_
  002f4	32 c0		 xor	 al, al
  002f6	eb 02		 jmp	 SHORT $LN42@Partition_
$LN41@Partition_:
  002f8	b0 80		 mov	 al, 128			; 00000080H
$LN42@Partition_:

; 45   :         return _Val._Value == 0;

  002fa	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 373  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  002fc	75 12		 jne	 SHORT $LN36@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  002fe	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00300	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  00303	74 08		 je	 SHORT $LN54@Partition_
$LN52@Partition_:
  00305	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0030a	0f 4d c6	 cmovge	 eax, esi
$LN54@Partition_:
  0030d	8b 5d fc	 mov	 ebx, DWORD PTR __Glast$1$[ebp]
$LN36@Partition_:

; 51   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  00310	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7599 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

  00312	74 5c		 je	 SHORT $LN12@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  00314	0f 2f c8	 comiss	 xmm1, xmm0
  00317	76 04		 jbe	 SHORT $LN70@Partition_
  00319	0c ff		 or	 al, 255			; 000000ffH
  0031b	eb 2b		 jmp	 SHORT $LN79@Partition_
$LN70@Partition_:
  0031d	0f 2f c1	 comiss	 xmm0, xmm1
  00320	76 04		 jbe	 SHORT $LN68@Partition_
  00322	b0 01		 mov	 al, 1
  00324	eb 0f		 jmp	 SHORT $LN67@Partition_
$LN68@Partition_:
  00326	0f 2e c1	 ucomiss xmm0, xmm1
  00329	9f		 lahf
  0032a	f6 c4 44	 test	 ah, 68			; 00000044H
  0032d	7a 04		 jp	 SHORT $LN66@Partition_
  0032f	32 c0		 xor	 al, al
  00331	eb 02		 jmp	 SHORT $LN67@Partition_
$LN66@Partition_:
  00333	b0 80		 mov	 al, 128			; 00000080H
$LN67@Partition_:

; 45   :         return _Val._Value == 0;

  00335	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 373  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  00337	75 0f		 jne	 SHORT $LN79@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  00339	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0033c	3b 0f		 cmp	 ecx, DWORD PTR [edi]
  0033e	74 08		 je	 SHORT $LN79@Partition_
$LN77@Partition_:
  00340	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00345	0f 4d c6	 cmovge	 eax, esi
$LN79@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7601 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

  00348	8b 5d fc	 mov	 ebx, DWORD PTR __Glast$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 51   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  0034b	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7601 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

  0034d	74 37		 je	 SHORT $LN384@Partition_

; 7602 :                 break;
; 7603 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

  0034f	83 ea 08	 sub	 edx, 8
  00352	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00355	3b d0		 cmp	 edx, eax
  00357	74 17		 je	 SHORT $LN12@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

  00359	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]

; 101  :     _Left    = _STD move(_Right);

  0035d	f3 0f 11 0a	 movss	 DWORD PTR [edx], xmm1
  00361	8b 07		 mov	 eax, DWORD PTR [edi]

; 102  :     _Right   = _STD move(_Tmp);

  00363	f3 0f 11 47 fc	 movss	 DWORD PTR [edi-4], xmm0

; 100  :     _Ty _Tmp = _STD move(_Left);

  00368	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 101  :     _Left    = _STD move(_Right);

  0036b	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 102  :     _Right   = _STD move(_Tmp);

  0036e	89 0f		 mov	 DWORD PTR [edi], ecx
$LN12@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7598 :         for (; _First < _Glast; --_Glast) {

  00370	8b 45 f8	 mov	 eax, DWORD PTR __First$1$[ebp]
  00373	83 eb 08	 sub	 ebx, 8
  00376	83 ef 08	 sub	 edi, 8
  00379	89 5d fc	 mov	 DWORD PTR __Glast$1$[ebp], ebx
  0037c	3b c3		 cmp	 eax, ebx
  0037e	0f 82 4c ff ff
	ff		 jb	 $LL14@Partition_

; 7601 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

  00384	eb 03		 jmp	 SHORT $LN383@Partition_
$LN384@Partition_:
  00386	8b 45 f8	 mov	 eax, DWORD PTR __First$1$[ebp]
$LN383@Partition_:
  00389	8b 75 f4	 mov	 esi, DWORD PTR __Gfirst$1$[ebp]

; 7604 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));
; 7605 :             }
; 7606 :         }
; 7607 : 
; 7608 :         if (_Glast == _First && _Gfirst == _Last) {

  0038c	3b d8		 cmp	 ebx, eax
$LN388@Partition_:
  0038e	75 5c		 jne	 SHORT $LN27@Partition_
  00390	3b 75 08	 cmp	 esi, DWORD PTR __Last$[ebp]
  00393	0f 84 e0 00 00
	00		 je	 $LN353@Partition_

; 7610 :         }
; 7611 : 
; 7612 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 7613 :             if (_Plast != _Gfirst) {

  00399	8b 5d 0c	 mov	 ebx, DWORD PTR __Plast$1$[ebp]
  0039c	3b de		 cmp	 ebx, esi
  0039e	74 1c		 je	 SHORT $LN115@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 325  :         if (this != _STD addressof(_Right)) {

  003a0	3b d3		 cmp	 edx, ebx
  003a2	74 18		 je	 SHORT $LN115@Partition_

; 101  :     _Left    = _STD move(_Right);

  003a4	8b 03		 mov	 eax, DWORD PTR [ebx]
  003a6	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  003aa	89 02		 mov	 DWORD PTR [edx], eax
  003ac	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 102  :     _Right   = _STD move(_Tmp);

  003af	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0

; 100  :     _Ty _Tmp = _STD move(_Left);

  003b3	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 101  :     _Left    = _STD move(_Right);

  003b6	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 102  :     _Right   = _STD move(_Tmp);

  003b9	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
$LN115@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7617 :             ++_Plast;

  003bc	83 c3 08	 add	 ebx, 8
  003bf	89 5d 0c	 mov	 DWORD PTR __Plast$1$[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 325  :         if (this != _STD addressof(_Right)) {

  003c2	3b d6		 cmp	 edx, esi
  003c4	74 18		 je	 SHORT $LN98@Partition_

; 101  :     _Left    = _STD move(_Right);

  003c6	8b 06		 mov	 eax, DWORD PTR [esi]
  003c8	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  003cc	89 02		 mov	 DWORD PTR [edx], eax
  003ce	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 102  :     _Right   = _STD move(_Tmp);

  003d1	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0

; 100  :     _Ty _Tmp = _STD move(_Left);

  003d5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 101  :     _Left    = _STD move(_Right);

  003d8	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 102  :     _Right   = _STD move(_Tmp);

  003db	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
$LN98@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7620 :             ++_Gfirst;

  003de	8b 45 08	 mov	 eax, DWORD PTR __Last$[ebp]
  003e1	83 c2 08	 add	 edx, 8
  003e4	83 c6 08	 add	 esi, 8
  003e7	e9 01 fe ff ff	 jmp	 $LN389@Partition_
$LN27@Partition_:

; 7621 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

  003ec	8b 45 08	 mov	 eax, DWORD PTR __Last$[ebp]
  003ef	83 c3 f8	 add	 ebx, -8			; fffffff8H
  003f2	89 5d fc	 mov	 DWORD PTR __Glast$1$[ebp], ebx
  003f5	3b f0		 cmp	 esi, eax
  003f7	75 53		 jne	 SHORT $LN30@Partition_

; 7622 :             if (--_Glast != --_Pfirst) {

  003f9	83 ea 08	 sub	 edx, 8
  003fc	3b da		 cmp	 ebx, edx
  003fe	74 1b		 je	 SHORT $LN368@Partition_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 101  :     _Left    = _STD move(_Right);

  00400	8b 02		 mov	 eax, DWORD PTR [edx]
  00402	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  00406	89 03		 mov	 DWORD PTR [ebx], eax
  00408	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 102  :     _Right   = _STD move(_Tmp);

  0040b	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 100  :     _Ty _Tmp = _STD move(_Left);

  0040f	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]

; 101  :     _Left    = _STD move(_Right);

  00412	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 102  :     _Right   = _STD move(_Tmp);

  00415	8b 45 08	 mov	 eax, DWORD PTR __Last$[ebp]
  00418	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN368@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7626 :             _STD iter_swap(_Pfirst, --_Plast);

  0041b	8b 5d 0c	 mov	 ebx, DWORD PTR __Plast$1$[ebp]
  0041e	83 eb 08	 sub	 ebx, 8
  00421	89 5d 0c	 mov	 DWORD PTR __Plast$1$[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 325  :         if (this != _STD addressof(_Right)) {

  00424	3b d3		 cmp	 edx, ebx
  00426	0f 84 c4 fd ff
	ff		 je	 $LL6@Partition_

; 101  :     _Left    = _STD move(_Right);

  0042c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0042e	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00432	89 02		 mov	 DWORD PTR [edx], eax
  00434	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 102  :     _Right   = _STD move(_Tmp);

  00437	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0

; 100  :     _Ty _Tmp = _STD move(_Left);

  0043b	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 101  :     _Left    = _STD move(_Right);

  0043e	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7627 :         } else {

  00441	8b 45 08	 mov	 eax, DWORD PTR __Last$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 102  :     _Right   = _STD move(_Tmp);

  00444	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7627 :         } else {

  00447	e9 a4 fd ff ff	 jmp	 $LL6@Partition_
$LN30@Partition_:

; 7628 :             _STD iter_swap(_Gfirst, --_Glast);

  0044c	89 5d fc	 mov	 DWORD PTR __Glast$1$[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 325  :         if (this != _STD addressof(_Right)) {

  0044f	3b f3		 cmp	 esi, ebx
  00451	74 1b		 je	 SHORT $LN145@Partition_

; 101  :     _Left    = _STD move(_Right);

  00453	8b 03		 mov	 eax, DWORD PTR [ebx]
  00455	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00459	89 06		 mov	 DWORD PTR [esi], eax
  0045b	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 102  :     _Right   = _STD move(_Tmp);

  0045e	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0

; 100  :     _Ty _Tmp = _STD move(_Left);

  00462	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 101  :     _Left    = _STD move(_Right);

  00465	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00468	8b 45 08	 mov	 eax, DWORD PTR __Last$[ebp]

; 102  :     _Right   = _STD move(_Tmp);

  0046b	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
$LN145@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7631 :     }

  0046e	8b 5d 0c	 mov	 ebx, DWORD PTR __Plast$1$[ebp]
  00471	83 c6 08	 add	 esi, 8
  00474	e9 74 fd ff ff	 jmp	 $LN389@Partition_
$LN353@Partition_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00479	8b 4d f0	 mov	 ecx, DWORD PTR ___$ReturnUdt$1$[ebp]
  0047c	8b 45 0c	 mov	 eax, DWORD PTR __Plast$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7609 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  0047f	5f		 pop	 edi
  00480	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00481	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7609 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  00484	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00486	89 11		 mov	 DWORD PTR [ecx], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7609 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);

  00488	5b		 pop	 ebx

; 7632 : }

  00489	8b e5		 mov	 esp, ebp
  0048b	5d		 pop	 ebp
  0048c	c3		 ret	 0
??$_Partition_by_median_guess_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YA?AU?$pair@PAU?$pair@MH@std@@PAU12@@0@PAU?$pair@MH@0@0U?$less@X@0@@Z ENDP ; std::_Partition_by_median_guess_unchecked<std::pair<float,int> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$construct@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@U12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@$$QAU31@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@U12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@$$QAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::construct<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);
; 681  :         }
; 682  :     }

  00003	8b 45 08	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000b	89 0a		 mov	 DWORD PTR [edx], ecx
  0000d	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$construct@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@U12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@1@QAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@1@$$QAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> > >::construct<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@0@Z
_TEXT	SEGMENT
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &>, COMDAT
; __Obj$ = ecx
; _<_Args_0>$ = edx

; 225  : #if _HAS_CXX20
; 226  :     if (_STD is_constant_evaluated()) {
; 227  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 228  :     } else
; 229  : #endif // _HAS_CXX20
; 230  :     {
; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
; 232  :     }
; 233  : }

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	89 01		 mov	 DWORD PTR [ecx], eax
  00004	c3		 ret	 0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &>, COMDAT
; __Arg$ = ecx

; 1426 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1427 : }

  00002	c3		 ret	 0
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
??$forward@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *>, COMDAT
; __Arg$ = ecx

; 1426 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1427 : }

  00002	c3		 ret	 0
??$forward@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$destroy_at@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAXQAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@@Z
_TEXT	SEGMENT
??$destroy_at@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAXQAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@@Z PROC ; std::destroy_at<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >, COMDAT
; __Location$dead$ = ecx

; 305  : #if _HAS_CXX20
; 306  :     if constexpr (is_array_v<_Ty>) {
; 307  :         _Destroy_range(_STD begin(*_Location), _STD end(*_Location));
; 308  :     } else
; 309  : #endif // _HAS_CXX20
; 310  :     {
; 311  :         _Location->~_Ty();
; 312  :     }
; 313  : }

  00000	c2 00 00	 ret	 0
??$destroy_at@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAXQAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@@Z ENDP ; std::destroy_at<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z
_TEXT	SEGMENT
??$addressof@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z PROC ; std::addressof<CPythonItem::SGroundItemInstance *>, COMDAT
; __Val$ = ecx

; 281  :     return __builtin_addressof(_Val);

  00000	8b c1		 mov	 eax, ecx

; 282  : }

  00002	c3		 ret	 0
??$addressof@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z ENDP ; std::addressof<CPythonItem::SGroundItemInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$construct_at@PAUSGroundItemInstance@CPythonItem@@ABQAU12@$0A@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@ABQAU12@@Z
_TEXT	SEGMENT
??$construct_at@PAUSGroundItemInstance@CPythonItem@@ABQAU12@$0A@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@ABQAU12@@Z PROC ; std::construct_at<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance * const &,0>, COMDAT
; __Location$ = ecx
; _<_Args_0>$ = edx

; 218  :     _MSVC_CONSTEXPR return ::new (_Voidify_iter(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	89 01		 mov	 DWORD PTR [ecx], eax
  00004	8b c1		 mov	 eax, ecx

; 219  : }

  00006	c3		 ret	 0
??$construct_at@PAUSGroundItemInstance@CPythonItem@@ABQAU12@$0A@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@ABQAU12@@Z ENDP ; std::construct_at<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance * const &,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Voidify_iter@PAPAUSGroundItemInstance@CPythonItem@@@std@@YAPAXPAPAUSGroundItemInstance@CPythonItem@@@Z
_TEXT	SEGMENT
??$_Voidify_iter@PAPAUSGroundItemInstance@CPythonItem@@@std@@YAPAXPAPAUSGroundItemInstance@CPythonItem@@@Z PROC ; std::_Voidify_iter<CPythonItem::SGroundItemInstance * *>, COMDAT
; __It$ = ecx

; 201  :     if constexpr (is_pointer_v<_Iter>) {
; 202  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  00000	8b c1		 mov	 eax, ecx

; 203  :     } else {
; 204  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 205  :     }
; 206  : }

  00002	c3		 ret	 0
??$_Voidify_iter@PAPAUSGroundItemInstance@CPythonItem@@@std@@YAPAXPAPAUSGroundItemInstance@CPythonItem@@@Z ENDP ; std::_Voidify_iter<CPythonItem::SGroundItemInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$move@AAPAUSGroundItemInstance@CPythonItem@@@std@@YA$$QAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z
_TEXT	SEGMENT
??$move@AAPAUSGroundItemInstance@CPythonItem@@@std@@YA$$QAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z PROC ; std::move<CPythonItem::SGroundItemInstance * &>, COMDAT
; __Arg$ = ecx

; 1437 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1438 : }

  00002	c3		 ret	 0
??$move@AAPAUSGroundItemInstance@CPythonItem@@@std@@YA$$QAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z ENDP ; std::move<CPythonItem::SGroundItemInstance * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_memmove@PAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@00@Z PROC ; std::_Copy_memmove<CPythonItem::SGroundItemInstance * *,CPythonItem::SGroundItemInstance * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);
; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx
  0000a	2b f9		 sub	 edi, ecx
  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  00017	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Copy_memmove@PAPAUSGroundItemInstance@CPythonItem@@PAPAU12@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@PAPAU12@00@Z ENDP ; std::_Copy_memmove<CPythonItem::SGroundItemInstance * *,CPythonItem::SGroundItemInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_To_address@PAPAUSGroundItemInstance@CPythonItem@@@std@@YA?A_PABQAPAUSGroundItemInstance@CPythonItem@@@Z
_TEXT	SEGMENT
??$_To_address@PAPAUSGroundItemInstance@CPythonItem@@@std@@YA?A_PABQAPAUSGroundItemInstance@CPythonItem@@@Z PROC ; std::_To_address<CPythonItem::SGroundItemInstance * *>, COMDAT
; __Val$ = ecx

; 3703 :     _STL_INTERNAL_STATIC_ASSERT(contiguous_iterator<_Iter>);
; 3704 :     return _STD to_address(_Val);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 3705 : }

  00002	c3		 ret	 0
??$_To_address@PAPAUSGroundItemInstance@CPythonItem@@@std@@YA?A_PABQAPAUSGroundItemInstance@CPythonItem@@@Z ENDP ; std::_To_address<CPythonItem::SGroundItemInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Emplace_back@PAUSGroundItemInstance@CPythonItem@@@?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEX$$QAPAUSGroundItemInstance@CPythonItem@@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@PAUSGroundItemInstance@CPythonItem@@@?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEX$$QAPAUSGroundItemInstance@CPythonItem@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_back<CPythonItem::SGroundItemInstance *>, COMDAT
; _this$ = ecx

; 1662 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1663 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR _<_Vals_0>$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	89 02		 mov	 DWORD PTR [edx], eax

; 1664 :         ++_Last;

  0000d	83 41 04 04	 add	 DWORD PTR [ecx+4], 4

; 1665 :     }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??$_Emplace_back@PAUSGroundItemInstance@CPythonItem@@@?$_Uninitialized_backout_al@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@QAEX$$QAPAUSGroundItemInstance@CPythonItem@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<CPythonItem::SGroundItemInstance *> >::_Emplace_back<CPythonItem::SGroundItemInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$move@AAU?$pair@MH@std@@@std@@YA$$QAU?$pair@MH@0@AAU10@@Z
_TEXT	SEGMENT
??$move@AAU?$pair@MH@std@@@std@@YA$$QAU?$pair@MH@0@AAU10@@Z PROC ; std::move<std::pair<float,int> &>, COMDAT
; __Arg$ = ecx

; 1437 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1438 : }

  00002	c3		 ret	 0
??$move@AAU?$pair@MH@std@@@std@@YA$$QAU?$pair@MH@0@AAU10@@Z ENDP ; std::move<std::pair<float,int> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$?RAAU?$pair@MH@std@@AAU01@@?$less@X@std@@QBE_NAAU?$pair@MH@1@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?RAAU?$pair@MH@std@@AAU01@@?$less@X@std@@QBE_NAAU?$pair@MH@1@0@Z PROC ; std::less<void>::operator()<std::pair<float,int> &,std::pair<float,int> &>, COMDAT
; _this$dead$ = ecx

; 248  :         -> decltype(static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right)) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]
  00009	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  0000d	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00011	0f 2f c1	 comiss	 xmm0, xmm1
  00014	76 0b		 jbe	 SHORT $LN12@operator
  00016	0c ff		 or	 al, 255			; 000000ffH

; 51   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  00018	3c ff		 cmp	 al, -1
  0001a	0f 94 c0	 sete	 al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 250  :     }

  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
$LN12@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  00021	0f 2f c8	 comiss	 xmm1, xmm0
  00024	76 04		 jbe	 SHORT $LN10@operator
  00026	b0 01		 mov	 al, 1
  00028	eb 0f		 jmp	 SHORT $LN9@operator
$LN10@operator:
  0002a	0f 2e c8	 ucomiss xmm1, xmm0
  0002d	9f		 lahf
  0002e	f6 c4 44	 test	 ah, 68			; 00000044H
  00031	7a 04		 jp	 SHORT $LN8@operator
  00033	32 c0		 xor	 al, al
  00035	eb 02		 jmp	 SHORT $LN9@operator
$LN8@operator:
  00037	b0 80		 mov	 al, 128			; 00000080H
$LN9@operator:

; 45   :         return _Val._Value == 0;

  00039	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 373  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  0003b	75 20		 jne	 SHORT $LN21@operator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  0003d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00040	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  00043	75 09		 jne	 SHORT $LN19@operator

; 51   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  00045	3c ff		 cmp	 al, -1
  00047	0f 94 c0	 sete	 al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 250  :     }

  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
$LN19@operator:
  0004e	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  0004f	be 01 00 00 00	 mov	 esi, 1
  00054	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00059	0f 4d c6	 cmovge	 eax, esi
  0005c	5e		 pop	 esi
$LN21@operator:

; 51   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  0005d	3c ff		 cmp	 al, -1
  0005f	0f 94 c0	 sete	 al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 250  :     }

  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
??$?RAAU?$pair@MH@std@@AAU01@@?$less@X@std@@QBE_NAAU?$pair@MH@1@0@Z ENDP ; std::less<void>::operator()<std::pair<float,int> &,std::pair<float,int> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Move_backward_unchecked@PAU?$pair@MH@std@@PAU12@@std@@YAPAU?$pair@MH@0@PAU10@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Move_backward_unchecked@PAU?$pair@MH@std@@PAU12@@std@@YAPAU?$pair@MH@0@PAU10@00@Z PROC ; std::_Move_backward_unchecked<std::pair<float,int> *,std::pair<float,int> *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 4241 : _CONSTEXPR20 _BidIt2 _Move_backward_unchecked(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4253 :     while (_First != _Last) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	3b d6		 cmp	 edx, esi
  0000b	74 18		 je	 SHORT $LN3@Move_backw
  0000d	0f 1f 00	 npad	 3
$LL9@Move_backw:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 253  :         first  = _STD forward<_Ty1>(_Right.first);

  00010	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 4254 :         *--_Dest = _STD move(*--_Last);

  00013	83 ea 08	 sub	 edx, 8
  00016	83 e8 08	 sub	 eax, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 253  :         first  = _STD forward<_Ty1>(_Right.first);

  00019	89 08		 mov	 DWORD PTR [eax], ecx

; 254  :         second = _STD forward<_Ty2>(_Right.second);

  0001b	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0001e	89 48 04	 mov	 DWORD PTR [eax+4], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 4253 :     while (_First != _Last) {

  00021	3b d6		 cmp	 edx, esi
  00023	75 eb		 jne	 SHORT $LL9@Move_backw
$LN3@Move_backw:
  00025	5e		 pop	 esi

; 4255 :     }
; 4256 : 
; 4257 :     return _Dest;
; 4258 : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??$_Move_backward_unchecked@PAU?$pair@MH@std@@PAU12@@std@@YAPAU?$pair@MH@0@PAU10@00@Z ENDP ; std::_Move_backward_unchecked<std::pair<float,int> *,std::pair<float,int> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$?4U?$pair@MH@std@@$0A@@?$pair@MH@std@@QAEAAU01@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?4U?$pair@MH@std@@$0A@@?$pair@MH@std@@QAEAAU01@$$QAU01@@Z PROC ; std::pair<float,int>::operator=<std::pair<float,int>,0>, COMDAT
; _this$ = ecx

; 252  :         conjunction_v<is_nothrow_move_assignable<_Ty1>, is_nothrow_move_assignable<_Ty2>>) /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 253  :         first  = _STD forward<_Ty1>(_Right.first);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Right$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 254  :         second = _STD forward<_Ty2>(_Right.second);

  0000a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000d	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 255  :         return *this;

  00010	8b c1		 mov	 eax, ecx

; 256  :     }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
??$?4U?$pair@MH@std@@$0A@@?$pair@MH@std@@QAEAAU01@$$QAU01@@Z ENDP ; std::pair<float,int>::operator=<std::pair<float,int>,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z
_TEXT	SEGMENT
__Max_sequence_non_leaf$1$ = -8				; size = 4
__Top$1$ = -4						; size = 4
__Bottom$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Pop_heap_hole_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z PROC ; std::_Pop_heap_hole_by_index<std::pair<float,int> *,std::pair<float,int>,std::less<void> >, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 6027 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 6028 :     // percolate _Hole to _Bottom, then push _Val
; 6029 :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 6030 : 
; 6031 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 6032 :     const _Diff _Top = _Hole;
; 6033 :     _Diff _Idx       = _Hole;
; 6034 : 
; 6035 :     // Check whether _Idx can have a child before calculating that child's index, since
; 6036 :     // calculating the child's index can trigger integer overflows
; 6037 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Bottom$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 55 fc	 mov	 DWORD PTR __Top$1$[ebp], edx
  00011	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  00014	8b ca		 mov	 ecx, edx
  00016	8b f8		 mov	 edi, eax
  00018	d1 ff		 sar	 edi, 1
  0001a	89 7d f8	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], edi

; 6038 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  0001d	3b d7		 cmp	 edx, edi
  0001f	7d 73		 jge	 SHORT $LN3@Pop_heap_h
$LL2@Pop_heap_h:

; 6039 :         _Idx = 2 * _Idx + 2;

  00021	8d 1c 09	 lea	 ebx, DWORD PTR [ecx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  00024	f3 0f 10 4c de
	10		 movss	 xmm1, DWORD PTR [esi+ebx*8+16]
  0002a	f3 0f 10 44 de
	08		 movss	 xmm0, DWORD PTR [esi+ebx*8+8]
  00030	0f 2f c1	 comiss	 xmm0, xmm1
  00033	76 05		 jbe	 SHORT $LN18@Pop_heap_h
  00035	80 c9 ff	 or	 cl, 255			; 000000ffH
  00038	eb 36		 jmp	 SHORT $LN9@Pop_heap_h
$LN18@Pop_heap_h:
  0003a	0f 2f c8	 comiss	 xmm1, xmm0
  0003d	76 04		 jbe	 SHORT $LN16@Pop_heap_h
  0003f	b1 01		 mov	 cl, 1
  00041	eb 0f		 jmp	 SHORT $LN15@Pop_heap_h
$LN16@Pop_heap_h:
  00043	0f 2e c8	 ucomiss xmm1, xmm0
  00046	9f		 lahf
  00047	f6 c4 44	 test	 ah, 68			; 00000044H
  0004a	7a 04		 jp	 SHORT $LN14@Pop_heap_h
  0004c	32 c9		 xor	 cl, cl
  0004e	eb 02		 jmp	 SHORT $LN15@Pop_heap_h
$LN14@Pop_heap_h:
  00050	b1 80		 mov	 cl, 128			; 00000080H
$LN15@Pop_heap_h:

; 45   :         return _Val._Value == 0;

  00052	84 c9		 test	 cl, cl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 373  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  00054	75 1a		 jne	 SHORT $LN9@Pop_heap_h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  00056	8b 44 de 14	 mov	 eax, DWORD PTR [esi+ebx*8+20]
  0005a	3b 44 de 0c	 cmp	 eax, DWORD PTR [esi+ebx*8+12]
  0005e	74 0d		 je	 SHORT $LN27@Pop_heap_h
$LN25@Pop_heap_h:
  00060	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  00065	b8 01 00 00 00	 mov	 eax, 1
  0006a	0f 4d c8	 cmovge	 ecx, eax
$LN27@Pop_heap_h:
  0006d	8b 7d f8	 mov	 edi, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
$LN9@Pop_heap_h:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 6043 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00070	33 c0		 xor	 eax, eax
  00072	80 f9 ff	 cmp	 cl, -1
  00075	0f 95 c0	 setne	 al
  00078	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0007b	03 cb		 add	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 253  :         first  = _STD forward<_Ty1>(_Right.first);

  0007d	8b 04 ce	 mov	 eax, DWORD PTR [esi+ecx*8]
  00080	89 04 d6	 mov	 DWORD PTR [esi+edx*8], eax

; 254  :         second = _STD forward<_Ty2>(_Right.second);

  00083	8b 44 ce 04	 mov	 eax, DWORD PTR [esi+ecx*8+4]
  00087	89 44 d6 04	 mov	 DWORD PTR [esi+edx*8+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 6044 :         _Hole             = _Idx;

  0008b	8b d1		 mov	 edx, ecx
  0008d	3b cf		 cmp	 ecx, edi
  0008f	7c 90		 jl	 SHORT $LL2@Pop_heap_h
  00091	8b 5d 08	 mov	 ebx, DWORD PTR __Bottom$[ebp]
$LN3@Pop_heap_h:

; 6045 :     }
; 6046 : 
; 6047 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  00094	3b cf		 cmp	 ecx, edi
  00096	75 19		 jne	 SHORT $LN5@Pop_heap_h
  00098	f6 c3 01	 test	 bl, 1
  0009b	75 14		 jne	 SHORT $LN5@Pop_heap_h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 253  :         first  = _STD forward<_Ty1>(_Right.first);

  0009d	8b 44 de f8	 mov	 eax, DWORD PTR [esi+ebx*8-8]
  000a1	89 04 d6	 mov	 DWORD PTR [esi+edx*8], eax

; 254  :         second = _STD forward<_Ty2>(_Right.second);

  000a4	8b 44 de fc	 mov	 eax, DWORD PTR [esi+ebx*8-4]
  000a8	89 44 d6 04	 mov	 DWORD PTR [esi+edx*8+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 6049 :         _Hole             = _Bottom - 1;

  000ac	8d 43 ff	 lea	 eax, DWORD PTR [ebx-1]
  000af	8b d0		 mov	 edx, eax
$LN5@Pop_heap_h:

; 5921 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  000b1	8b 7d fc	 mov	 edi, DWORD PTR __Top$1$[ebp]
  000b4	8d 4a ff	 lea	 ecx, DWORD PTR [edx-1]
  000b7	d1 f9		 sar	 ecx, 1
  000b9	3b fa		 cmp	 edi, edx
  000bb	7d 67		 jge	 SHORT $LN80@Pop_heap_h
  000bd	8b 5d 0c	 mov	 ebx, DWORD PTR __Val$[ebp]
$LL37@Pop_heap_h:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  000c0	f3 0f 10 0c ce	 movss	 xmm1, DWORD PTR [esi+ecx*8]
  000c5	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  000c9	0f 2f c1	 comiss	 xmm0, xmm1
  000cc	76 04		 jbe	 SHORT $LN52@Pop_heap_h
  000ce	0c ff		 or	 al, 255			; 000000ffH
  000d0	eb 38		 jmp	 SHORT $LN43@Pop_heap_h
$LN52@Pop_heap_h:
  000d2	0f 2f c8	 comiss	 xmm1, xmm0
  000d5	76 04		 jbe	 SHORT $LN50@Pop_heap_h
  000d7	b0 01		 mov	 al, 1
  000d9	eb 0f		 jmp	 SHORT $LN49@Pop_heap_h
$LN50@Pop_heap_h:
  000db	0f 2e c8	 ucomiss xmm1, xmm0
  000de	9f		 lahf
  000df	f6 c4 44	 test	 ah, 68			; 00000044H
  000e2	7a 04		 jp	 SHORT $LN48@Pop_heap_h
  000e4	32 c0		 xor	 al, al
  000e6	eb 02		 jmp	 SHORT $LN49@Pop_heap_h
$LN48@Pop_heap_h:
  000e8	b0 80		 mov	 al, 128			; 00000080H
$LN49@Pop_heap_h:

; 45   :         return _Val._Value == 0;

  000ea	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 373  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  000ec	75 1c		 jne	 SHORT $LN43@Pop_heap_h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  000ee	8b 7c ce 04	 mov	 edi, DWORD PTR [esi+ecx*8+4]
  000f2	3b 7b 04	 cmp	 edi, DWORD PTR [ebx+4]
  000f5	74 0d		 je	 SHORT $LN61@Pop_heap_h
$LN59@Pop_heap_h:
  000f7	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000fc	bb 01 00 00 00	 mov	 ebx, 1
  00101	0f 4d c3	 cmovge	 eax, ebx
$LN61@Pop_heap_h:
  00104	8b 5d 0c	 mov	 ebx, DWORD PTR __Val$[ebp]
  00107	8b 7d fc	 mov	 edi, DWORD PTR __Top$1$[ebp]
$LN43@Pop_heap_h:

; 51   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  0010a	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 5921 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  0010c	75 16		 jne	 SHORT $LN80@Pop_heap_h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 253  :         first  = _STD forward<_Ty1>(_Right.first);

  0010e	f3 0f 11 0c d6	 movss	 DWORD PTR [esi+edx*8], xmm1

; 254  :         second = _STD forward<_Ty2>(_Right.second);

  00113	8b 44 ce 04	 mov	 eax, DWORD PTR [esi+ecx*8+4]
  00117	89 44 d6 04	 mov	 DWORD PTR [esi+edx*8+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 5925 :         _Hole             = _Idx;

  0011b	8b d1		 mov	 edx, ecx
  0011d	49		 dec	 ecx
  0011e	d1 f9		 sar	 ecx, 1
  00120	3b fa		 cmp	 edi, edx
  00122	7c 9c		 jl	 SHORT $LL37@Pop_heap_h
$LN80@Pop_heap_h:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 253  :         first  = _STD forward<_Ty1>(_Right.first);

  00124	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]

; 254  :         second = _STD forward<_Ty2>(_Right.second);

  00127	5f		 pop	 edi
  00128	8b 01		 mov	 eax, DWORD PTR [ecx]
  0012a	89 04 d6	 mov	 DWORD PTR [esi+edx*8], eax
  0012d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00130	89 44 d6 04	 mov	 DWORD PTR [esi+edx*8+4], eax
  00134	5e		 pop	 esi
  00135	5b		 pop	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 6053 : }

  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
??$_Pop_heap_hole_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z ENDP ; std::_Pop_heap_hole_by_index<std::pair<float,int> *,std::pair<float,int>,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
;	COMDAT ??$_Pop_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
__Val$1 = -12						; size = 8
__Pred$ = 8						; size = 1
??$_Pop_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z PROC ; std::_Pop_heap_unchecked<std::pair<float,int> *,std::less<void> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 6067 : _CONSTEXPR20 void _Pop_heap_unchecked(_RanIt _First, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 6068 :     // pop *_First to *(_Last - 1) and reheap
; 6069 :     if (2 <= _Last - _First) {

  00006	8b c2		 mov	 eax, edx
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	2b c6		 sub	 eax, esi
  0000d	83 e0 f8	 and	 eax, -8			; fffffff8H
  00010	83 f8 10	 cmp	 eax, 16			; 00000010H
  00013	7c 32		 jl	 SHORT $LN2@Pop_heap_u

; 6071 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  00015	8b 42 f8	 mov	 eax, DWORD PTR [edx-8]
  00018	83 ea 08	 sub	 edx, 8

; 6062 :     _Pop_heap_hole_by_index(

  0001b	ff 75 08	 push	 DWORD PTR __Pred$[ebp]

; 6071 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  0001e	89 45 f4	 mov	 DWORD PTR __Val$1[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 253  :         first  = _STD forward<_Ty1>(_Right.first);

  00021	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 6071 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  00023	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 253  :         first  = _STD forward<_Ty1>(_Right.first);

  00026	89 02		 mov	 DWORD PTR [edx], eax

; 254  :         second = _STD forward<_Ty2>(_Right.second);

  00028	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0002b	89 42 04	 mov	 DWORD PTR [edx+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 6062 :     _Pop_heap_hole_by_index(

  0002e	8d 45 f4	 lea	 eax, DWORD PTR __Val$1[ebp]
  00031	2b d6		 sub	 edx, esi

; 6071 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  00033	89 4d f8	 mov	 DWORD PTR __Val$1[ebp+4], ecx

; 6062 :     _Pop_heap_hole_by_index(

  00036	c1 fa 03	 sar	 edx, 3
  00039	8b ce		 mov	 ecx, esi
  0003b	50		 push	 eax
  0003c	52		 push	 edx
  0003d	33 d2		 xor	 edx, edx
  0003f	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<std::pair<float,int> *,std::pair<float,int>,std::less<void> >
  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@Pop_heap_u:

; 6072 :         _Pop_heap_hole_unchecked(_First, _Last, _Last, _STD move(_Val), _Pred);
; 6073 :     }
; 6074 : }

  00047	5e		 pop	 esi
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??$_Pop_heap_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@0U?$less@X@0@@Z ENDP ; std::_Pop_heap_unchecked<std::pair<float,int> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Prev_iter@PAU?$pair@MH@std@@@std@@YAPAU?$pair@MH@0@PAU10@@Z
_TEXT	SEGMENT
??$_Prev_iter@PAU?$pair@MH@std@@@std@@YAPAU?$pair@MH@0@PAU10@@Z PROC ; std::_Prev_iter<std::pair<float,int> *>, COMDAT
; __First$ = ecx

; 1191 :     return --_First;

  00000	8d 41 f8	 lea	 eax, DWORD PTR [ecx-8]

; 1192 : }

  00003	c3		 ret	 0
??$_Prev_iter@PAU?$pair@MH@std@@@std@@YAPAU?$pair@MH@0@PAU10@@Z ENDP ; std::_Prev_iter<std::pair<float,int> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z
_TEXT	SEGMENT
__Mid$1$ = -8						; size = 4
__First$1$ = -4						; size = 4
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 1
??$_Guess_median_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z PROC ; std::_Guess_median_unchecked<std::pair<float,int> *,std::less<void> >, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 7548 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	57		 push	 edi
  00007	8b fa		 mov	 edi, edx
  00009	8b d1		 mov	 edx, ecx

; 7549 :     // sort median element to middle
; 7550 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 7551 :     const _Diff _Count = _Last - _First;

  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __Last$[ebp]
  0000e	8b c1		 mov	 eax, ecx
  00010	2b c2		 sub	 eax, edx
  00012	89 7d f8	 mov	 DWORD PTR __Mid$1$[ebp], edi
  00015	c1 f8 03	 sar	 eax, 3
  00018	89 55 fc	 mov	 DWORD PTR __First$1$[ebp], edx

; 7552 :     if (40 < _Count) { // Tukey's ninther

  0001b	83 f8 28	 cmp	 eax, 40			; 00000028H
  0001e	7e 64		 jle	 SHORT $LN2@Guess_medi

; 7553 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller
; 7554 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 7555 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  00020	8b 7d 0c	 mov	 edi, DWORD PTR __Pred$[ebp]
  00023	40		 inc	 eax
  00024	53		 push	 ebx
  00025	c1 f8 03	 sar	 eax, 3
  00028	8b d8		 mov	 ebx, eax
  0002a	56		 push	 esi
  0002b	c1 e3 04	 shl	 ebx, 4
  0002e	8d 34 c5 00 00
	00 00		 lea	 esi, DWORD PTR [eax*8]
  00035	8d 0c 16	 lea	 ecx, DWORD PTR [esi+edx]
  00038	57		 push	 edi
  00039	8d 04 13	 lea	 eax, DWORD PTR [ebx+edx]
  0003c	8b d1		 mov	 edx, ecx
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR __First$1$[ebp]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >

; 7556 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00047	8b 55 f8	 mov	 edx, DWORD PTR __Mid$1$[ebp]
  0004a	8b ca		 mov	 ecx, edx
  0004c	57		 push	 edi
  0004d	2b ce		 sub	 ecx, esi
  0004f	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >

; 7557 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

  00058	8b 45 08	 mov	 eax, DWORD PTR __Last$[ebp]
  0005b	8b d0		 mov	 edx, eax
  0005d	57		 push	 edi
  0005e	50		 push	 eax
  0005f	2b c3		 sub	 eax, ebx
  00061	2b d6		 sub	 edx, esi
  00063	8b c8		 mov	 ecx, eax
  00065	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >

; 7558 :         _Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);

  0006a	8b 4d fc	 mov	 ecx, DWORD PTR __First$1$[ebp]
  0006d	57		 push	 edi
  0006e	52		 push	 edx
  0006f	8b 55 f8	 mov	 edx, DWORD PTR __Mid$1$[ebp]
  00072	8d 0c 0e	 lea	 ecx, DWORD PTR [esi+ecx]
  00075	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >
  0007a	83 c4 20	 add	 esp, 32			; 00000020H
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	5f		 pop	 edi

; 7561 :     }
; 7562 : }

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
$LN2@Guess_medi:

; 7559 :     } else {
; 7560 :         _Med3_unchecked(_First, _Mid, _Last, _Pred);

  00084	ff 75 0c	 push	 DWORD PTR __Pred$[ebp]
  00087	8b d7		 mov	 edx, edi
  00089	51		 push	 ecx
  0008a	8b 4d fc	 mov	 ecx, DWORD PTR __First$1$[ebp]
  0008d	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >
  00092	83 c4 08	 add	 esp, 8
  00095	5f		 pop	 edi

; 7561 :     }
; 7562 : }

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
??$_Guess_median_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ENDP ; std::_Guess_median_unchecked<std::pair<float,int> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Next_iter@PAU?$pair@MH@std@@@std@@YAPAU?$pair@MH@0@PAU10@@Z
_TEXT	SEGMENT
??$_Next_iter@PAU?$pair@MH@std@@@std@@YAPAU?$pair@MH@0@PAU10@@Z PROC ; std::_Next_iter<std::pair<float,int> *>, COMDAT
; __First$ = ecx

; 1178 :     return ++_First;

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 1179 : }

  00003	c3		 ret	 0
??$_Next_iter@PAU?$pair@MH@std@@@std@@YAPAU?$pair@MH@0@PAU10@@Z ENDP ; std::_Next_iter<std::pair<float,int> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$iter_swap@PAU?$pair@MH@std@@PAU12@@std@@YAXPAU?$pair@MH@0@0@Z
_TEXT	SEGMENT
??$iter_swap@PAU?$pair@MH@std@@PAU12@@std@@YAXPAU?$pair@MH@0@0@Z PROC ; std::iter_swap<std::pair<float,int> *,std::pair<float,int> *>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 77   : _CONSTEXPR20 void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right) { // swap *_Left and *_Right

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 325  :         if (this != _STD addressof(_Right)) {

  00003	3b f2		 cmp	 esi, edx
  00005	74 18		 je	 SHORT $LN15@iter_swap

; 101  :     _Left    = _STD move(_Right);

  00007	8b 02		 mov	 eax, DWORD PTR [edx]
  00009	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0000d	89 06		 mov	 DWORD PTR [esi], eax
  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 102  :     _Right   = _STD move(_Tmp);

  00012	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 100  :     _Ty _Tmp = _STD move(_Left);

  00016	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 101  :     _Left    = _STD move(_Right);

  00019	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 102  :     _Right   = _STD move(_Tmp);

  0001c	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN15@iter_swap:
  0001f	5e		 pop	 esi

; 78   :     swap(*_Left, *_Right);
; 79   : }

  00020	c3		 ret	 0
??$iter_swap@PAU?$pair@MH@std@@PAU12@@std@@YAXPAU?$pair@MH@0@0@Z ENDP ; std::iter_swap<std::pair<float,int> *,std::pair<float,int> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$?0AAPAU?$pair@MH@std@@AAPAU01@$0A@@?$pair@PAU?$pair@MH@std@@PAU12@@std@@QAE@AAPAU?$pair@MH@1@0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAPAU?$pair@MH@std@@AAPAU01@$0A@@?$pair@PAU?$pair@MH@std@@PAU12@@std@@QAE@AAPAU?$pair@MH@1@0@Z PROC ; std::pair<std::pair<float,int> *,std::pair<float,int> *>::pair<std::pair<float,int> *,std::pair<float,int> *><std::pair<float,int> * &,std::pair<float,int> * &,0>, COMDAT
; _this$ = ecx

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax
  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]
  0000f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 173  :     }

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAPAU?$pair@MH@std@@AAPAU01@$0A@@?$pair@PAU?$pair@MH@std@@PAU12@@std@@QAE@AAPAU?$pair@MH@1@0@Z ENDP ; std::pair<std::pair<float,int> *,std::pair<float,int> *>::pair<std::pair<float,int> *,std::pair<float,int> *><std::pair<float,int> * &,std::pair<float,int> * &,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$construct_at@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@U12@$0A@@std@@YAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@QAU10@$$QAU10@@Z
_TEXT	SEGMENT
??$construct_at@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@U12@$0A@@std@@YAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@QAU10@$$QAU10@@Z PROC ; std::construct_at<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,0>, COMDAT
; __Location$ = ecx
; _<_Args_0>$ = edx

; 218  :     _MSVC_CONSTEXPR return ::new (_Voidify_iter(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00005	89 01		 mov	 DWORD PTR [ecx], eax
  00007	8b c1		 mov	 eax, ecx
  00009	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 219  : }

  0000c	c3		 ret	 0
??$construct_at@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@U12@$0A@@std@@YAPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@QAU10@$$QAU10@@Z ENDP ; std::construct_at<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Voidify_iter@PAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAXPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@@Z
_TEXT	SEGMENT
??$_Voidify_iter@PAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAXPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@@Z PROC ; std::_Voidify_iter<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> *>, COMDAT
; __It$ = ecx

; 201  :     if constexpr (is_pointer_v<_Iter>) {
; 202  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  00000	8b c1		 mov	 eax, ecx

; 203  :     } else {
; 204  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 205  :     }
; 206  : }

  00002	c3		 ret	 0
??$_Voidify_iter@PAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@@std@@YAPAXPAU?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@0@@Z ENDP ; std::_Voidify_iter<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$construct_at@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@$0A@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@QAPAU10@AAPAU10@@Z
_TEXT	SEGMENT
??$construct_at@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@$0A@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@QAPAU10@AAPAU10@@Z PROC ; std::construct_at<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &,0>, COMDAT
; __Location$ = ecx
; _<_Args_0>$ = edx

; 218  :     _MSVC_CONSTEXPR return ::new (_Voidify_iter(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	89 01		 mov	 DWORD PTR [ecx], eax
  00004	8b c1		 mov	 eax, ecx

; 219  : }

  00006	c3		 ret	 0
??$construct_at@PAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@std@@AAPAU12@$0A@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBKPAUSGroundItemInstance@CPythonItem@@@std@@PAX@0@QAPAU10@AAPAU10@@Z ENDP ; std::construct_at<std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> *,std::_Tree_node<std::pair<unsigned long const ,CPythonItem::SGroundItemInstance *>,void *> * &,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$to_address@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@@Z
_TEXT	SEGMENT
??$to_address@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@@Z PROC ; std::to_address<CPythonItem::SGroundItemInstance *>, COMDAT
; __Val$ = ecx

; 290  :     static_assert(!is_function_v<_Ty>,
; 291  :         "N4810 20.10.4 [pointer.conversion]/2: The program is ill-formed if T is a function type.");
; 292  :     return _Val;

  00000	8b c1		 mov	 eax, ecx

; 293  : }

  00002	c3		 ret	 0
??$to_address@PAUSGroundItemInstance@CPythonItem@@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@@Z ENDP ; std::to_address<CPythonItem::SGroundItemInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@PAUSGroundItemInstance@CPythonItem@@@std@@YA$$QAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z
_TEXT	SEGMENT
??$forward@PAUSGroundItemInstance@CPythonItem@@@std@@YA$$QAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z PROC ; std::forward<CPythonItem::SGroundItemInstance *>, COMDAT
; __Arg$ = ecx

; 1426 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1427 : }

  00002	c3		 ret	 0
??$forward@PAUSGroundItemInstance@CPythonItem@@@std@@YA$$QAPAUSGroundItemInstance@CPythonItem@@AAPAU12@@Z ENDP ; std::forward<CPythonItem::SGroundItemInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$construct@PAUSGroundItemInstance@CPythonItem@@PAU12@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@$$QAPAU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAUSGroundItemInstance@CPythonItem@@PAU12@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@$$QAPAU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::construct<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance *>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);
; 681  :         }
; 682  :     }

  00003	8b 45 08	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 02		 mov	 DWORD PTR [edx], eax
  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
??$construct@PAUSGroundItemInstance@CPythonItem@@PAU12@@?$_Default_allocator_traits@V?$allocator@PAUSGroundItemInstance@CPythonItem@@@std@@@std@@SAXAAV?$allocator@PAUSGroundItemInstance@CPythonItem@@@1@QAPAUSGroundItemInstance@CPythonItem@@$$QAPAU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CPythonItem::SGroundItemInstance *> >::construct<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$?__MMH@std@@YA?AUpartial_ordering@0@ABU?$pair@MH@0@0@Z
_TEXT	SEGMENT
??$?__MMH@std@@YA?AUpartial_ordering@0@ABU?$pair@MH@0@0@Z PROC ; std::operator<=><float,int>, COMDAT
; __Left$ = ecx
; __Right$ = edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  00000	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  00004	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00008	0f 2f c1	 comiss	 xmm0, xmm1
  0000b	76 03		 jbe	 SHORT $LN10@operator
  0000d	0c ff		 or	 al, 255			; 000000ffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 377  : }

  0000f	c3		 ret	 0
$LN10@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  00010	0f 2f c8	 comiss	 xmm1, xmm0
  00013	76 04		 jbe	 SHORT $LN8@operator
  00015	b0 01		 mov	 al, 1
  00017	eb 0f		 jmp	 SHORT $LN7@operator
$LN8@operator:
  00019	0f 2e c8	 ucomiss xmm1, xmm0
  0001c	9f		 lahf
  0001d	f6 c4 44	 test	 ah, 68			; 00000044H
  00020	7a 04		 jp	 SHORT $LN6@operator
  00022	32 c0		 xor	 al, al
  00024	eb 02		 jmp	 SHORT $LN7@operator
$LN6@operator:
  00026	b0 80		 mov	 al, 128			; 00000080H
$LN7@operator:

; 45   :         return _Val._Value == 0;

  00028	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 373  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  0002a	75 18		 jne	 SHORT $LN1@operator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  0002c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0002f	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  00032	75 01		 jne	 SHORT $LN17@operator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 377  : }

  00034	c3		 ret	 0
$LN17@operator:
  00035	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  00036	be 01 00 00 00	 mov	 esi, 1
  0003b	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00040	0f 4d c6	 cmovge	 eax, esi
  00043	5e		 pop	 esi
$LN1@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 377  : }

  00044	c3		 ret	 0
??$?__MMH@std@@YA?AUpartial_ordering@0@ABU?$pair@MH@0@0@Z ENDP ; std::operator<=><float,int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@U?$pair@MH@std@@@std@@YA$$QAU?$pair@MH@0@AAU10@@Z
_TEXT	SEGMENT
??$forward@U?$pair@MH@std@@@std@@YA$$QAU?$pair@MH@0@AAU10@@Z PROC ; std::forward<std::pair<float,int> >, COMDAT
; __Arg$ = ecx

; 1426 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1427 : }

  00002	c3		 ret	 0
??$forward@U?$pair@MH@std@@@std@@YA$$QAU?$pair@MH@0@AAU10@@Z ENDP ; std::forward<std::pair<float,int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
;	COMDAT ??$_Push_heap_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z
_TEXT	SEGMENT
__Top$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Push_heap_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z PROC ; std::_Push_heap_by_index<std::pair<float,int> *,std::pair<float,int>,std::less<void> >, COMDAT
; __First$ = ecx
; __Hole$ = edx

; 5917 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Top, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b da		 mov	 ebx, edx
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 5921 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __Top$[ebp]
  0000d	8d 73 ff	 lea	 esi, DWORD PTR [ebx-1]
  00010	d1 fe		 sar	 esi, 1
  00012	3b cb		 cmp	 ecx, ebx
  00014	7d 6e		 jge	 SHORT $LN40@Push_heap_
  00016	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@Push_heap_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  00020	f3 0f 10 0c f7	 movss	 xmm1, DWORD PTR [edi+esi*8]
  00025	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00029	0f 2f c1	 comiss	 xmm0, xmm1
  0002c	76 04		 jbe	 SHORT $LN19@Push_heap_
  0002e	0c ff		 or	 al, 255			; 000000ffH
  00030	eb 38		 jmp	 SHORT $LN10@Push_heap_
$LN19@Push_heap_:
  00032	0f 2f c8	 comiss	 xmm1, xmm0
  00035	76 04		 jbe	 SHORT $LN17@Push_heap_
  00037	b0 01		 mov	 al, 1
  00039	eb 0f		 jmp	 SHORT $LN16@Push_heap_
$LN17@Push_heap_:
  0003b	0f 2e c8	 ucomiss xmm1, xmm0
  0003e	9f		 lahf
  0003f	f6 c4 44	 test	 ah, 68			; 00000044H
  00042	7a 04		 jp	 SHORT $LN15@Push_heap_
  00044	32 c0		 xor	 al, al
  00046	eb 02		 jmp	 SHORT $LN16@Push_heap_
$LN15@Push_heap_:
  00048	b0 80		 mov	 al, 128			; 00000080H
$LN16@Push_heap_:

; 45   :         return _Val._Value == 0;

  0004a	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 373  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  0004c	75 1c		 jne	 SHORT $LN10@Push_heap_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  0004e	8b 4c f7 04	 mov	 ecx, DWORD PTR [edi+esi*8+4]
  00052	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  00055	74 0d		 je	 SHORT $LN28@Push_heap_
$LN26@Push_heap_:
  00057	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0005c	b9 01 00 00 00	 mov	 ecx, 1
  00061	0f 4d c1	 cmovge	 eax, ecx
$LN28@Push_heap_:
  00064	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 376  :     return _Synth_three_way{}(_Left.second, _Right.second);

  00067	8b 4d 08	 mov	 ecx, DWORD PTR __Top$[ebp]
$LN10@Push_heap_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 51   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  0006a	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 5921 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  0006c	75 16		 jne	 SHORT $LN40@Push_heap_
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 253  :         first  = _STD forward<_Ty1>(_Right.first);

  0006e	f3 0f 11 0c df	 movss	 DWORD PTR [edi+ebx*8], xmm1

; 254  :         second = _STD forward<_Ty2>(_Right.second);

  00073	8b 44 f7 04	 mov	 eax, DWORD PTR [edi+esi*8+4]
  00077	89 44 df 04	 mov	 DWORD PTR [edi+ebx*8+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 5925 :         _Hole             = _Idx;

  0007b	8b de		 mov	 ebx, esi
  0007d	4e		 dec	 esi
  0007e	d1 fe		 sar	 esi, 1
  00080	3b cb		 cmp	 ecx, ebx
  00082	7c 9c		 jl	 SHORT $LL4@Push_heap_
$LN40@Push_heap_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 253  :         first  = _STD forward<_Ty1>(_Right.first);

  00084	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  00087	8b 01		 mov	 eax, DWORD PTR [ecx]
  00089	89 04 df	 mov	 DWORD PTR [edi+ebx*8], eax

; 254  :         second = _STD forward<_Ty2>(_Right.second);

  0008c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0008f	89 44 df 04	 mov	 DWORD PTR [edi+ebx*8+4], eax
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	5b		 pop	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 5929 : }

  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
??$_Push_heap_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z ENDP ; std::_Push_heap_by_index<std::pair<float,int> *,std::pair<float,int>,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
;	COMDAT ??$_Pop_heap_hole_unchecked@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00$$QAU10@U?$less@X@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Val$ = 12						; size = 4
__Pred$ = 16						; size = 1
??$_Pop_heap_hole_unchecked@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00$$QAU10@U?$less@X@0@@Z PROC ; std::_Pop_heap_hole_unchecked<std::pair<float,int> *,std::pair<float,int>,std::less<void> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 6056 : _CONSTEXPR20 void _Pop_heap_hole_unchecked(_RanIt _First, _RanIt _Last, _RanIt _Dest, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 253  :         first  = _STD forward<_Ty1>(_Right.first);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 6056 : _CONSTEXPR20 void _Pop_heap_hole_unchecked(_RanIt _First, _RanIt _Last, _RanIt _Dest, _Ty&& _Val, _Pr _Pred) {

  00005	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 253  :         first  = _STD forward<_Ty1>(_Right.first);

  00006	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
  00009	89 06		 mov	 DWORD PTR [esi], eax

; 254  :         second = _STD forward<_Ty2>(_Right.second);

  0000b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000e	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 6062 :     _Pop_heap_hole_by_index(

  00011	5e		 pop	 esi
  00012	2b d1		 sub	 edx, ecx
  00014	c1 fa 03	 sar	 edx, 3
  00017	89 55 08	 mov	 DWORD PTR __Dest$[ebp], edx
  0001a	33 d2		 xor	 edx, edx

; 6063 :         _First, static_cast<_Diff>(0), static_cast<_Diff>(_Last - _First), _STD forward<_Ty>(_Val), _Pred);
; 6064 : }

  0001c	5d		 pop	 ebp

; 6062 :     _Pop_heap_hole_by_index(

  0001d	e9 00 00 00 00	 jmp	 ??$_Pop_heap_hole_by_index@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@HH$$QAU10@U?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<std::pair<float,int> *,std::pair<float,int>,std::less<void> >
??$_Pop_heap_hole_unchecked@PAU?$pair@MH@std@@U12@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00$$QAU10@U?$less@X@0@@Z ENDP ; std::_Pop_heap_hole_unchecked<std::pair<float,int> *,std::pair<float,int>,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
;	COMDAT ??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z
_TEXT	SEGMENT
__Last$ = 8						; size = 4
__Pred$ = 12						; size = 1
??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z PROC ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >, COMDAT
; __First$ = ecx
; __Mid$ = edx

; 7532 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  00003	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7532 : _CONSTEXPR20 void _Med3_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00007	53		 push	 ebx
  00008	8b 5d 08	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000b	56		 push	 esi
  0000c	8b f1		 mov	 esi, ecx
  0000e	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  0000f	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00013	0f 2f c1	 comiss	 xmm0, xmm1
  00016	76 04		 jbe	 SHORT $LN17@Med3_unche
  00018	0c ff		 or	 al, 255			; 000000ffH
  0001a	eb 31		 jmp	 SHORT $LN26@Med3_unche
$LN17@Med3_unche:
  0001c	0f 2f c8	 comiss	 xmm1, xmm0
  0001f	76 04		 jbe	 SHORT $LN15@Med3_unche
  00021	b0 01		 mov	 al, 1
  00023	eb 0f		 jmp	 SHORT $LN14@Med3_unche
$LN15@Med3_unche:
  00025	0f 2e c8	 ucomiss xmm1, xmm0
  00028	9f		 lahf
  00029	f6 c4 44	 test	 ah, 68			; 00000044H
  0002c	7a 04		 jp	 SHORT $LN13@Med3_unche
  0002e	32 c0		 xor	 al, al
  00030	eb 02		 jmp	 SHORT $LN14@Med3_unche
$LN13@Med3_unche:
  00032	b0 80		 mov	 al, 128			; 00000080H
$LN14@Med3_unche:

; 45   :         return _Val._Value == 0;

  00034	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 373  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  00036	75 15		 jne	 SHORT $LN26@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  00038	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0003b	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  0003e	74 0d		 je	 SHORT $LN26@Med3_unche
$LN24@Med3_unche:
  00040	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00045	b9 01 00 00 00	 mov	 ecx, 1
  0004a	0f 4d c1	 cmovge	 eax, ecx
$LN26@Med3_unche:

; 51   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  0004d	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7534 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0004f	75 18		 jne	 SHORT $LN70@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 325  :         if (this != _STD addressof(_Right)) {

  00051	3b d6		 cmp	 edx, esi
  00053	74 14		 je	 SHORT $LN70@Med3_unche

; 101  :     _Left    = _STD move(_Right);

  00055	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
  00059	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 102  :     _Right   = _STD move(_Tmp);

  0005c	f3 0f 11 0e	 movss	 DWORD PTR [esi], xmm1

; 100  :     _Ty _Tmp = _STD move(_Left);

  00060	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 101  :     _Left    = _STD move(_Right);

  00063	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 102  :     _Right   = _STD move(_Tmp);

  00066	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
$LN70@Med3_unche:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  00069	f3 0f 10 0b	 movss	 xmm1, DWORD PTR [ebx]
  0006d	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00071	0f 2f c1	 comiss	 xmm0, xmm1
  00074	76 04		 jbe	 SHORT $LN42@Med3_unche
  00076	0c ff		 or	 al, 255			; 000000ffH
  00078	eb 31		 jmp	 SHORT $LN51@Med3_unche
$LN42@Med3_unche:
  0007a	0f 2f c8	 comiss	 xmm1, xmm0
  0007d	76 04		 jbe	 SHORT $LN40@Med3_unche
  0007f	b0 01		 mov	 al, 1
  00081	eb 0f		 jmp	 SHORT $LN39@Med3_unche
$LN40@Med3_unche:
  00083	0f 2e c8	 ucomiss xmm1, xmm0
  00086	9f		 lahf
  00087	f6 c4 44	 test	 ah, 68			; 00000044H
  0008a	7a 04		 jp	 SHORT $LN38@Med3_unche
  0008c	32 c0		 xor	 al, al
  0008e	eb 02		 jmp	 SHORT $LN39@Med3_unche
$LN38@Med3_unche:
  00090	b0 80		 mov	 al, 128			; 00000080H
$LN39@Med3_unche:

; 45   :         return _Val._Value == 0;

  00092	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 373  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  00094	75 15		 jne	 SHORT $LN51@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  00096	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00099	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]
  0009c	74 0d		 je	 SHORT $LN51@Med3_unche
$LN49@Med3_unche:
  0009e	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000a3	b9 01 00 00 00	 mov	 ecx, 1
  000a8	0f 4d c1	 cmovge	 eax, ecx
$LN51@Med3_unche:

; 51   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  000ab	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7538 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  000ad	75 76		 jne	 SHORT $LN125@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 325  :         if (this != _STD addressof(_Right)) {

  000af	3b da		 cmp	 ebx, edx
  000b1	74 14		 je	 SHORT $LN127@Med3_unche

; 101  :     _Left    = _STD move(_Right);

  000b3	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0
  000b7	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 102  :     _Right   = _STD move(_Tmp);

  000ba	f3 0f 11 0a	 movss	 DWORD PTR [edx], xmm1

; 100  :     _Ty _Tmp = _STD move(_Left);

  000be	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]

; 101  :     _Left    = _STD move(_Right);

  000c1	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 102  :     _Right   = _STD move(_Tmp);

  000c4	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN127@Med3_unche:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  000c7	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [edx]
  000cb	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  000cf	0f 2f c1	 comiss	 xmm0, xmm1
  000d2	76 04		 jbe	 SHORT $LN97@Med3_unche
  000d4	0c ff		 or	 al, 255			; 000000ffH
  000d6	eb 31		 jmp	 SHORT $LN106@Med3_unche
$LN97@Med3_unche:
  000d8	0f 2f c8	 comiss	 xmm1, xmm0
  000db	76 04		 jbe	 SHORT $LN95@Med3_unche
  000dd	b0 01		 mov	 al, 1
  000df	eb 0f		 jmp	 SHORT $LN94@Med3_unche
$LN95@Med3_unche:
  000e1	0f 2e c8	 ucomiss xmm1, xmm0
  000e4	9f		 lahf
  000e5	f6 c4 44	 test	 ah, 68			; 00000044H
  000e8	7a 04		 jp	 SHORT $LN93@Med3_unche
  000ea	32 c0		 xor	 al, al
  000ec	eb 02		 jmp	 SHORT $LN94@Med3_unche
$LN93@Med3_unche:
  000ee	b0 80		 mov	 al, 128			; 00000080H
$LN94@Med3_unche:

; 45   :         return _Val._Value == 0;

  000f0	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 373  :     if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {

  000f2	75 15		 jne	 SHORT $LN106@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare

; 346  :             return _Left <=> _Right;

  000f4	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000f7	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  000fa	74 0d		 je	 SHORT $LN106@Med3_unche
$LN104@Med3_unche:
  000fc	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00101	b9 01 00 00 00	 mov	 ecx, 1
  00106	0f 4d c1	 cmovge	 eax, ecx
$LN106@Med3_unche:

; 51   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  00109	3c ff		 cmp	 al, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7541 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0010b	75 18		 jne	 SHORT $LN125@Med3_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 325  :         if (this != _STD addressof(_Right)) {

  0010d	3b d6		 cmp	 edx, esi
  0010f	74 14		 je	 SHORT $LN125@Med3_unche

; 101  :     _Left    = _STD move(_Right);

  00111	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
  00115	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 102  :     _Right   = _STD move(_Tmp);

  00118	f3 0f 11 0e	 movss	 DWORD PTR [esi], xmm1

; 100  :     _Ty _Tmp = _STD move(_Left);

  0011c	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 101  :     _Left    = _STD move(_Right);

  0011f	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 102  :     _Right   = _STD move(_Tmp);

  00122	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
$LN125@Med3_unche:
  00125	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7545 : }

  00126	5e		 pop	 esi
  00127	5b		 pop	 ebx
  00128	5d		 pop	 ebp
  00129	c3		 ret	 0
??$_Med3_unchecked@PAU?$pair@MH@std@@U?$less@X@2@@std@@YAXPAU?$pair@MH@0@00U?$less@X@0@@Z ENDP ; std::_Med3_unchecked<std::pair<float,int> *,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$swap@MH$0A@@std@@YAXAAU?$pair@MH@0@0@Z
_TEXT	SEGMENT
??$swap@MH$0A@@std@@YAXAAU?$pair@MH@0@0@Z PROC		; std::swap<float,int,0>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 352  : _CONSTEXPR20 void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>& _Right) noexcept(noexcept(_Left.swap(_Right))) {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 325  :         if (this != _STD addressof(_Right)) {

  00003	3b f2		 cmp	 esi, edx
  00005	74 18		 je	 SHORT $LN13@swap

; 101  :     _Left    = _STD move(_Right);

  00007	8b 02		 mov	 eax, DWORD PTR [edx]
  00009	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0000d	89 06		 mov	 DWORD PTR [esi], eax
  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 102  :     _Right   = _STD move(_Tmp);

  00012	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 100  :     _Ty _Tmp = _STD move(_Left);

  00016	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 101  :     _Left    = _STD move(_Right);

  00019	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 102  :     _Right   = _STD move(_Tmp);

  0001c	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN13@swap:
  0001f	5e		 pop	 esi

; 353  :     _Left.swap(_Right);
; 354  : }

  00020	c3		 ret	 0
??$swap@MH$0A@@std@@YAXAAU?$pair@MH@0@0@Z ENDP		; std::swap<float,int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@AAPAU?$pair@MH@std@@@std@@YAAAPAU?$pair@MH@0@AAPAU10@@Z
_TEXT	SEGMENT
??$forward@AAPAU?$pair@MH@std@@@std@@YAAAPAU?$pair@MH@0@AAPAU10@@Z PROC ; std::forward<std::pair<float,int> * &>, COMDAT
; __Arg$ = ecx

; 1426 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1427 : }

  00002	c3		 ret	 0
??$forward@AAPAU?$pair@MH@std@@@std@@YAAAPAU?$pair@MH@0@AAPAU10@@Z ENDP ; std::forward<std::pair<float,int> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$construct_at@PAUSGroundItemInstance@CPythonItem@@PAU12@$0A@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@$$QAPAU12@@Z
_TEXT	SEGMENT
??$construct_at@PAUSGroundItemInstance@CPythonItem@@PAU12@$0A@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@$$QAPAU12@@Z PROC ; std::construct_at<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance *,0>, COMDAT
; __Location$ = ecx
; _<_Args_0>$ = edx

; 218  :     _MSVC_CONSTEXPR return ::new (_Voidify_iter(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	89 01		 mov	 DWORD PTR [ecx], eax
  00004	8b c1		 mov	 eax, ecx

; 219  : }

  00006	c3		 ret	 0
??$construct_at@PAUSGroundItemInstance@CPythonItem@@PAU12@$0A@@std@@YAPAPAUSGroundItemInstance@CPythonItem@@QAPAU12@$$QAPAU12@@Z ENDP ; std::construct_at<CPythonItem::SGroundItemInstance *,CPythonItem::SGroundItemInstance *,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ?swap@?$pair@MH@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?swap@?$pair@MH@std@@QAEXAAU12@@Z PROC			; std::pair<float,int>::swap, COMDAT
; _this$ = ecx

; 324  :         _Is_nothrow_swappable<_Ty1>::value&& _Is_nothrow_swappable<_Ty2>::value) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 325  :         if (this != _STD addressof(_Right)) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	8b d1		 mov	 edx, ecx
  00009	3b d6		 cmp	 edx, esi
  0000b	74 18		 je	 SHORT $LN11@swap

; 101  :     _Left    = _STD move(_Right);

  0000d	8b 06		 mov	 eax, DWORD PTR [esi]
  0000f	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00013	89 02		 mov	 DWORD PTR [edx], eax
  00015	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 102  :     _Right   = _STD move(_Tmp);

  00018	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0

; 100  :     _Ty _Tmp = _STD move(_Left);

  0001c	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 101  :     _Left    = _STD move(_Right);

  0001f	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 102  :     _Right   = _STD move(_Tmp);

  00022	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
$LN11@swap:
  00025	5e		 pop	 esi

; 326  :             _Swap_adl(first, _Right.first);
; 327  :             _Swap_adl(second, _Right.second);
; 328  :         }
; 329  :     }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?swap@?$pair@MH@std@@QAEXAAU12@@Z ENDP			; std::pair<float,int>::swap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@U?$pair@MH@std@@@std@@YAPAU?$pair@MH@0@AAU10@@Z
_TEXT	SEGMENT
??$addressof@U?$pair@MH@std@@@std@@YAPAU?$pair@MH@0@AAU10@@Z PROC ; std::addressof<std::pair<float,int> >, COMDAT
; __Val$ = ecx

; 281  :     return __builtin_addressof(_Val);

  00000	8b c1		 mov	 eax, ecx

; 282  : }

  00002	c3		 ret	 0
??$addressof@U?$pair@MH@std@@@std@@YAPAU?$pair@MH@0@AAU10@@Z ENDP ; std::addressof<std::pair<float,int> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$_Swap_adl@M@std@@YAXAAM0@Z
_TEXT	SEGMENT
??$_Swap_adl@M@std@@YAXAAM0@Z PROC			; std::_Swap_adl<float>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 100  :     _Ty _Tmp = _STD move(_Left);

  00000	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]

; 101  :     _Left    = _STD move(_Right);

  00004	8b 02		 mov	 eax, DWORD PTR [edx]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

  00008	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 107  :     swap(_Left, _Right);
; 108  : }

  0000c	c3		 ret	 0
??$_Swap_adl@M@std@@YAXAAM0@Z ENDP			; std::_Swap_adl<float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$_Swap_adl@H@std@@YAXAAH0@Z
_TEXT	SEGMENT
??$_Swap_adl@H@std@@YAXAAH0@Z PROC			; std::_Swap_adl<int>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 101  :     _Left    = _STD move(_Right);

  00000	8b 02		 mov	 eax, DWORD PTR [edx]

; 106  : _CONSTEXPR20 void _Swap_adl(_Ty& _Left, _Ty& _Right) noexcept(_Is_nothrow_swappable<_Ty>::value) {

  00002	56		 push	 esi

; 100  :     _Ty _Tmp = _STD move(_Left);

  00003	8b 31		 mov	 esi, DWORD PTR [ecx]

; 101  :     _Left    = _STD move(_Right);

  00005	89 01		 mov	 DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

  00007	89 32		 mov	 DWORD PTR [edx], esi
  00009	5e		 pop	 esi

; 107  :     swap(_Left, _Right);
; 108  : }

  0000a	c3		 ret	 0
??$_Swap_adl@H@std@@YAXAAH0@Z ENDP			; std::_Swap_adl<int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$swap@H$0A@@std@@YAXAAH0@Z
_TEXT	SEGMENT
??$swap@H$0A@@std@@YAXAAH0@Z PROC			; std::swap<int,0>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 100  :     _Ty _Tmp = _STD move(_Left);
; 101  :     _Left    = _STD move(_Right);

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	56		 push	 esi
  00003	8b 31		 mov	 esi, DWORD PTR [ecx]
  00005	89 01		 mov	 DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

  00007	89 32		 mov	 DWORD PTR [edx], esi
  00009	5e		 pop	 esi

; 103  : }

  0000a	c3		 ret	 0
??$swap@H$0A@@std@@YAXAAH0@Z ENDP			; std::swap<int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$move@AAM@std@@YA$$QAMAAM@Z
_TEXT	SEGMENT
??$move@AAM@std@@YA$$QAMAAM@Z PROC			; std::move<float &>, COMDAT
; __Arg$ = ecx

; 1437 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1438 : }

  00002	c3		 ret	 0
??$move@AAM@std@@YA$$QAMAAM@Z ENDP			; std::move<float &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
;	COMDAT ??$swap@M$0A@@std@@YAXAAM0@Z
_TEXT	SEGMENT
??$swap@M$0A@@std@@YAXAAM0@Z PROC			; std::swap<float,0>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 100  :     _Ty _Tmp = _STD move(_Left);

  00000	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]

; 101  :     _Left    = _STD move(_Right);

  00004	8b 02		 mov	 eax, DWORD PTR [edx]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 102  :     _Right   = _STD move(_Tmp);

  00008	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0

; 103  : }

  0000c	c3		 ret	 0
??$swap@M$0A@@std@@YAXAAM0@Z ENDP			; std::swap<float,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
;	COMDAT ??Bstrong_ordering@std@@QBE?AUpartial_ordering@1@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??Bstrong_ordering@std@@QBE?AUpartial_ordering@1@XZ PROC ; std::strong_ordering::operator std::partial_ordering, COMDAT
; _this$ = ecx

; 172  :     constexpr operator partial_ordering() const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 173  :         return {static_cast<_Compare_t>(_Value)};

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8a 09		 mov	 cl, BYTE PTR [ecx]
  00008	88 08		 mov	 BYTE PTR [eax], cl

; 174  :     }

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??Bstrong_ordering@std@@QBE?AUpartial_ordering@1@XZ ENDP ; std::strong_ordering::operator std::partial_ordering
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
;	COMDAT ??8std@@YA_NUpartial_ordering@0@$$T@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 1
??8std@@YA_NUpartial_ordering@0@$$T@Z PROC		; std::operator==, COMDAT
; ___formal$dead$ = ecx

; 44   :     _NODISCARD_FRIEND constexpr bool operator==(const partial_ordering _Val, _Literal_zero) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 45   :         return _Val._Value == 0;

  00003	80 7d 08 00	 cmp	 BYTE PTR __Val$[ebp], 0
  00007	0f 94 c0	 sete	 al

; 46   :     }

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
??8std@@YA_NUpartial_ordering@0@$$T@Z ENDP		; std::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\compare
;	COMDAT ??Mstd@@YA_NUpartial_ordering@0@$$T@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 1
??Mstd@@YA_NUpartial_ordering@0@$$T@Z PROC		; std::operator<, COMDAT
; ___formal$dead$ = ecx

; 50   :     _NODISCARD_FRIEND constexpr bool operator<(const partial_ordering _Val, _Literal_zero) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 51   :         return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);

  00003	80 7d 08 ff	 cmp	 BYTE PTR __Val$[ebp], -1
  00007	0f 94 c0	 sete	 al

; 52   :     }

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
??Mstd@@YA_NUpartial_ordering@0@$$T@Z ENDP		; std::operator<
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
_cosf	PROC						; COMDAT
; __X$ = xmm0s

; 653  :             return (float)cos(_X);

  00000	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00004	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  00009	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0

; 654  :         }

  0000d	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv68 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 753  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 08	 sub	 esp, 8
  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __X$[ebp]

; 754  :             return (float)sin(_X);

  0000e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00011	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00016	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0001a	f3 0f 11 44 24
	04		 movss	 DWORD PTR tv68[esp+8], xmm0
  00020	d9 44 24 04	 fld	 DWORD PTR tv68[esp+8]

; 755  :         }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
;	COMDAT ?D3DXQuaternionConjugate@@YAPAUD3DXQUATERNION@@PAU1@PBU1@@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
_pQ$ = 12						; size = 4
?D3DXQuaternionConjugate@@YAPAUD3DXQUATERNION@@PAU1@PBU1@@Z PROC ; D3DXQuaternionConjugate, COMDAT

; 1610 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1611 : #ifdef D3DX_DEBUG
; 1612 :     if(!pOut || !pQ)
; 1613 :         return NULL;
; 1614 : #endif
; 1615 : 
; 1616 :     pOut->x = -pQ->x;

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _pQ$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR _pOut$[ebp]
  00009	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00011	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00015	0f 57 c1	 xorps	 xmm0, xmm1
  00018	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 1617 :     pOut->y = -pQ->y;

  0001c	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00021	0f 57 c1	 xorps	 xmm0, xmm1
  00024	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 1618 :     pOut->z = -pQ->z;

  00029	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0002e	0f 57 c1	 xorps	 xmm0, xmm1
  00031	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 1619 :     pOut->w =  pQ->w;

  00036	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00039	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 1620 :     return pOut;
; 1621 : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
?D3DXQuaternionConjugate@@YAPAUD3DXQUATERNION@@PAU1@PBU1@@Z ENDP ; D3DXQuaternionConjugate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.h
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT
??0D3DXQUATERNION@@QAE@XZ PROC				; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 332  :     D3DXQUATERNION() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXQUATERNION@@QAE@XZ ENDP				; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??GD3DXVECTOR3@@QBE?AU0@XZ PROC				; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 248  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 180  :     x = fx;

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  00006	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0000e	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00012	0f 57 c1	 xorps	 xmm0, xmm1

; 180  :     x = fx;

  00015	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  00019	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0001e	0f 57 c1	 xorps	 xmm0, xmm1

; 181  :     y = fy;

  00021	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 249  :     return D3DXVECTOR3(-x, -y, -z);

  00026	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  0002b	0f 57 c1	 xorps	 xmm0, xmm1

; 182  :     z = fz;

  0002e	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 250  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
??GD3DXVECTOR3@@QBE?AU0@XZ ENDP				; D3DXVECTOR3::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\extern\include\d3dx8math.inl
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_fw$ = 20						; size = 4
??0D3DXQUATERNION@@QAE@MMMM@Z PROC			; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 666  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 667  :     x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]

; 668  :     y = fy;
; 669  :     z = fz;
; 670  :     w = fw;
; 671  : }

  00008	8b c1		 mov	 eax, ecx
  0000a	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  0000e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00013	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  00018	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0001d	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
  00022	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fw$[ebp]
  00027	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0
  0002c	5d		 pop	 ebp
  0002d	c2 10 00	 ret	 16			; 00000010H
??0D3DXQUATERNION@@QAE@MMMM@Z ENDP			; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
END
