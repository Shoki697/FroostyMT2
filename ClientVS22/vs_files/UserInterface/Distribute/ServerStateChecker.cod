; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

	TITLE	e:\metin2_server\solwaynesf v6\clientvs22\vs_files\userinterface\distribute\serverstatechecker.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BD@EEDMKMGJ@NotifyChannelState@		; `string'
PUBLIC	??_R2?$CSingleton@VCServerStateChecker@@@@8	; CSingleton<CServerStateChecker>::`RTTI Base Class Array'
PUBLIC	??_R2CServerStateChecker@@8			; CServerStateChecker::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CServerStateChecker@@8		; CServerStateChecker::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCServerStateChecker@@@@8 ; CSingleton<CServerStateChecker>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCServerStateChecker@@@@@8	; CSingleton<CServerStateChecker> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCServerStateChecker@@@@8	; CSingleton<CServerStateChecker>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVCServerStateChecker@@@8			; CServerStateChecker `RTTI Type Descriptor'
PUBLIC	??_R3CServerStateChecker@@8			; CServerStateChecker::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4?$CSingleton@VCServerStateChecker@@@@6B@	; CSingleton<CServerStateChecker>::`RTTI Complete Object Locator'
PUBLIC	??_R4CServerStateChecker@@6B@			; CServerStateChecker::`RTTI Complete Object Locator'
PUBLIC	??_7?$CSingleton@VCServerStateChecker@@@@6B@	; CSingleton<CServerStateChecker>::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCServerStateChecker@@@@0PAVCServerStateChecker@@A ; CSingleton<CServerStateChecker>::ms_singleton
PUBLIC	??_7CServerStateChecker@@6B@			; CServerStateChecker::`vftable'
;	COMDAT ?ms_singleton@?$CSingleton@VCServerStateChecker@@@@0PAVCServerStateChecker@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCServerStateChecker@@@@0PAVCServerStateChecker@@A DD 01H DUP (?) ; CSingleton<CServerStateChecker>::ms_singleton
_BSS	ENDS
;	COMDAT ??_7CServerStateChecker@@6B@
CONST	SEGMENT
??_7CServerStateChecker@@6B@ DD FLAT:??_R4CServerStateChecker@@6B@ ; CServerStateChecker::`vftable'
	DD	FLAT:??_ECServerStateChecker@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCServerStateChecker@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCServerStateChecker@@@@6B@ DD FLAT:??_R4?$CSingleton@VCServerStateChecker@@@@6B@ ; CSingleton<CServerStateChecker>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCServerStateChecker@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4CServerStateChecker@@6B@
rdata$r	SEGMENT
??_R4CServerStateChecker@@6B@ DD 00H			; CServerStateChecker::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCServerStateChecker@@@8
	DD	FLAT:??_R3CServerStateChecker@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CSingleton@VCServerStateChecker@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCServerStateChecker@@@@6B@ DD 00H	; CSingleton<CServerStateChecker>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCServerStateChecker@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCServerStateChecker@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CServerStateChecker@@8
rdata$r	SEGMENT
??_R3CServerStateChecker@@8 DD 00H			; CServerStateChecker::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CServerStateChecker@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCServerStateChecker@@@8
data$rs	SEGMENT
??_R0?AVCServerStateChecker@@@8 DD FLAT:??_7type_info@@6B@ ; CServerStateChecker `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCServerStateChecker@@', 00H
data$rs	ENDS
;	COMDAT ??_R3?$CSingleton@VCServerStateChecker@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCServerStateChecker@@@@8 DD 00H	; CSingleton<CServerStateChecker>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCServerStateChecker@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCServerStateChecker@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCServerStateChecker@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CServerStateChecker> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCServerStateChecker@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCServerStateChecker@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCServerStateChecker@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCServerStateChecker@@@@@8 ; CSingleton<CServerStateChecker>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCServerStateChecker@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CServerStateChecker@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CServerStateChecker@@8 DD FLAT:??_R0?AVCServerStateChecker@@@8 ; CServerStateChecker::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CServerStateChecker@@8
rdata$r	ENDS
;	COMDAT ??_R2CServerStateChecker@@8
rdata$r	SEGMENT
??_R2CServerStateChecker@@8 DD FLAT:??_R1A@?0A@EA@CServerStateChecker@@8 ; CServerStateChecker::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCServerStateChecker@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCServerStateChecker@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCServerStateChecker@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCServerStateChecker@@@@8 ; CSingleton<CServerStateChecker>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_C@_0BD@EEDMKMGJ@NotifyChannelState@
CONST	SEGMENT
??_C@_0BD@EEDMKMGJ@NotifyChannelState@ DB 'NotifyChannelState', 00H ; `string'
PUBLIC	??$_Voidify_iter@PAUSChannel@CServerStateChecker@@@std@@YAPAXPAUSChannel@CServerStateChecker@@@Z ; std::_Voidify_iter<CServerStateChecker::SChannel *>
PUBLIC	??$construct_at@USChannel@CServerStateChecker@@ABU12@$0A@@std@@YAPAUSChannel@CServerStateChecker@@QAU12@ABU12@@Z ; std::construct_at<CServerStateChecker::SChannel,CServerStateChecker::SChannel const &,0>
PUBLIC	??$destroy_at@USChannel@CServerStateChecker@@@std@@YAXQAUSChannel@CServerStateChecker@@@Z ; std::destroy_at<CServerStateChecker::SChannel>
PUBLIC	??$construct_at@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@ABQAU12@$0A@@std@@YAPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@QAPAU10@ABQAU10@@Z ; std::construct_at<std::_List_node<CServerStateChecker::SChannel,void *> *,std::_List_node<CServerStateChecker::SChannel,void *> * const &,0>
PUBLIC	??$forward@ABQAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAABQAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@ABQAU10@@Z ; std::forward<std::_List_node<CServerStateChecker::SChannel,void *> * const &>
PUBLIC	??$construct@USChannel@CServerStateChecker@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@QAUSChannel@CServerStateChecker@@ABU34@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::construct<CServerStateChecker::SChannel,CServerStateChecker::SChannel const &>
PUBLIC	??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >
PUBLIC	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::_Allocate
PUBLIC	??$destroy@USChannel@CServerStateChecker@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@QAUSChannel@CServerStateChecker@@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::destroy<CServerStateChecker::SChannel>
PUBLIC	??$_Construct_in_place@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_List_node<CServerStateChecker::SChannel,void *> *,std::_List_node<CServerStateChecker::SChannel,void *> * const &>
PUBLIC	??$_Destroy_in_place@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAXAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@@Z ; std::_Destroy_in_place<std::_List_node<CServerStateChecker::SChannel,void *> *>
PUBLIC	??$_Voidify_iter@PAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAPAXPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@@Z ; std::_Voidify_iter<std::_List_node<CServerStateChecker::SChannel,void *> * *>
PUBLIC	??$construct_at@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@AAPAU12@$0A@@std@@YAPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@QAPAU10@AAPAU10@@Z ; std::construct_at<std::_List_node<CServerStateChecker::SChannel,void *> *,std::_List_node<CServerStateChecker::SChannel,void *> * &,0>
PUBLIC	??$forward@AAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@AAPAU10@@Z ; std::forward<std::_List_node<CServerStateChecker::SChannel,void *> * &>
PUBLIC	??$addressof@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@AAPAU10@@Z ; std::addressof<std::_List_node<CServerStateChecker::SChannel,void *> *>
PUBLIC	??$?0ABUSChannel@CServerStateChecker@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@ABUSChannel@CServerStateChecker@@@Z ; std::_List_node_emplace_op2<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::_List_node_emplace_op2<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > ><CServerStateChecker::SChannel const &>
PUBLIC	??$forward@ABUSChannel@CServerStateChecker@@@std@@YAABUSChannel@CServerStateChecker@@ABU12@@Z ; std::forward<CServerStateChecker::SChannel const &>
PUBLIC	??$_Freenode@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@?$_List_node@USChannel@CServerStateChecker@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAU01@@Z ; std::_List_node<CServerStateChecker::SChannel,void *>::_Freenode<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >,std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,1>::_Get_first
PUBLIC	?deallocate@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXQAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::deallocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::max_size
PUBLIC	?_Getal@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@ABEABV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@XZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Getal
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >
PUBLIC	??0?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@QAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::deallocate
PUBLIC	?max_size@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QBEIXZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::max_size
PUBLIC	??0?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ ; std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >
PUBLIC	??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@XZ ; std::_List_node_emplace_op2<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >
PUBLIC	?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@QAU32@@Z ; std::_List_node_emplace_op2<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::_Transfer_before
PUBLIC	??$_Freenode0@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@?$_List_node@USChannel@CServerStateChecker@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAU01@@Z ; std::_List_node<CServerStateChecker::SChannel,void *>::_Freenode0<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >
PUBLIC	??$_Construct_in_place@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@0@Z ; std::_Construct_in_place<std::_List_node<CServerStateChecker::SChannel,void *> *,std::_List_node<CServerStateChecker::SChannel,void *> * &>
PUBLIC	??$addressof@USChannel@CServerStateChecker@@@std@@YAPAUSChannel@CServerStateChecker@@AAU12@@Z ; std::addressof<CServerStateChecker::SChannel>
PUBLIC	??$addressof@$$CBUSChannel@CServerStateChecker@@@std@@YAPBUSChannel@CServerStateChecker@@ABU12@@Z ; std::addressof<CServerStateChecker::SChannel const >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >,std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,1>::_Compressed_pair<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >,std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,1><>
PUBLIC	??$addressof@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@YAPAV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@0@AAV10@@Z ; std::addressof<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >
PUBLIC	??$_Emplace@ABUSChannel@CServerStateChecker@@@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@QAU21@ABUSChannel@CServerStateChecker@@@Z ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Emplace<CServerStateChecker::SChannel const &>
PUBLIC	??$_Free_non_head@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@?$_List_node@USChannel@CServerStateChecker@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAU01@@Z ; std::_List_node<CServerStateChecker::SChannel,void *>::_Free_non_head<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >
PUBLIC	?allocate@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::allocate
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >,std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,1>::_Get_first
PUBLIC	?_Tidy@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@AAEXXZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Tidy
PUBLIC	?_Alloc_sentinel_and_proxy@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@AAEXXZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Alloc_sentinel_and_proxy
PUBLIC	?_Getal@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@AAEAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@XZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Getal
PUBLIC	?_Orphan_non_end@?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@QAEXXZ ; std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >::_Orphan_non_end
PUBLIC	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,std::_Iterator_base0>
PUBLIC	??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEABUSChannel@CServerStateChecker@@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator*
PUBLIC	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEAAUSChannel@CServerStateChecker@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator*
PUBLIC	?pointer_to@?$pointer_traits@PAUSChannel@CServerStateChecker@@@std@@SAPAUSChannel@CServerStateChecker@@AAU34@@Z ; std::pointer_traits<CServerStateChecker::SChannel *>::pointer_to
PUBLIC	?pointer_to@?$pointer_traits@PBUSChannel@CServerStateChecker@@@std@@SAPBUSChannel@CServerStateChecker@@ABU34@@Z ; std::pointer_traits<CServerStateChecker::SChannel const *>::pointer_to
PUBLIC	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >
PUBLIC	??_G?$CSingleton@VCServerStateChecker@@@@UAEPAXI@Z ; CSingleton<CServerStateChecker>::`scalar deleting destructor'
PUBLIC	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z ; std::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >
PUBLIC	??0?$CSingleton@VCServerStateChecker@@@@QAE@XZ	; CSingleton<CServerStateChecker>::CSingleton<CServerStateChecker>
PUBLIC	??1?$CSingleton@VCServerStateChecker@@@@UAE@XZ	; CSingleton<CServerStateChecker>::~CSingleton<CServerStateChecker>
PUBLIC	??0?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >
PUBLIC	??1?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::~list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >
PUBLIC	?begin@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@2@XZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::begin
PUBLIC	?end@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@2@XZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::end
PUBLIC	?empty@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QBE_NXZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::empty
PUBLIC	?push_back@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXABUSChannel@CServerStateChecker@@@Z ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::push_back
PUBLIC	?clear@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXXZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::clear
PUBLIC	??C?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEPBUSChannel@CServerStateChecker@@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator->
PUBLIC	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator++
PUBLIC	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator==
PUBLIC	??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEPAUSChannel@CServerStateChecker@@XZ ; std::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator->
PUBLIC	?Initialize@CServerStateChecker@@QAEXXZ		; CServerStateChecker::Initialize
PUBLIC	?Update@CServerStateChecker@@QAEXXZ		; CServerStateChecker::Update
PUBLIC	?Request@CServerStateChecker@@QAEXXZ		; CServerStateChecker::Request
PUBLIC	?AddChannel@CServerStateChecker@@QAEXIPBDI@Z	; CServerStateChecker::AddChannel
PUBLIC	?Create@CServerStateChecker@@QAEXPAU_object@@@Z	; CServerStateChecker::Create
PUBLIC	??_GCServerStateChecker@@UAEPAXI@Z		; CServerStateChecker::`scalar deleting destructor'
PUBLIC	??0CServerStateChecker@@QAE@XZ			; CServerStateChecker::CServerStateChecker
PUBLIC	??1CServerStateChecker@@UAE@XZ			; CServerStateChecker::~CServerStateChecker
EXTRN	??_ECServerStateChecker@@UAEPAXI@Z:PROC		; CServerStateChecker::`vector deleting destructor'
EXTRN	??_E?$CSingleton@VCServerStateChecker@@@@UAEPAXI@Z:PROC ; CSingleton<CServerStateChecker>::`vector deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CServerStateChecker@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CServerStateChecker@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CServerStateChecker@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CServerStateChecker@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CServerStateChecker@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CServerStateChecker@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CServerStateChecker@@QAE@XZ$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?AddChannel@CServerStateChecker@@QAEXIPBDI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddChannel@CServerStateChecker@@QAEXIPBDI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?AddChannel@CServerStateChecker@@QAEXIPBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddChannel@CServerStateChecker@@QAEXIPBDI@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?push_back@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXABUSChannel@CServerStateChecker@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_back@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXABUSChannel@CServerStateChecker@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?push_back@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXABUSChannel@CServerStateChecker@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXABUSChannel@CServerStateChecker@@@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Emplace@ABUSChannel@CServerStateChecker@@@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@QAU21@ABUSChannel@CServerStateChecker@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@ABUSChannel@CServerStateChecker@@@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@QAU21@ABUSChannel@CServerStateChecker@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Emplace@ABUSChannel@CServerStateChecker@@@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@QAU21@ABUSChannel@CServerStateChecker@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABUSChannel@CServerStateChecker@@@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@QAU21@ABUSChannel@CServerStateChecker@@@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?0ABUSChannel@CServerStateChecker@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@ABUSChannel@CServerStateChecker@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUSChannel@CServerStateChecker@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@ABUSChannel@CServerStateChecker@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?0ABUSChannel@CServerStateChecker@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@ABUSChannel@CServerStateChecker@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUSChannel@CServerStateChecker@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@ABUSChannel@CServerStateChecker@@@Z$0
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterBase\Singleton.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
;	COMDAT ??1CServerStateChecker@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CServerStateChecker@@UAE@XZ PROC			; CServerStateChecker::~CServerStateChecker, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CServerStateChecker@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx
  00026	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CServerStateChecker@@6B@

; 24   : 	Initialize();

  0002c	e8 00 00 00 00	 call	 ?Initialize@CServerStateChecker@@QAEXXZ ; CServerStateChecker::Initialize

; 26   : }

  00031	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00034	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0003b	e8 00 00 00 00	 call	 ??1CNetworkStream@@UAE@XZ ; CNetworkStream::~CNetworkStream
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1498 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00040	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 325  :         _Head->_Prev->_Next = nullptr;

  00043	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00046	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  0004c	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  0004e	85 c0		 test	 eax, eax
  00050	74 13		 je	 SHORT $LN9@CServerSta
$LL10@CServerSta:

; 329  :             _Pnext = _Pnode->_Next;

  00052	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00054	6a 14		 push	 20			; 00000014H
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0005c	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  0005f	8b c6		 mov	 eax, esi
  00061	85 f6		 test	 esi, esi
  00063	75 ed		 jne	 SHORT $LL10@CServerSta
$LN9@CServerSta:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00065	6a 14		 push	 20			; 00000014H
  00067	ff 77 08	 push	 DWORD PTR [edi+8]
  0006a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0006f	83 c4 08	 add	 esp, 8
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterBase\Singleton.h

; 19   : 	{ 

  00072	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CSingleton@VCServerStateChecker@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00078	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCServerStateChecker@@@@0PAVCServerStateChecker@@A, 0 ; CSingleton<CServerStateChecker>::ms_singleton
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp

; 26   : }

  00082	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00085	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008c	59		 pop	 ecx
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
  00093	cc		 int	 3
  00094	cc		 int	 3
  00095	cc		 int	 3
  00096	cc		 int	 3
  00097	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CServerStateChecker@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CServerStateChecker@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CServerStateChecker@@UAE@XZ ENDP			; CServerStateChecker::~CServerStateChecker
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterBase\Singleton.h
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
;	COMDAT ??0CServerStateChecker@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CServerStateChecker@@QAE@XZ PROC			; CServerStateChecker::CServerStateChecker, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CServerStateChecker@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00029	89 35 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCServerStateChecker@@@@0PAVCServerStateChecker@@A, esi ; CSingleton<CServerStateChecker>::ms_singleton
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp

; 18   : {

  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CServerStateChecker@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0003c	6a 14		 push	 20			; 00000014H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  0003e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00045	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0004c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00051	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1834 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  00054	89 00		 mov	 DWORD PTR [eax], eax

; 1835 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  00056	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1836 :         _Mypair._Myval2._Myhead = _Newhead;

  00059	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp

; 18   : {

  0005c	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  0005f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00063	e8 00 00 00 00	 call	 ??0CNetworkStream@@QAE@XZ ; CNetworkStream::CNetworkStream

; 19   : 	Initialize();

  00068	8b ce		 mov	 ecx, esi
  0006a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0006e	e8 00 00 00 00	 call	 ?Initialize@CServerStateChecker@@QAEXXZ ; CServerStateChecker::Initialize

; 20   : }

  00073	8b c6		 mov	 eax, esi
  00075	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00078	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007f	59		 pop	 ecx
  00080	5e		 pop	 esi
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CServerStateChecker@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCServerStateChecker@@@@UAE@XZ ; CSingleton<CServerStateChecker>::~CSingleton<CServerStateChecker>
__unwindfunclet$??0CServerStateChecker@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 08	 add	 ecx, 8
  0000e	e9 00 00 00 00	 jmp	 ??1?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::~list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >
__unwindfunclet$??0CServerStateChecker@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 10	 add	 ecx, 16			; 00000010H
  00019	e9 00 00 00 00	 jmp	 ??1CNetworkStream@@UAE@XZ ; CNetworkStream::~CNetworkStream
  0001e	cc		 int	 3
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
__ehhandler$??0CServerStateChecker@@QAE@XZ:
  00023	90		 npad	 1
  00024	90		 npad	 1
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CServerStateChecker@@QAE@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CServerStateChecker@@QAE@XZ ENDP			; CServerStateChecker::CServerStateChecker
; Function compile flags: /Ogtp
;	COMDAT ??_GCServerStateChecker@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCServerStateChecker@@UAEPAXI@Z PROC			; CServerStateChecker::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CServerStateChecker@@UAE@XZ ; CServerStateChecker::~CServerStateChecker
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 8c 00 00 00	 push	 140			; 0000008cH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCServerStateChecker@@UAEPAXI@Z ENDP			; CServerStateChecker::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
;	COMDAT ?Create@CServerStateChecker@@QAEXPAU_object@@@Z
_TEXT	SEGMENT
_poWnd$ = 8						; size = 4
?Create@CServerStateChecker@@QAEXPAU_object@@@Z PROC	; CServerStateChecker::Create, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 30   : 	m_poWnd = poWnd;

  00003	8b 45 08	 mov	 eax, DWORD PTR _poWnd$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 31   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?Create@CServerStateChecker@@QAEXPAU_object@@@Z ENDP	; CServerStateChecker::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
;	COMDAT ?AddChannel@CServerStateChecker@@QAEXIPBDI@Z
_TEXT	SEGMENT
_c$ = -32						; size = 12
__Op$2 = -20						; size = 8
__$EHRec$ = -12						; size = 12
_uServerIndex$ = 8					; size = 4
_c_szAddr$ = 12						; size = 4
_uPort$ = 16						; size = 4
?AddChannel@CServerStateChecker@@QAEXIPBDI@Z PROC	; CServerStateChecker::AddChannel, COMDAT
; _this$ = ecx

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddChannel@CServerStateChecker@@QAEXIPBDI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1012 :         if (_Mysize == max_size()) {

  00028	81 79 0c cc cc
	cc 0c		 cmp	 DWORD PTR [ecx+12], 214748364 ; 0cccccccH
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp

; 40   : 	m_lstChannel.push_back(c);

  0002f	8d 71 08	 lea	 esi, DWORD PTR [ecx+8]
  00032	8b 45 08	 mov	 eax, DWORD PTR _uServerIndex$[ebp]
  00035	8b 5d 10	 mov	 ebx, DWORD PTR _uPort$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1256 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  00038	8b 3e		 mov	 edi, DWORD PTR [esi]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp

; 36   : 	c.uServerIndex = uServerIndex;

  0003a	89 45 e0	 mov	 DWORD PTR _c$[ebp], eax

; 37   : 	c.c_szAddr = c_szAddr;

  0003d	8b 45 0c	 mov	 eax, DWORD PTR _c_szAddr$[ebp]
  00040	89 45 e4	 mov	 DWORD PTR _c$[ebp+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1012 :         if (_Mysize == max_size()) {

  00043	74 4c		 je	 SHORT $LN67@AddChannel
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00045	89 75 ec	 mov	 DWORD PTR __Op$2[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 584  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0004f	6a 14		 push	 20			; 00000014H

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00051	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  00058	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  0005d	f3 0f 7e 45 e0	 movq	 xmm0, QWORD PTR _c$[ebp]

; 77   :         return ::operator new(_Bytes);

  00062	83 c4 04	 add	 esp, 4

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00065	66 0f d6 40 08	 movq	 QWORD PTR [eax+8], xmm0
  0006a	89 58 10	 mov	 DWORD PTR [eax+16], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1017 :         ++_Mysize;

  0006d	ff 46 04	 inc	 DWORD PTR [esi+4]

; 599  :         const pointer _Insert_after = _Insert_before->_Prev;

  00070	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 600  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00073	89 38		 mov	 DWORD PTR [eax], edi

; 601  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  00075	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 602  :         const auto _Result    = this->_Ptr;
; 603  :         this->_Ptr            = pointer{};
; 604  :         _Insert_before->_Prev = _Result;

  00078	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 605  :         _Insert_after->_Next  = _Result;

  0007b	89 01		 mov	 DWORD PTR [ecx], eax
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp

; 41   : }

  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 0c 00	 ret	 12			; 0000000cH
$LN67@AddChannel:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1013 :             _Xlength_error("list too long");

  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  00096	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN65@AddChannel:
  0009b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddChannel@CServerStateChecker@@QAEXIPBDI@Z$1:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?AddChannel@CServerStateChecker@@QAEXIPBDI@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddChannel@CServerStateChecker@@QAEXIPBDI@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddChannel@CServerStateChecker@@QAEXIPBDI@Z ENDP	; CServerStateChecker::AddChannel
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
;	COMDAT ?Request@CServerStateChecker@@QAEXXZ
_TEXT	SEGMENT
_bHeader$ = -1						; size = 1
?Request@CServerStateChecker@@QAEXXZ PROC		; CServerStateChecker::Request, COMDAT
; _this$ = ecx

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1195 :         return _Mypair._Myval2._Mysize == 0;

  00007	83 7f 0c 00	 cmp	 DWORD PTR [edi+12], 0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp

; 45   : 	if (m_lstChannel.empty()) { 

  0000b	0f 84 ce 00 00
	00		 je	 $LN10@Request
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1087 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00011	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp

; 49   : 	if (!m_kStream.Connect(m_lstChannel.begin()->c_szAddr, m_lstChannel.begin()->uPort))

  00014	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1087 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00017	53		 push	 ebx
  00018	56		 push	 esi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp

; 49   : 	if (!m_kStream.Connect(m_lstChannel.begin()->c_szAddr, m_lstChannel.begin()->uPort))

  00019	6a 03		 push	 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0001b	8b 00		 mov	 eax, DWORD PTR [eax]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp

; 49   : 	if (!m_kStream.Connect(m_lstChannel.begin()->c_szAddr, m_lstChannel.begin()->uPort))

  0001d	ff 70 10	 push	 DWORD PTR [eax+16]
  00020	ff 70 0c	 push	 DWORD PTR [eax+12]
  00023	e8 00 00 00 00	 call	 ?Connect@CNetworkStream@@QAE_NPBDHH@Z ; CNetworkStream::Connect
  00028	84 c0		 test	 al, al
  0002a	75 3f		 jne	 SHORT $LN9@Request
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1087 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0002c	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0002f	8b 30		 mov	 esi, DWORD PTR [eax]
  00031	3b f0		 cmp	 esi, eax
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp

; 51   : 		for (std::list<TChannel>::const_iterator it = m_lstChannel.begin(); it != m_lstChannel.end(); ++it) {

  00033	0f 84 a4 00 00
	00		 je	 $LN98@Request
  00039	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__Py_BuildValue
  0003f	90		 npad	 1
$LL23@Request:

; 52   : 			PyCallClassMemberFunc(m_poWnd, "NotifyChannelState", Py_BuildValue("(ii)", it->uServerIndex, 0));

  00040	6a 00		 push	 0
  00042	ff 76 08	 push	 DWORD PTR [esi+8]
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_04INACLLOK@?$CIii?$CJ@
  0004a	ff d3		 call	 ebx
  0004c	50		 push	 eax
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EEDMKMGJ@NotifyChannelState@
  00052	ff 77 04	 push	 DWORD PTR [edi+4]
  00055	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  0005a	8b 36		 mov	 esi, DWORD PTR [esi]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp

; 52   : 			PyCallClassMemberFunc(m_poWnd, "NotifyChannelState", Py_BuildValue("(ii)", it->uServerIndex, 0));

  0005c	83 c4 18	 add	 esp, 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 198  :         return this->_Ptr == _Right._Ptr;

  0005f	3b 77 08	 cmp	 esi, DWORD PTR [edi+8]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp

; 51   : 		for (std::list<TChannel>::const_iterator it = m_lstChannel.begin(); it != m_lstChannel.end(); ++it) {

  00062	75 dc		 jne	 SHORT $LL23@Request
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	5f		 pop	 edi

; 67   : 		return;
; 68   : 	}
; 69   : }

  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
$LN9@Request:

; 53   : 		}
; 54   : 		return;
; 55   : 	}
; 56   : 	m_kStream.ClearRecvBuffer();

  0006b	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0006e	e8 00 00 00 00	 call	 ?ClearRecvBuffer@CNetworkStream@@QAEXXZ ; CNetworkStream::ClearRecvBuffer

; 57   : 	m_kStream.SetSendBufferSize(1024);

  00073	68 00 04 00 00	 push	 1024			; 00000400H
  00078	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0007b	e8 00 00 00 00	 call	 ?SetSendBufferSize@CNetworkStream@@QAEXH@Z ; CNetworkStream::SetSendBufferSize

; 58   : 	m_kStream.SetRecvBufferSize(1024);

  00080	68 00 04 00 00	 push	 1024			; 00000400H
  00085	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00088	e8 00 00 00 00	 call	 ?SetRecvBufferSize@CNetworkStream@@QAEXH@Z ; CNetworkStream::SetRecvBufferSize

; 59   : 
; 60   : 	BYTE bHeader = HEADER_CG_STATE_CHECKER;
; 61   : 	if (!m_kStream.Send(sizeof(bHeader), &bHeader))

  0008d	8d 45 ff	 lea	 eax, DWORD PTR _bHeader$[ebp]
  00090	c6 45 ff ce	 mov	 BYTE PTR _bHeader$[ebp], 206 ; 000000ceH
  00094	50		 push	 eax
  00095	6a 01		 push	 1
  00097	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0009a	e8 00 00 00 00	 call	 ?Send@CNetworkStream@@QAE_NHPBX@Z ; CNetworkStream::Send
  0009f	84 c0		 test	 al, al
  000a1	75 3a		 jne	 SHORT $LN98@Request
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1087 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  000a3	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  000a6	8b 30		 mov	 esi, DWORD PTR [eax]
  000a8	3b f0		 cmp	 esi, eax
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp

; 63   : 		for (std::list<TChannel>::const_iterator it = m_lstChannel.begin(); it != m_lstChannel.end(); ++it) {

  000aa	74 2a		 je	 SHORT $LN6@Request
  000ac	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__Py_BuildValue
$LL41@Request:

; 64   : 			PyCallClassMemberFunc(m_poWnd, "NotifyChannelState", Py_BuildValue("(ii)", it->uServerIndex, 0));

  000b2	6a 00		 push	 0
  000b4	ff 76 08	 push	 DWORD PTR [esi+8]
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_04INACLLOK@?$CIii?$CJ@
  000bc	ff d3		 call	 ebx
  000be	50		 push	 eax
  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EEDMKMGJ@NotifyChannelState@
  000c4	ff 77 04	 push	 DWORD PTR [edi+4]
  000c7	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  000cc	8b 36		 mov	 esi, DWORD PTR [esi]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp

; 64   : 			PyCallClassMemberFunc(m_poWnd, "NotifyChannelState", Py_BuildValue("(ii)", it->uServerIndex, 0));

  000ce	83 c4 18	 add	 esp, 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 198  :         return this->_Ptr == _Right._Ptr;

  000d1	3b 77 08	 cmp	 esi, DWORD PTR [edi+8]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp

; 63   : 		for (std::list<TChannel>::const_iterator it = m_lstChannel.begin(); it != m_lstChannel.end(); ++it) {

  000d4	75 dc		 jne	 SHORT $LL41@Request
$LN6@Request:

; 65   : 		}
; 66   : 		Initialize();

  000d6	8b cf		 mov	 ecx, edi
  000d8	e8 00 00 00 00	 call	 ?Initialize@CServerStateChecker@@QAEXXZ ; CServerStateChecker::Initialize
$LN98@Request:
  000dd	5e		 pop	 esi
  000de	5b		 pop	 ebx
$LN10@Request:
  000df	5f		 pop	 edi

; 67   : 		return;
; 68   : 	}
; 69   : }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c3		 ret	 0
?Request@CServerStateChecker@@QAEXXZ ENDP		; CServerStateChecker::Request
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
;	COMDAT ?Update@CServerStateChecker@@QAEXXZ
_TEXT	SEGMENT
_nSize$ = -12						; size = 4
_channelStatus$1 = -8					; size = 3
_bHeader$ = -1						; size = 1
?Update@CServerStateChecker@@QAEXXZ PROC		; CServerStateChecker::Update, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 73   : 	m_kStream.Process();

  0000a	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0000d	e8 00 00 00 00	 call	 ?Process@CNetworkStream@@QAEXXZ ; CNetworkStream::Process

; 74   : 
; 75   : 	BYTE bHeader;
; 76   : 	if (!m_kStream.Recv(sizeof(bHeader), &bHeader)) {

  00012	8d 45 ff	 lea	 eax, DWORD PTR _bHeader$[ebp]
  00015	50		 push	 eax
  00016	6a 01		 push	 1
  00018	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0001b	e8 00 00 00 00	 call	 ?Recv@CNetworkStream@@QAE_NHPAX@Z ; CNetworkStream::Recv
  00020	84 c0		 test	 al, al
  00022	74 7e		 je	 SHORT $LN1@Update

; 77   : 		return;
; 78   : 	}
; 79   : 	if (HEADER_GC_RESPOND_CHANNELSTATUS != bHeader) {

  00024	80 7d ff d2	 cmp	 BYTE PTR _bHeader$[ebp], 210 ; 000000d2H
  00028	75 78		 jne	 SHORT $LN1@Update

; 80   : 		return;
; 81   : 	}
; 82   : 	int nSize;
; 83   : 	if (!m_kStream.Recv(sizeof(nSize), &nSize)) {

  0002a	8d 45 f4	 lea	 eax, DWORD PTR _nSize$[ebp]
  0002d	50		 push	 eax
  0002e	6a 04		 push	 4
  00030	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00033	e8 00 00 00 00	 call	 ?Recv@CNetworkStream@@QAE_NHPAX@Z ; CNetworkStream::Recv
  00038	84 c0		 test	 al, al
  0003a	74 66		 je	 SHORT $LN1@Update

; 84   : 		return;
; 85   : 	}
; 86   : 	for (int i = 0; i < nSize; i++) {

  0003c	56		 push	 esi
  0003d	33 f6		 xor	 esi, esi
  0003f	39 75 f4	 cmp	 DWORD PTR _nSize$[ebp], esi
  00042	7e 56		 jle	 SHORT $LN3@Update
$LL4@Update:

; 87   : 		TChannelStatus channelStatus;
; 88   : 		if (!m_kStream.Recv(sizeof(channelStatus), &channelStatus)) {

  00044	8d 45 f8	 lea	 eax, DWORD PTR _channelStatus$1[ebp]
  00047	50		 push	 eax
  00048	6a 03		 push	 3
  0004a	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0004d	e8 00 00 00 00	 call	 ?Recv@CNetworkStream@@QAE_NHPAX@Z ; CNetworkStream::Recv
  00052	84 c0		 test	 al, al
  00054	74 4b		 je	 SHORT $LN52@Update
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1087 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00056	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00059	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005b	3b c1		 cmp	 eax, ecx
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp

; 91   : 		for (std::list<TChannel>::const_iterator it = m_lstChannel.begin(); it != m_lstChannel.end(); ++it) {

  0005d	74 35		 je	 SHORT $LN2@Update
  0005f	0f bf 55 f8	 movsx	 edx, WORD PTR _channelStatus$1[ebp]
$LL29@Update:

; 92   : 			if (channelStatus.nPort == it->uPort) {

  00063	3b 50 10	 cmp	 edx, DWORD PTR [eax+16]
  00066	74 08		 je	 SHORT $LN44@Update
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  00068	8b 00		 mov	 eax, DWORD PTR [eax]

; 198  :         return this->_Ptr == _Right._Ptr;

  0006a	3b c1		 cmp	 eax, ecx
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp

; 91   : 		for (std::list<TChannel>::const_iterator it = m_lstChannel.begin(); it != m_lstChannel.end(); ++it) {

  0006c	75 f5		 jne	 SHORT $LL29@Update

; 87   : 		TChannelStatus channelStatus;
; 88   : 		if (!m_kStream.Recv(sizeof(channelStatus), &channelStatus)) {

  0006e	eb 24		 jmp	 SHORT $LN2@Update
$LN44@Update:

; 93   : 				PyCallClassMemberFunc(m_poWnd, "NotifyChannelState", Py_BuildValue("(ii)", it->uServerIndex, channelStatus.bStatus));

  00070	0f b6 4d fa	 movzx	 ecx, BYTE PTR _channelStatus$1[ebp+2]
  00074	51		 push	 ecx
  00075	ff 70 08	 push	 DWORD PTR [eax+8]
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_04INACLLOK@?$CIii?$CJ@
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00083	50		 push	 eax
  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@EEDMKMGJ@NotifyChannelState@
  00089	ff 77 04	 push	 DWORD PTR [edi+4]
  0008c	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
  00091	83 c4 18	 add	 esp, 24			; 00000018H
$LN2@Update:

; 84   : 		return;
; 85   : 	}
; 86   : 	for (int i = 0; i < nSize; i++) {

  00094	46		 inc	 esi
  00095	3b 75 f4	 cmp	 esi, DWORD PTR _nSize$[ebp]
  00098	7c aa		 jl	 SHORT $LL4@Update
$LN3@Update:

; 94   : 				break;
; 95   : 			}
; 96   : 		}
; 97   : 	}
; 98   : 	Initialize();

  0009a	8b cf		 mov	 ecx, edi
  0009c	e8 00 00 00 00	 call	 ?Initialize@CServerStateChecker@@QAEXXZ ; CServerStateChecker::Initialize
$LN52@Update:
  000a1	5e		 pop	 esi
$LN1@Update:
  000a2	5f		 pop	 edi

; 99   : }

  000a3	5b		 pop	 ebx
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
?Update@CServerStateChecker@@QAEXXZ ENDP		; CServerStateChecker::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp
;	COMDAT ?Initialize@CServerStateChecker@@QAEXXZ
_TEXT	SEGMENT
?Initialize@CServerStateChecker@@QAEXXZ PROC		; CServerStateChecker::Initialize, COMDAT
; _this$ = ecx

; 102  : {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1487 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  00003	8b 57 08	 mov	 edx, DWORD PTR [edi+8]

; 325  :         _Head->_Prev->_Next = nullptr;

  00006	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00009	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  0000f	8b 02		 mov	 eax, DWORD PTR [edx]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN7@Initialize
  00015	56		 push	 esi
$LL8@Initialize:

; 329  :             _Pnext = _Pnode->_Next;

  00016	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00018	6a 14		 push	 20			; 00000014H
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00020	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00023	8b c6		 mov	 eax, esi
  00025	85 f6		 test	 esi, esi
  00027	75 ed		 jne	 SHORT $LL8@Initialize
  00029	5e		 pop	 esi
$LN7@Initialize:

; 1488 :         _My_data._Myhead->_Next = _My_data._Myhead;

  0002a	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp

; 104  : 	m_kStream.Disconnect();

  0002d	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1488 :         _My_data._Myhead->_Next = _My_data._Myhead;

  00030	89 00		 mov	 DWORD PTR [eax], eax

; 1489 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  00032	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00035	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1490 :         _My_data._Mysize        = 0;

  00038	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\ServerStateChecker.cpp

; 104  : 	m_kStream.Disconnect();

  0003f	5f		 pop	 edi
  00040	e9 00 00 00 00	 jmp	 ?Disconnect@CNetworkStream@@QAEXXZ ; CNetworkStream::Disconnect
?Initialize@CServerStateChecker@@QAEXXZ ENDP		; CServerStateChecker::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEPAUSChannel@CServerStateChecker@@XZ
_TEXT	SEGMENT
??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEPAUSChannel@CServerStateChecker@@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator->, COMDAT
; _this$ = ecx

; 151  :         return this->_Ptr->_Myval;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 243  :         return pointer_traits<pointer>::pointer_to(**this);
; 244  :     }

  00005	c3		 ret	 0
??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEPAUSChannel@CServerStateChecker@@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator==, COMDAT
; _this$ = ecx

; 193  :     _NODISCARD bool operator==(const _List_const_iterator& _Right) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 194  : #if _ITERATOR_DEBUG_LEVEL == 2
; 195  :         _STL_VERIFY(this->_Getcont() == _Right._Getcont(), "list iterators incompatible");
; 196  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 197  : 
; 198  :         return this->_Ptr == _Right._Ptr;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 94 c0	 sete	 al

; 199  :     }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator++, COMDAT
; _this$ = ecx

; 159  : #if _ITERATOR_DEBUG_LEVEL == 2
; 160  :         const auto _Mycont = static_cast<const _Mylist*>(this->_Getcont());
; 161  :         _STL_ASSERT(_Mycont, "cannot increment value-initialized list iterator");
; 162  :         _STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot increment end list iterator");
; 163  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 164  : 
; 165  :         this->_Ptr = this->_Ptr->_Next;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 00		 mov	 eax, DWORD PTR [eax]
  00004	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return *this;

  00006	8b c1		 mov	 eax, ecx

; 167  :     }

  00008	c3		 ret	 0
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??C?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEPBUSChannel@CServerStateChecker@@XZ
_TEXT	SEGMENT
??C?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEPBUSChannel@CServerStateChecker@@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator->, COMDAT
; _this$ = ecx

; 151  :         return this->_Ptr->_Myval;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 155  :         return pointer_traits<pointer>::pointer_to(**this);
; 156  :     }

  00005	c3		 ret	 0
??C?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEPBUSChannel@CServerStateChecker@@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ?clear@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXXZ PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::clear, COMDAT
; _this$ = ecx

; 1484 :     void clear() noexcept { // erase all

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1485 :         auto& _My_data = _Mypair._Myval2;
; 1486 :         _My_data._Orphan_non_end();
; 1487 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  00003	8b 17		 mov	 edx, DWORD PTR [edi]

; 325  :         _Head->_Prev->_Next = nullptr;

  00005	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00008	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  0000e	8b 02		 mov	 eax, DWORD PTR [edx]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00010	85 c0		 test	 eax, eax
  00012	74 15		 je	 SHORT $LN5@clear
  00014	56		 push	 esi
$LL6@clear:

; 329  :             _Pnext = _Pnode->_Next;

  00015	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00017	6a 14		 push	 20			; 00000014H
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00022	8b c6		 mov	 eax, esi
  00024	85 f6		 test	 esi, esi
  00026	75 ed		 jne	 SHORT $LL6@clear
  00028	5e		 pop	 esi
$LN5@clear:

; 1488 :         _My_data._Myhead->_Next = _My_data._Myhead;

  00029	8b 07		 mov	 eax, DWORD PTR [edi]
  0002b	89 00		 mov	 DWORD PTR [eax], eax

; 1489 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  0002d	8b 07		 mov	 eax, DWORD PTR [edi]
  0002f	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1490 :         _My_data._Mysize        = 0;

  00032	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00039	5f		 pop	 edi

; 1491 :     }

  0003a	c3		 ret	 0
?clear@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXXZ ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ?push_back@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXABUSChannel@CServerStateChecker@@@Z
_TEXT	SEGMENT
__Op$2 = -20						; size = 8
__$EHRec$ = -12						; size = 12
__Val$ = 8						; size = 4
?push_back@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXABUSChannel@CServerStateChecker@@@Z PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::push_back, COMDAT
; _this$ = ecx

; 1255 :     void push_back(const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?push_back@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXABUSChannel@CServerStateChecker@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx

; 1012 :         if (_Mysize == max_size()) {

  00029	81 7e 04 cc cc
	cc 0c		 cmp	 DWORD PTR [esi+4], 214748364 ; 0cccccccH

; 1256 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  00030	8b 3e		 mov	 edi, DWORD PTR [esi]

; 1012 :         if (_Mysize == max_size()) {

  00032	74 52		 je	 SHORT $LN64@push_back
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00034	89 75 ec	 mov	 DWORD PTR __Op$2[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 584  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0003e	6a 14		 push	 20			; 00000014H

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00040	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  00047	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  0004c	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]

; 1013 :         _Ptr = _Al.allocate(1);

  0004f	8b d0		 mov	 edx, eax

; 77   :         return ::operator new(_Bytes);

  00051	83 c4 04	 add	 esp, 4

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00054	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  00058	66 0f d6 42 08	 movq	 QWORD PTR [edx+8], xmm0
  0005d	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00060	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1017 :         ++_Mysize;

  00063	ff 46 04	 inc	 DWORD PTR [esi+4]

; 599  :         const pointer _Insert_after = _Insert_before->_Prev;

  00066	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 600  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00069	89 3a		 mov	 DWORD PTR [edx], edi

; 601  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  0006b	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 602  :         const auto _Result    = this->_Ptr;
; 603  :         this->_Ptr            = pointer{};
; 604  :         _Insert_before->_Prev = _Result;

  0006e	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 605  :         _Insert_after->_Next  = _Result;

  00071	89 10		 mov	 DWORD PTR [eax], edx

; 1257 :     }

  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
$LN64@push_back:

; 1013 :             _Xlength_error("list too long");

  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  0008b	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN62@push_back:
  00090	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_back@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXABUSChannel@CServerStateChecker@@@Z$1:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?push_back@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXABUSChannel@CServerStateChecker@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?push_back@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXABUSChannel@CServerStateChecker@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?push_back@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEXABUSChannel@CServerStateChecker@@@Z ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::push_back
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ?empty@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QBE_NXZ PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::empty, COMDAT
; _this$ = ecx

; 1195 :         return _Mypair._Myval2._Mysize == 0;

  00000	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00004	0f 94 c0	 sete	 al

; 1196 :     }

  00007	c3		 ret	 0
?empty@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QBE_NXZ ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ?end@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@2@XZ PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::end, COMDAT
; _this$ = ecx

; 1094 :     _NODISCARD iterator end() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1095 :         return iterator(_Mypair._Myval2._Myhead, _STD addressof(_Mypair._Myval2));
; 1096 :     }

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@2@XZ ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ?begin@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@2@XZ PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::begin, COMDAT
; _this$ = ecx

; 1086 :     _NODISCARD iterator begin() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1087 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1088 :     }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@2@XZ ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??1?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::~list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >, COMDAT
; _this$ = ecx

; 1042 :     ~list() noexcept {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1498 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00003	8b 17		 mov	 edx, DWORD PTR [edi]

; 325  :         _Head->_Prev->_Next = nullptr;

  00005	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00008	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  0000e	8b 02		 mov	 eax, DWORD PTR [edx]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00010	85 c0		 test	 eax, eax
  00012	74 15		 je	 SHORT $LN7@list
  00014	56		 push	 esi
$LL8@list:

; 329  :             _Pnext = _Pnode->_Next;

  00015	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00017	6a 14		 push	 20			; 00000014H
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00022	8b c6		 mov	 eax, esi
  00024	85 f6		 test	 esi, esi
  00026	75 ed		 jne	 SHORT $LL8@list
  00028	5e		 pop	 esi
$LN7@list:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00029	6a 14		 push	 20			; 00000014H
  0002b	ff 37		 push	 DWORD PTR [edi]
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8
  00035	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1048 :     }

  00036	c3		 ret	 0
??1?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::~list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??0?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >, COMDAT
; _this$ = ecx

; 797  :     list() : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00003	6a 14		 push	 20			; 00000014H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00005	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0000b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00017	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1834 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  0001a	89 00		 mov	 DWORD PTR [eax], eax

; 1835 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  0001c	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1836 :         _Mypair._Myval2._Myhead = _Newhead;

  0001f	89 06		 mov	 DWORD PTR [esi], eax

; 798  :         _Alloc_sentinel_and_proxy();
; 799  :     }

  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi
  00024	c3		 ret	 0
??0?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCServerStateChecker@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCServerStateChecker@@@@UAE@XZ PROC	; CSingleton<CServerStateChecker>::~CSingleton<CServerStateChecker>, COMDAT
; _this$ = ecx

; 19   : 	{ 

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCServerStateChecker@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCServerStateChecker@@@@0PAVCServerStateChecker@@A, 0 ; CSingleton<CServerStateChecker>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCServerStateChecker@@@@UAE@XZ ENDP	; CSingleton<CServerStateChecker>::~CSingleton<CServerStateChecker>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterBase\Singleton.h
;	COMDAT ??0?$CSingleton@VCServerStateChecker@@@@QAE@XZ
_TEXT	SEGMENT
??0?$CSingleton@VCServerStateChecker@@@@QAE@XZ PROC	; CSingleton<CServerStateChecker>::CSingleton<CServerStateChecker>, COMDAT
; _this$ = ecx

; 12   : 	{ 

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCServerStateChecker@@@@6B@

; 13   : 		assert(!ms_singleton);
; 14   : 		int offset = (int) (T*) 1 - (int) (CSingleton <T>*) (T*) 1; 
; 15   : 		ms_singleton = (T*) ((int) this + offset);
; 16   : 	} 

  00006	8b c1		 mov	 eax, ecx
  00008	89 0d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCServerStateChecker@@@@0PAVCServerStateChecker@@A, ecx ; CSingleton<CServerStateChecker>::ms_singleton
  0000e	c3		 ret	 0
??0?$CSingleton@VCServerStateChecker@@@@QAE@XZ ENDP	; CSingleton<CServerStateChecker>::CSingleton<CServerStateChecker>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00003	8b 45 08	 mov	 eax, DWORD PTR ___param0$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCServerStateChecker@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCServerStateChecker@@@@UAEPAXI@Z PROC	; CSingleton<CServerStateChecker>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{ 

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0; 

  0000a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCServerStateChecker@@@@0PAVCServerStateChecker@@A, 0 ; CSingleton<CServerStateChecker>::ms_singleton
  00014	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCServerStateChecker@@@@6B@
  0001a	74 0b		 je	 SHORT $LN6@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCServerStateChecker@@@@UAEPAXI@Z ENDP	; CSingleton<CServerStateChecker>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z
_TEXT	SEGMENT
___param0$ = 8						; size = 4
___param1$dead$ = 12					; size = 4
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00003	8b 45 08	 mov	 eax, DWORD PTR ___param0$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ?pointer_to@?$pointer_traits@PBUSChannel@CServerStateChecker@@@std@@SAPBUSChannel@CServerStateChecker@@ABU34@@Z
_TEXT	SEGMENT
?pointer_to@?$pointer_traits@PBUSChannel@CServerStateChecker@@@std@@SAPBUSChannel@CServerStateChecker@@ABU34@@Z PROC ; std::pointer_traits<CServerStateChecker::SChannel const *>::pointer_to, COMDAT
; __Val$ = ecx

; 268  :         return _STD addressof(_Val);

  00000	8b c1		 mov	 eax, ecx

; 269  :     }

  00002	c3		 ret	 0
?pointer_to@?$pointer_traits@PBUSChannel@CServerStateChecker@@@std@@SAPBUSChannel@CServerStateChecker@@ABU34@@Z ENDP ; std::pointer_traits<CServerStateChecker::SChannel const *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ?pointer_to@?$pointer_traits@PAUSChannel@CServerStateChecker@@@std@@SAPAUSChannel@CServerStateChecker@@AAU34@@Z
_TEXT	SEGMENT
?pointer_to@?$pointer_traits@PAUSChannel@CServerStateChecker@@@std@@SAPAUSChannel@CServerStateChecker@@AAU34@@Z PROC ; std::pointer_traits<CServerStateChecker::SChannel *>::pointer_to, COMDAT
; __Val$ = ecx

; 268  :         return _STD addressof(_Val);

  00000	8b c1		 mov	 eax, ecx

; 269  :     }

  00002	c3		 ret	 0
?pointer_to@?$pointer_traits@PAUSChannel@CServerStateChecker@@@std@@SAPAUSChannel@CServerStateChecker@@AAU34@@Z ENDP ; std::pointer_traits<CServerStateChecker::SChannel *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEAAUSChannel@CServerStateChecker@@XZ
_TEXT	SEGMENT
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEAAUSChannel@CServerStateChecker@@XZ PROC ; std::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator*, COMDAT
; _this$ = ecx

; 151  :         return this->_Ptr->_Myval;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 239  :         return const_cast<reference>(_Mybase::operator*());
; 240  :     }

  00005	c3		 ret	 0
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEAAUSChannel@CServerStateChecker@@XZ ENDP ; std::_List_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEABUSChannel@CServerStateChecker@@XZ
_TEXT	SEGMENT
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEABUSChannel@CServerStateChecker@@XZ PROC ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator*, COMDAT
; _this$ = ecx

; 145  : #if _ITERATOR_DEBUG_LEVEL == 2
; 146  :         const auto _Mycont = static_cast<const _Mylist*>(this->_Getcont());
; 147  :         _STL_ASSERT(_Mycont, "cannot dereference value-initialized list iterator");
; 148  :         _STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot dereference end list iterator");
; 149  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 150  : 
; 151  :         return this->_Ptr->_Myval;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 152  :     }

  00005	c3		 ret	 0
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@QBEABUSChannel@CServerStateChecker@@XZ ENDP ; std::_List_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$dead$ = 12					; size = 4
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z PROC ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 39   :         this->_Adopt(_Plist);
; 40   :     }

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@PBV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@1@@Z ENDP ; std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,std::_Iterator_base0>::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ?_Orphan_non_end@?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_non_end@?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@QAEXXZ PROC ; std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >::_Orphan_non_end, COMDAT
; _this$dead$ = ecx

; 378  : #if _ITERATOR_DEBUG_LEVEL == 2
; 379  :         _Lockit _Lock(_LOCK_DEBUG);
; 380  :         _Iterator_base12** _Pnext = &this->_Myproxy->_Myfirstiter;
; 381  :         const auto _Head          = _Myhead;
; 382  :         while (*_Pnext) {
; 383  :             _Iterator_base12** _Pnextnext = &(*_Pnext)->_Mynextiter;
; 384  :             if (static_cast<_List_const_iterator<_List_val>&>(**_Pnext)._Ptr == _Head) { // iterator is end(), move on
; 385  :                 _Pnext = _Pnextnext;
; 386  :             } else { // orphan the iterator
; 387  :                 (*_Pnext)->_Myproxy = nullptr;
; 388  :                 *_Pnext             = *_Pnextnext;
; 389  :             }
; 390  :         }
; 391  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 392  :     }

  00000	c2 00 00	 ret	 0
?_Orphan_non_end@?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@QAEXXZ ENDP ; std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >::_Orphan_non_end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ?_Getal@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@AAEAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@AAEAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@XZ PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Getal, COMDAT
; _this$ = ecx

; 1845 :         return _Mypair._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 1846 :     }

  00002	c3		 ret	 0
?_Getal@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@AAEAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@XZ ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ?_Alloc_sentinel_and_proxy@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Alloc_sentinel_and_proxy@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@AAEXXZ PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Alloc_sentinel_and_proxy, COMDAT
; _this$ = ecx

; 1829 :     void _Alloc_sentinel_and_proxy() {

  00000	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00001	6a 14		 push	 20			; 00000014H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1829 :     void _Alloc_sentinel_and_proxy() {

  00003	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1834 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  0000d	89 00		 mov	 DWORD PTR [eax], eax

; 1835 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  0000f	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1836 :         _Mypair._Myval2._Myhead = _Newhead;

  00012	89 06		 mov	 DWORD PTR [esi], eax
  00014	5e		 pop	 esi

; 1837 :         _Proxy._Release();
; 1838 :     }

  00015	c3		 ret	 0
?_Alloc_sentinel_and_proxy@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@AAEXXZ ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Alloc_sentinel_and_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ?_Tidy@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@AAEXXZ PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Tidy, COMDAT
; _this$ = ecx

; 1494 :     void _Tidy() noexcept {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1495 :         auto& _Al      = _Getal();
; 1496 :         auto& _My_data = _Mypair._Myval2;
; 1497 :         _My_data._Orphan_all();
; 1498 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00003	8b 17		 mov	 edx, DWORD PTR [edi]

; 325  :         _Head->_Prev->_Next = nullptr;

  00005	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00008	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  0000e	8b 02		 mov	 eax, DWORD PTR [edx]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00010	85 c0		 test	 eax, eax
  00012	74 15		 je	 SHORT $LN5@Tidy
  00014	56		 push	 esi
$LL6@Tidy:

; 329  :             _Pnext = _Pnode->_Next;

  00015	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00017	6a 14		 push	 20			; 00000014H
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00022	8b c6		 mov	 eax, esi
  00024	85 f6		 test	 esi, esi
  00026	75 ed		 jne	 SHORT $LL6@Tidy
  00028	5e		 pop	 esi
$LN5@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00029	6a 14		 push	 20			; 00000014H
  0002b	ff 37		 push	 DWORD PTR [edi]
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8
  00035	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1500 :     }

  00036	c3		 ret	 0
?_Tidy@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@AAEXXZ ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >,std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1384 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1385 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >,std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?allocate@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::allocate, COMDAT
; _this$dead$ = ecx

; 77   :         return ::operator new(_Bytes);

  00000	6a 14		 push	 20			; 00000014H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 834  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 836  :     }

  0000a	c2 04 00	 ret	 4
?allocate@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??$_Free_non_head@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@?$_List_node@USChannel@CServerStateChecker@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
??$_Free_non_head@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@?$_List_node@USChannel@CServerStateChecker@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAU01@@Z PROC ; std::_List_node<CServerStateChecker::SChannel,void *>::_Free_non_head<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >, COMDAT
; __Al$dead$ = ecx
; __Head$ = edx

; 325  :         _Head->_Prev->_Next = nullptr;

  00000	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00003	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  00009	8b 02		 mov	 eax, DWORD PTR [edx]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  0000b	85 c0		 test	 eax, eax
  0000d	74 15		 je	 SHORT $LN3@Free_non_h
  0000f	56		 push	 esi
$LL4@Free_non_h:

; 329  :             _Pnext = _Pnode->_Next;

  00010	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00012	6a 14		 push	 20			; 00000014H
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  0001d	8b c6		 mov	 eax, esi
  0001f	85 f6		 test	 esi, esi
  00021	75 ed		 jne	 SHORT $LL4@Free_non_h
  00023	5e		 pop	 esi
$LN3@Free_non_h:

; 330  :             _Freenode(_Al, _Pnode);
; 331  :         }
; 332  :     }

  00024	c3		 ret	 0
??$_Free_non_head@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@?$_List_node@USChannel@CServerStateChecker@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAU01@@Z ENDP ; std::_List_node<CServerStateChecker::SChannel,void *>::_Free_non_head<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??$_Emplace@ABUSChannel@CServerStateChecker@@@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@QAU21@ABUSChannel@CServerStateChecker@@@Z
_TEXT	SEGMENT
__Op$ = -20						; size = 8
__$EHRec$ = -12						; size = 12
__Where$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace@ABUSChannel@CServerStateChecker@@@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@QAU21@ABUSChannel@CServerStateChecker@@@Z PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Emplace<CServerStateChecker::SChannel const &>, COMDAT
; _this$ = ecx

; 1010 :     _Nodeptr _Emplace(const _Nodeptr _Where, _Valty&&... _Val) { // insert element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace@ABUSChannel@CServerStateChecker@@@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@QAU21@ABUSChannel@CServerStateChecker@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx

; 1011 :         size_type& _Mysize = _Mypair._Myval2._Mysize;
; 1012 :         if (_Mysize == max_size()) {

  00028	81 7e 04 cc cc
	cc 0c		 cmp	 DWORD PTR [esi+4], 214748364 ; 0cccccccH
  0002f	74 56		 je	 SHORT $LN61@Emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00031	89 75 ec	 mov	 DWORD PTR __Op$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 584  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0003b	6a 14		 push	 20			; 00000014H

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0003d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __Op$[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  00044	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00049	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Val_0>$[ebp]

; 1013 :         _Ptr = _Al.allocate(1);

  0004c	8b d0		 mov	 edx, eax

; 77   :         return ::operator new(_Bytes);

  0004e	83 c4 04	 add	 esp, 4

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00051	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  00055	66 0f d6 42 08	 movq	 QWORD PTR [edx+8], xmm0
  0005a	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0005d	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 599  :         const pointer _Insert_after = _Insert_before->_Prev;

  00060	8b 4d 08	 mov	 ecx, DWORD PTR __Where$[ebp]

; 1014 :         }
; 1015 : 
; 1016 :         _List_node_emplace_op2<_Alnode> _Op{_Getal(), _STD forward<_Valty>(_Val)...};
; 1017 :         ++_Mysize;

  00063	ff 46 04	 inc	 DWORD PTR [esi+4]

; 599  :         const pointer _Insert_after = _Insert_before->_Prev;

  00066	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 600  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00069	89 0a		 mov	 DWORD PTR [edx], ecx

; 601  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  0006b	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 602  :         const auto _Result    = this->_Ptr;
; 603  :         this->_Ptr            = pointer{};
; 604  :         _Insert_before->_Prev = _Result;

  0006e	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 605  :         _Insert_after->_Next  = _Result;

  00071	89 10		 mov	 DWORD PTR [eax], edx

; 1018 :         return _Op._Transfer_before(_Where);

  00073	8b c2		 mov	 eax, edx

; 1019 :     }

  00075	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00078	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007f	59		 pop	 ecx
  00080	5e		 pop	 esi
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 08 00	 ret	 8
$LN61@Emplace:

; 1013 :             _Xlength_error("list too long");

  00087	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  0008c	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN59@Emplace:
  00091	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Emplace@ABUSChannel@CServerStateChecker@@@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@QAU21@ABUSChannel@CServerStateChecker@@@Z$1:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Op$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Emplace@ABUSChannel@CServerStateChecker@@@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@QAU21@ABUSChannel@CServerStateChecker@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace@ABUSChannel@CServerStateChecker@@@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@QAU21@ABUSChannel@CServerStateChecker@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace@ABUSChannel@CServerStateChecker@@@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@1@QAU21@ABUSChannel@CServerStateChecker@@@Z ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Emplace<CServerStateChecker::SChannel const &>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@YAPAV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@YAPAV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >, COMDAT
; __Val$ = ecx

; 281  :     return __builtin_addressof(_Val);

  00000	8b c1		 mov	 eax, ecx

; 282  : }

  00002	c3		 ret	 0
??$addressof@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@@std@@YAPAV?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >,std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,1>::_Compressed_pair<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >,std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,1><>, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1376 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00006	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1376 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  0000f	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >,std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,1>::_Compressed_pair<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >,std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@$$CBUSChannel@CServerStateChecker@@@std@@YAPBUSChannel@CServerStateChecker@@ABU12@@Z
_TEXT	SEGMENT
??$addressof@$$CBUSChannel@CServerStateChecker@@@std@@YAPBUSChannel@CServerStateChecker@@ABU12@@Z PROC ; std::addressof<CServerStateChecker::SChannel const >, COMDAT
; __Val$ = ecx

; 281  :     return __builtin_addressof(_Val);

  00000	8b c1		 mov	 eax, ecx

; 282  : }

  00002	c3		 ret	 0
??$addressof@$$CBUSChannel@CServerStateChecker@@@std@@YAPBUSChannel@CServerStateChecker@@ABU12@@Z ENDP ; std::addressof<CServerStateChecker::SChannel const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@USChannel@CServerStateChecker@@@std@@YAPAUSChannel@CServerStateChecker@@AAU12@@Z
_TEXT	SEGMENT
??$addressof@USChannel@CServerStateChecker@@@std@@YAPAUSChannel@CServerStateChecker@@AAU12@@Z PROC ; std::addressof<CServerStateChecker::SChannel>, COMDAT
; __Val$ = ecx

; 281  :     return __builtin_addressof(_Val);

  00000	8b c1		 mov	 eax, ecx

; 282  : }

  00002	c3		 ret	 0
??$addressof@USChannel@CServerStateChecker@@@std@@YAPAUSChannel@CServerStateChecker@@AAU12@@Z ENDP ; std::addressof<CServerStateChecker::SChannel>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Construct_in_place@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@0@Z
_TEXT	SEGMENT
??$_Construct_in_place@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_List_node<CServerStateChecker::SChannel,void *> *,std::_List_node<CServerStateChecker::SChannel,void *> * &>, COMDAT
; __Obj$ = ecx
; _<_Args_0>$ = edx

; 225  : #if _HAS_CXX20
; 226  :     if (_STD is_constant_evaluated()) {
; 227  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 228  :     } else
; 229  : #endif // _HAS_CXX20
; 230  :     {
; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
; 232  :     }
; 233  : }

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	89 01		 mov	 DWORD PTR [ecx], eax
  00004	c3		 ret	 0
??$_Construct_in_place@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_List_node<CServerStateChecker::SChannel,void *> *,std::_List_node<CServerStateChecker::SChannel,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??$_Freenode0@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@?$_List_node@USChannel@CServerStateChecker@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
??$_Freenode0@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@?$_List_node@USChannel@CServerStateChecker@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAU01@@Z PROC ; std::_List_node<CServerStateChecker::SChannel,void *>::_Freenode0<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00000	6a 14		 push	 20			; 00000014H
  00002	52		 push	 edx
  00003	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00008	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 314  :     }

  0000b	c3		 ret	 0
??$_Freenode0@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@?$_List_node@USChannel@CServerStateChecker@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAU01@@Z ENDP ; std::_List_node<CServerStateChecker::SChannel,void *>::_Freenode0<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@QAU32@@Z
_TEXT	SEGMENT
__Insert_before$ = 8					; size = 4
?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@QAU32@@Z PROC ; std::_List_node_emplace_op2<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::_Transfer_before, COMDAT
; _this$ = ecx

; 598  :     pointer _Transfer_before(const pointer _Insert_before) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 599  :         const pointer _Insert_after = _Insert_before->_Prev;
; 600  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR __Insert_before$[ebp]
  0000a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000d	89 30		 mov	 DWORD PTR [eax], esi

; 601  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  0000f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00012	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 602  :         const auto _Result    = this->_Ptr;

  00015	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 603  :         this->_Ptr            = pointer{};

  00018	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 604  :         _Insert_before->_Prev = _Result;

  0001f	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 605  :         _Insert_after->_Next  = _Result;

  00022	89 02		 mov	 DWORD PTR [edx], eax

; 606  :         return _Result;

  00024	5e		 pop	 esi

; 607  :     }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?_Transfer_before@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@QAU32@@Z ENDP ; std::_List_node_emplace_op2<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::_Transfer_before
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_List_node_emplace_op2<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN11@List_node_

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 14		 push	 20			; 00000014H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN11@List_node_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 593  :     }

  00012	c3		 ret	 0
??1?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_node_emplace_op2<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::~_List_node_emplace_op2<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??0?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ PROC ; std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >, COMDAT
; _this$ = ecx

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@std@@QAE@XZ ENDP ; std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ?max_size@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QBEIXZ PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::max_size, COMDAT
; _this$dead$ = ecx

; 1190 :         return (_STD min)(

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 1191 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alnode_traits::max_size(_Getal()));
; 1192 :     }

  00005	c3		 ret	 0
?max_size@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@QBEIXZ ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@QAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@QAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::deallocate, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx

; 255  :         ::operator delete(_Ptr, _Bytes);

  00000	6a 14		 push	 20			; 00000014H
  00002	52		 push	 edx
  00003	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00008	83 c4 08	 add	 esp, 8

; 660  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 661  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 662  :         if (_STD is_constant_evaluated()) {
; 663  :             _Al.deallocate(_Ptr, _Count);
; 664  :         } else
; 665  : #endif // _HAS_CXX20
; 666  :         {
; 667  :             (void) _Al;
; 668  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);
; 669  :         }
; 670  :     }

  0000b	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@QAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >, COMDAT
; _this$ = ecx

; 819  :     constexpr allocator() noexcept {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 14		 push	 20			; 00000014H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1018 :             _Al.deallocate(_Ptr, 1);
; 1019 :         }
; 1020 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ?_Getal@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@ABEABV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@ABEABV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@XZ PROC ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Getal, COMDAT
; _this$ = ecx

; 1849 :         return _Mypair._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 1850 :     }

  00002	c3		 ret	 0
?_Getal@?$list@USChannel@CServerStateChecker@@V?$allocator@USChannel@CServerStateChecker@@@std@@@std@@ABEABV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@XZ ENDP ; std::list<CServerStateChecker::SChannel,std::allocator<CServerStateChecker::SChannel> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@@Z
_TEXT	SEGMENT
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::max_size, COMDAT
; ___formal$dead$ = ecx

; 694  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 695  :     }

  00005	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXQAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$dead$ = 12					; size = 4
?deallocate@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXQAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z PROC ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::deallocate, COMDAT
; _this$dead$ = ecx

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 255  :         ::operator delete(_Ptr, _Bytes);

  00003	6a 14		 push	 20			; 00000014H
  00005	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00008	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);
; 831  :     }

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
?deallocate@?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@QAEXQAU?$_List_node@USChannel@CServerStateChecker@@PAX@2@I@Z ENDP ; std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >,std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1388 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1389 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@V?$_List_val@U?$_List_simple_types@USChannel@CServerStateChecker@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> >,std::_List_val<std::_List_simple_types<CServerStateChecker::SChannel> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??$_Freenode@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@?$_List_node@USChannel@CServerStateChecker@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
??$_Freenode@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@?$_List_node@USChannel@CServerStateChecker@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAU01@@Z PROC ; std::_List_node<CServerStateChecker::SChannel,void *>::_Freenode<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00000	6a 14		 push	 20			; 00000014H
  00002	52		 push	 edx
  00003	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00008	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 320  :     }

  0000b	c3		 ret	 0
??$_Freenode@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@?$_List_node@USChannel@CServerStateChecker@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@PAU01@@Z ENDP ; std::_List_node<CServerStateChecker::SChannel,void *>::_Freenode<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@ABUSChannel@CServerStateChecker@@@std@@YAABUSChannel@CServerStateChecker@@ABU12@@Z
_TEXT	SEGMENT
??$forward@ABUSChannel@CServerStateChecker@@@std@@YAABUSChannel@CServerStateChecker@@ABU12@@Z PROC ; std::forward<CServerStateChecker::SChannel const &>, COMDAT
; __Arg$ = ecx

; 1426 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1427 : }

  00002	c3		 ret	 0
??$forward@ABUSChannel@CServerStateChecker@@@std@@YAABUSChannel@CServerStateChecker@@ABU12@@Z ENDP ; std::forward<CServerStateChecker::SChannel const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??$?0ABUSChannel@CServerStateChecker@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@ABUSChannel@CServerStateChecker@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Al_$ = 8						; size = 4
_<_Vals_0>$ = 12					; size = 4
??$?0ABUSChannel@CServerStateChecker@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@ABUSChannel@CServerStateChecker@@@Z PROC ; std::_List_node_emplace_op2<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::_List_node_emplace_op2<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > ><CServerStateChecker::SChannel const &>, COMDAT
; _this$ = ecx

; 584  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0ABUSChannel@CServerStateChecker@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@ABUSChannel@CServerStateChecker@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00029	8b 45 08	 mov	 eax, DWORD PTR __Al_$[ebp]
  0002c	89 06		 mov	 DWORD PTR [esi], eax
  0002e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 584  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0003c	6a 14		 push	 20			; 00000014H

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0003e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 77   :         return ::operator new(_Bytes);

  00045	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR _<_Vals_0>$[ebp]

; 77   :         return ::operator new(_Bytes);

  0004d	83 c4 04	 add	 esp, 4

; 1013 :         _Ptr = _Al.allocate(1);

  00050	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00053	f3 0f 7e 01	 movq	 xmm0, QWORD PTR [ecx]
  00057	66 0f d6 40 08	 movq	 QWORD PTR [eax+8], xmm0
  0005c	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0005f	89 48 10	 mov	 DWORD PTR [eax+16], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 587  :     }

  00062	8b c6		 mov	 eax, esi
  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5e		 pop	 esi
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0ABUSChannel@CServerStateChecker@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@ABUSChannel@CServerStateChecker@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?0ABUSChannel@CServerStateChecker@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@ABUSChannel@CServerStateChecker@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0ABUSChannel@CServerStateChecker@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@ABUSChannel@CServerStateChecker@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0ABUSChannel@CServerStateChecker@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@ABUSChannel@CServerStateChecker@@@Z ENDP ; std::_List_node_emplace_op2<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::_List_node_emplace_op2<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > ><CServerStateChecker::SChannel const &>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
;	COMDAT ??$addressof@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
??$addressof@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_List_node<CServerStateChecker::SChannel,void *> *>, COMDAT
; __Val$ = ecx

; 281  :     return __builtin_addressof(_Val);

  00000	8b c1		 mov	 eax, ecx

; 282  : }

  00002	c3		 ret	 0
??$addressof@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_List_node<CServerStateChecker::SChannel,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@AAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
??$forward@AAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_List_node<CServerStateChecker::SChannel,void *> * &>, COMDAT
; __Arg$ = ecx

; 1426 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1427 : }

  00002	c3		 ret	 0
??$forward@AAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_List_node<CServerStateChecker::SChannel,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$construct_at@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@AAPAU12@$0A@@std@@YAPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@QAPAU10@AAPAU10@@Z
_TEXT	SEGMENT
??$construct_at@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@AAPAU12@$0A@@std@@YAPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@QAPAU10@AAPAU10@@Z PROC ; std::construct_at<std::_List_node<CServerStateChecker::SChannel,void *> *,std::_List_node<CServerStateChecker::SChannel,void *> * &,0>, COMDAT
; __Location$ = ecx
; _<_Args_0>$ = edx

; 218  :     _MSVC_CONSTEXPR return ::new (_Voidify_iter(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	89 01		 mov	 DWORD PTR [ecx], eax
  00004	8b c1		 mov	 eax, ecx

; 219  : }

  00006	c3		 ret	 0
??$construct_at@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@AAPAU12@$0A@@std@@YAPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@QAPAU10@AAPAU10@@Z ENDP ; std::construct_at<std::_List_node<CServerStateChecker::SChannel,void *> *,std::_List_node<CServerStateChecker::SChannel,void *> * &,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Voidify_iter@PAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAPAXPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@@Z
_TEXT	SEGMENT
??$_Voidify_iter@PAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAPAXPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@@Z PROC ; std::_Voidify_iter<std::_List_node<CServerStateChecker::SChannel,void *> * *>, COMDAT
; __It$ = ecx

; 201  :     if constexpr (is_pointer_v<_Iter>) {
; 202  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  00000	8b c1		 mov	 eax, ecx

; 203  :     } else {
; 204  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 205  :     }
; 206  : }

  00002	c3		 ret	 0
??$_Voidify_iter@PAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAPAXPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@@Z ENDP ; std::_Voidify_iter<std::_List_node<CServerStateChecker::SChannel,void *> * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAXAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@@Z
_TEXT	SEGMENT
??$_Destroy_in_place@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAXAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_List_node<CServerStateChecker::SChannel,void *> *>, COMDAT
; __Obj$dead$ = ecx

; 295  :     if constexpr (is_array_v<_Ty>) {
; 296  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 297  :     } else {
; 298  :         _Obj.~_Ty();
; 299  :     }
; 300  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_in_place@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAXAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_List_node<CServerStateChecker::SChannel,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Construct_in_place@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
??$_Construct_in_place@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_List_node<CServerStateChecker::SChannel,void *> *,std::_List_node<CServerStateChecker::SChannel,void *> * const &>, COMDAT
; __Obj$ = ecx
; _<_Args_0>$ = edx

; 225  : #if _HAS_CXX20
; 226  :     if (_STD is_constant_evaluated()) {
; 227  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 228  :     } else
; 229  : #endif // _HAS_CXX20
; 230  :     {
; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
; 232  :     }
; 233  : }

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	89 01		 mov	 DWORD PTR [ecx], eax
  00004	c3		 ret	 0
??$_Construct_in_place@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_List_node<CServerStateChecker::SChannel,void *> *,std::_List_node<CServerStateChecker::SChannel,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$destroy@USChannel@CServerStateChecker@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@QAUSChannel@CServerStateChecker@@@Z
_TEXT	SEGMENT
??$destroy@USChannel@CServerStateChecker@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@QAUSChannel@CServerStateChecker@@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::destroy<CServerStateChecker::SChannel>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$dead$ = edx

; 686  : #if _HAS_CXX20
; 687  :         _STD destroy_at(_Ptr);
; 688  : #else // _HAS_CXX20
; 689  :         _Ptr->~_Uty();
; 690  : #endif // _HAS_CXX20
; 691  :     }

  00000	c2 00 00	 ret	 0
??$destroy@USChannel@CServerStateChecker@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@QAUSChannel@CServerStateChecker@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::destroy<CServerStateChecker::SChannel>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXXZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::_Allocate, COMDAT
; _this$ = ecx

; 1011 :     _CONSTEXPR20 void _Allocate() { // disengage *this, then allocate a new memory block

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 77   :         return ::operator new(_Bytes);

  00003	6a 14		 push	 20			; 00000014H

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00005	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 77   :         return ::operator new(_Bytes);

  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 1013 :         _Ptr = _Al.allocate(1);

  00014	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00017	5e		 pop	 esi

; 1014 :     }

  00018	c3		 ret	 0
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAEXXZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@@Z
_TEXT	SEGMENT
__Al_$ = 8						; size = 4
??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@@Z PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >, COMDAT
; _this$ = ecx

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Al_$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b c1		 mov	 eax, ecx
  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
??0?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@@Z ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::_Alloc_construct_ptr<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$construct@USChannel@CServerStateChecker@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@QAUSChannel@CServerStateChecker@@ABU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@USChannel@CServerStateChecker@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@QAUSChannel@CServerStateChecker@@ABU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::construct<CServerStateChecker::SChannel,CServerStateChecker::SChannel const &>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 674  : #if _HAS_CXX20
; 675  :         if (_STD is_constant_evaluated()) {
; 676  :             _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 677  :         } else
; 678  : #endif // _HAS_CXX20
; 679  :         {
; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00003	8b 45 08	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0000a	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  0000e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00011	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 681  :         }
; 682  :     }

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??$construct@USChannel@CServerStateChecker@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@1@QAUSChannel@CServerStateChecker@@ABU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_List_node<CServerStateChecker::SChannel,void *> > >::construct<CServerStateChecker::SChannel,CServerStateChecker::SChannel const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\type_traits
;	COMDAT ??$forward@ABQAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAABQAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
??$forward@ABQAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAABQAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@ABQAU10@@Z PROC ; std::forward<std::_List_node<CServerStateChecker::SChannel,void *> * const &>, COMDAT
; __Arg$ = ecx

; 1426 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1427 : }

  00002	c3		 ret	 0
??$forward@ABQAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@@std@@YAABQAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@ABQAU10@@Z ENDP ; std::forward<std::_List_node<CServerStateChecker::SChannel,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$construct_at@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@ABQAU12@$0A@@std@@YAPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@QAPAU10@ABQAU10@@Z
_TEXT	SEGMENT
??$construct_at@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@ABQAU12@$0A@@std@@YAPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@QAPAU10@ABQAU10@@Z PROC ; std::construct_at<std::_List_node<CServerStateChecker::SChannel,void *> *,std::_List_node<CServerStateChecker::SChannel,void *> * const &,0>, COMDAT
; __Location$ = ecx
; _<_Args_0>$ = edx

; 218  :     _MSVC_CONSTEXPR return ::new (_Voidify_iter(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	89 01		 mov	 DWORD PTR [ecx], eax
  00004	8b c1		 mov	 eax, ecx

; 219  : }

  00006	c3		 ret	 0
??$construct_at@PAU?$_List_node@USChannel@CServerStateChecker@@PAX@std@@ABQAU12@$0A@@std@@YAPAPAU?$_List_node@USChannel@CServerStateChecker@@PAX@0@QAPAU10@ABQAU10@@Z ENDP ; std::construct_at<std::_List_node<CServerStateChecker::SChannel,void *> *,std::_List_node<CServerStateChecker::SChannel,void *> * const &,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$destroy_at@USChannel@CServerStateChecker@@@std@@YAXQAUSChannel@CServerStateChecker@@@Z
_TEXT	SEGMENT
??$destroy_at@USChannel@CServerStateChecker@@@std@@YAXQAUSChannel@CServerStateChecker@@@Z PROC ; std::destroy_at<CServerStateChecker::SChannel>, COMDAT
; __Location$dead$ = ecx

; 305  : #if _HAS_CXX20
; 306  :     if constexpr (is_array_v<_Ty>) {
; 307  :         _Destroy_range(_STD begin(*_Location), _STD end(*_Location));
; 308  :     } else
; 309  : #endif // _HAS_CXX20
; 310  :     {
; 311  :         _Location->~_Ty();
; 312  :     }
; 313  : }

  00000	c2 00 00	 ret	 0
??$destroy_at@USChannel@CServerStateChecker@@@std@@YAXQAUSChannel@CServerStateChecker@@@Z ENDP ; std::destroy_at<CServerStateChecker::SChannel>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$construct_at@USChannel@CServerStateChecker@@ABU12@$0A@@std@@YAPAUSChannel@CServerStateChecker@@QAU12@ABU12@@Z
_TEXT	SEGMENT
??$construct_at@USChannel@CServerStateChecker@@ABU12@$0A@@std@@YAPAUSChannel@CServerStateChecker@@QAU12@ABU12@@Z PROC ; std::construct_at<CServerStateChecker::SChannel,CServerStateChecker::SChannel const &,0>, COMDAT
; __Location$ = ecx
; _<_Args_0>$ = edx

; 218  :     _MSVC_CONSTEXPR return ::new (_Voidify_iter(_Location)) _Ty(_STD forward<_Types>(_Args)...);

  00000	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  00004	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00008	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0000b	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0000e	8b c1		 mov	 eax, ecx

; 219  : }

  00010	c3		 ret	 0
??$construct_at@USChannel@CServerStateChecker@@ABU12@$0A@@std@@YAPAUSChannel@CServerStateChecker@@QAU12@ABU12@@Z ENDP ; std::construct_at<CServerStateChecker::SChannel,CServerStateChecker::SChannel const &,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Voidify_iter@PAUSChannel@CServerStateChecker@@@std@@YAPAXPAUSChannel@CServerStateChecker@@@Z
_TEXT	SEGMENT
??$_Voidify_iter@PAUSChannel@CServerStateChecker@@@std@@YAPAXPAUSChannel@CServerStateChecker@@@Z PROC ; std::_Voidify_iter<CServerStateChecker::SChannel *>, COMDAT
; __It$ = ecx

; 201  :     if constexpr (is_pointer_v<_Iter>) {
; 202  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  00000	8b c1		 mov	 eax, ecx

; 203  :     } else {
; 204  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 205  :     }
; 206  : }

  00002	c3		 ret	 0
??$_Voidify_iter@PAUSChannel@CServerStateChecker@@@std@@YAPAXPAUSChannel@CServerStateChecker@@@Z ENDP ; std::_Voidify_iter<CServerStateChecker::SChannel *>
_TEXT	ENDS
END
