; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

	TITLE	e:\metin2_server\solwaynesf v6\clientvs22\vs_files\userinterface\distribute\pythonexceptionsender.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R2CPythonExceptionSender@@8			; CPythonExceptionSender::`RTTI Base Class Array'
PUBLIC	??_R2IPythonExceptionSender@@8			; IPythonExceptionSender::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPythonExceptionSender@@8		; CPythonExceptionSender::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IPythonExceptionSender@@8		; IPythonExceptionSender::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3CPythonExceptionSender@@8			; CPythonExceptionSender::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVCPythonExceptionSender@@@8		; CPythonExceptionSender `RTTI Type Descriptor'
PUBLIC	??_R3IPythonExceptionSender@@8			; IPythonExceptionSender::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVIPythonExceptionSender@@@8		; IPythonExceptionSender `RTTI Type Descriptor'
PUBLIC	??_R4CPythonExceptionSender@@6B@		; CPythonExceptionSender::`RTTI Complete Object Locator'
PUBLIC	??_R4IPythonExceptionSender@@6B@		; IPythonExceptionSender::`RTTI Complete Object Locator'
PUBLIC	??_7IPythonExceptionSender@@6B@			; IPythonExceptionSender::`vftable'
PUBLIC	??_7CPythonExceptionSender@@6B@			; CPythonExceptionSender::`vftable'
;	COMDAT ??_7CPythonExceptionSender@@6B@
CONST	SEGMENT
??_7CPythonExceptionSender@@6B@ DD FLAT:??_R4CPythonExceptionSender@@6B@ ; CPythonExceptionSender::`vftable'
	DD	FLAT:?Send@CPythonExceptionSender@@UAEXXZ
	DD	FLAT:??_ECPythonExceptionSender@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7IPythonExceptionSender@@6B@
CONST	SEGMENT
??_7IPythonExceptionSender@@6B@ DD FLAT:??_R4IPythonExceptionSender@@6B@ ; IPythonExceptionSender::`vftable'
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_R4IPythonExceptionSender@@6B@
rdata$r	SEGMENT
??_R4IPythonExceptionSender@@6B@ DD 00H			; IPythonExceptionSender::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVIPythonExceptionSender@@@8
	DD	FLAT:??_R3IPythonExceptionSender@@8
rdata$r	ENDS
;	COMDAT ??_R4CPythonExceptionSender@@6B@
rdata$r	SEGMENT
??_R4CPythonExceptionSender@@6B@ DD 00H			; CPythonExceptionSender::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPythonExceptionSender@@@8
	DD	FLAT:??_R3CPythonExceptionSender@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVIPythonExceptionSender@@@8
data$rs	SEGMENT
??_R0?AVIPythonExceptionSender@@@8 DD FLAT:??_7type_info@@6B@ ; IPythonExceptionSender `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVIPythonExceptionSender@@', 00H
data$rs	ENDS
;	COMDAT ??_R3IPythonExceptionSender@@8
rdata$r	SEGMENT
??_R3IPythonExceptionSender@@8 DD 00H			; IPythonExceptionSender::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IPythonExceptionSender@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPythonExceptionSender@@@8
data$rs	SEGMENT
??_R0?AVCPythonExceptionSender@@@8 DD FLAT:??_7type_info@@6B@ ; CPythonExceptionSender `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPythonExceptionSender@@', 00H
data$rs	ENDS
;	COMDAT ??_R3CPythonExceptionSender@@8
rdata$r	SEGMENT
??_R3CPythonExceptionSender@@8 DD 00H			; CPythonExceptionSender::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CPythonExceptionSender@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IPythonExceptionSender@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IPythonExceptionSender@@8 DD FLAT:??_R0?AVIPythonExceptionSender@@@8 ; IPythonExceptionSender::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IPythonExceptionSender@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CPythonExceptionSender@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPythonExceptionSender@@8 DD FLAT:??_R0?AVCPythonExceptionSender@@@8 ; CPythonExceptionSender::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPythonExceptionSender@@8
rdata$r	ENDS
;	COMDAT ??_R2IPythonExceptionSender@@8
rdata$r	SEGMENT
??_R2IPythonExceptionSender@@8 DD FLAT:??_R1A@?0A@EA@IPythonExceptionSender@@8 ; IPythonExceptionSender::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R2CPythonExceptionSender@@8
rdata$r	SEGMENT
??_R2CPythonExceptionSender@@8 DD FLAT:??_R1A@?0A@EA@CPythonExceptionSender@@8 ; CPythonExceptionSender::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IPythonExceptionSender@@8
PUBLIC	??1CPythonExceptionSender@@UAE@XZ		; CPythonExceptionSender::~CPythonExceptionSender
PUBLIC	??1IPythonExceptionSender@@QAE@XZ		; IPythonExceptionSender::~IPythonExceptionSender
PUBLIC	??0IPythonExceptionSender@@QAE@XZ		; IPythonExceptionSender::IPythonExceptionSender
PUBLIC	??_GCPythonExceptionSender@@UAEPAXI@Z		; CPythonExceptionSender::`scalar deleting destructor'
PUBLIC	??0CPythonExceptionSender@@QAE@XZ		; CPythonExceptionSender::CPythonExceptionSender
PUBLIC	?Send@CPythonExceptionSender@@UAEXXZ		; CPythonExceptionSender::Send
EXTRN	??_ECPythonExceptionSender@@UAEPAXI@Z:PROC	; CPythonExceptionSender::`vector deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CPythonExceptionSender@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CPythonExceptionSender@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CPythonExceptionSender@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CPythonExceptionSender@@QAE@XZ$0
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonExceptionSender.cpp
;	COMDAT ?Send@CPythonExceptionSender@@UAEXXZ
_TEXT	SEGMENT
?Send@CPythonExceptionSender@@UAEXXZ PROC		; CPythonExceptionSender::Send, COMDAT
; _this$ = ecx

; 6    : 	//DWORD dwCRC32 = GetCaseCRC32(m_strExceptionString.c_str(), m_strExceptionString.length());
; 7    : 	//if (m_kSet_dwSendedExceptionCRC.end() != m_kSet_dwSendedExceptionCRC.find(dwCRC32))
; 8    : 	//	return;
; 9    : 
; 10   : 	//TraceError("%s", m_strExceptionString.c_str());
; 11   : 
; 12   : 	//SOCKET s = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
; 13   : 
; 14   : 	//if (s==INVALID_SOCKET)
; 15   : 	//{
; 16   : 	//	Tracef(" CPythonExceptionSender::Send() - Invalid Socket");
; 17   : 	//}
; 18   : 
; 19   : 
; 20   : 	//DWORD arg = 1;
; 21   : 	//ioctlsocket(s, FIONBIO, &arg);	// Non-blocking mode
; 22   : 
; 23   : 	//char szServerAddr[256];
; 24   : 	//int  nServerPort;
; 25   : 	//strncpy(szServerAddr, "211.105.222.20", sizeof(szServerAddr)-1);
; 26   : 
; 27   : 	//nServerPort=LocaleService_GetPythonErrorReportPort();
; 28   : 	//
; 29   : 	//sockaddr_in sa;
; 30   : 	//sa.sin_family = AF_INET;
; 31   : 	//sa.sin_port = htons(nServerPort);
; 32   : 	//sa.sin_addr.s_addr = inet_addr(szServerAddr);
; 33   : 	//if (connect(s,(sockaddr*)&sa,sizeof(sa)))
; 34   : 	//	return;
; 35   : 
; 36   : 	//int number_ticket=0;
; 37   : 	//if (recv(s,(char*)&number_ticket,4,0))
; 38   : 	//	return;
; 39   : 
; 40   : 	//int length=m_strExceptionString.length();
; 41   : 	//int total=0;
; 42   : 	//int ret=0;
; 43   : 
; 44   : 	//int count = 100;
; 45   : 	//while(count--)
; 46   : 	//{
; 47   : 	//	// send plain text
; 48   : 	//	ret = send(s,(char*)(&m_strExceptionString[0])+total,length-total,0);
; 49   : 	//	
; 50   : 	//	if (ret<0)
; 51   : 	//		break;
; 52   : 
; 53   : 	//	total+=ret;
; 54   : 	//	if (total>=length)
; 55   : 	//		break;
; 56   : 	//}
; 57   : 	//closesocket(s);
; 58   : 
; 59   : 	//m_kSet_dwSendedExceptionCRC.insert(dwCRC32);
; 60   : }

  00000	c2 00 00	 ret	 0
?Send@CPythonExceptionSender@@UAEXXZ ENDP		; CPythonExceptionSender::Send
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonExceptionSender.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonExceptionSender.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonExceptionSender.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonExceptionSender.cpp
;	COMDAT ??0CPythonExceptionSender@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CPythonExceptionSender@@QAE@XZ PROC			; CPythonExceptionSender::CPythonExceptionSender, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CPythonExceptionSender@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002c	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2339 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0002f	0f 11 47 04	 movups	 XMMWORD PTR [edi+4], xmm0

; 4995 :         _My_data._Mysize = 0;

  00033	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 4996 :         _My_data._Myres  = _BUF_SIZE - 1;

  0003a	c7 47 18 0f 00
	00 00		 mov	 DWORD PTR [edi+24], 15	; 0000000fH

; 4997 :         _My_data._Activate_SSO_buffer();
; 4998 : 
; 4999 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5000 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00041	c6 47 04 00	 mov	 BYTE PTR [edi+4], 0
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonExceptionSender.cpp

; 63   : {

  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	8d 77 1c	 lea	 esi, DWORD PTR [edi+28]
  0004f	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CPythonExceptionSender@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00055	6a 14		 push	 20			; 00000014H
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonExceptionSender.cpp

; 63   : {

  00057	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0005a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00060	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00067	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006c	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0006f	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00071	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00074	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00077	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0007d	89 06		 mov	 DWORD PTR [esi], eax
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonExceptionSender.cpp

; 64   : }

  0007f	8b c7		 mov	 eax, edi
  00081	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00084	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008b	59		 pop	 ecx
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CPythonExceptionSender@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1IPythonExceptionSender@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0CPythonExceptionSender@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CPythonExceptionSender@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CPythonExceptionSender@@QAE@XZ ENDP			; CPythonExceptionSender::CPythonExceptionSender
; Function compile flags: /Ogtp
;	COMDAT ??_GCPythonExceptionSender@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPythonExceptionSender@@UAEPAXI@Z PROC		; CPythonExceptionSender::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CPythonExceptionSender@@UAE@XZ ; CPythonExceptionSender::~CPythonExceptionSender
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCPythonExceptionSender@@UAEPAXI@Z ENDP		; CPythonExceptionSender::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??0IPythonExceptionSender@@QAE@XZ
_TEXT	SEGMENT
??0IPythonExceptionSender@@QAE@XZ PROC			; IPythonExceptionSender::IPythonExceptionSender, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7IPythonExceptionSender@@6B@
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 2339 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00009	0f 11 41 04	 movups	 XMMWORD PTR [ecx+4], xmm0

; 4995 :         _My_data._Mysize = 0;

  0000d	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00014	8b c1		 mov	 eax, ecx

; 4996 :         _My_data._Myres  = _BUF_SIZE - 1;

  00016	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH

; 4997 :         _My_data._Activate_SSO_buffer();
; 4998 : 
; 4999 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5000 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0001d	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  00021	c3		 ret	 0
??0IPythonExceptionSender@@QAE@XZ ENDP			; IPythonExceptionSender::IPythonExceptionSender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1IPythonExceptionSender@@QAE@XZ
_TEXT	SEGMENT
??1IPythonExceptionSender@@QAE@XZ PROC			; IPythonExceptionSender::~IPythonExceptionSender, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5008 :         if (_My_data._Large_string_engaged()) {

  00009	72 28		 jb	 SHORT $LN15@IPythonExc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5013 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000e	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 12		 jb	 SHORT $LN27@IPythonExc

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	77 20		 ja	 SHORT $LN24@IPythonExc

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00027	8b c2		 mov	 eax, edx
$LN27@IPythonExc:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8
$LN15@IPythonExc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :         _My_data._Mysize = 0;

  00033	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 5017 :         _My_data._Myres  = _BUF_SIZE - 1;

  0003a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 5018 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5019 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00041	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00045	5e		 pop	 esi
  00046	c3		 ret	 0
$LN24@IPythonExc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00047	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN33@IPythonExc:
  0004c	cc		 int	 3
??1IPythonExceptionSender@@QAE@XZ ENDP			; IPythonExceptionSender::~IPythonExceptionSender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonExceptionSender.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonExceptionSender.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonExceptionSender.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonExceptionSender.cpp
;	COMDAT ??1CPythonExceptionSender@@UAE@XZ
_TEXT	SEGMENT
??1CPythonExceptionSender@@UAE@XZ PROC			; CPythonExceptionSender::~CPythonExceptionSender, COMDAT
; _this$ = ecx

; 66   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 67   : }

  00004	8d 77 1c	 lea	 esi, DWORD PTR [edi+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00007	8b ce		 mov	 ecx, esi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonExceptionSender.cpp

; 66   : {

  00009	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CPythonExceptionSender@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	ff 70 04	 push	 DWORD PTR [eax+4]
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@KPAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@K@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@KPAX@std@@@1@PAU?$_Tree_node@KPAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<unsigned long> >::_Erase_tree<std::allocator<std::_Tree_node<unsigned long,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0001a	6a 14		 push	 20			; 00000014H
  0001c	ff 36		 push	 DWORD PTR [esi]
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00023	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00026	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00029	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5008 :         if (_My_data._Large_string_engaged()) {

  0002c	72 28		 jb	 SHORT $LN72@CPythonExc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5013 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00031	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00032	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00038	72 12		 jb	 SHORT $LN84@CPythonExc

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0003d	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00040	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00042	83 c0 fc	 add	 eax, -4			; fffffffcH
  00045	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00048	77 21		 ja	 SHORT $LN81@CPythonExc

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004a	8b c2		 mov	 eax, edx
$LN84@CPythonExc:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0004c	51		 push	 ecx
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00053	83 c4 08	 add	 esp, 8
$LN72@CPythonExc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :         _My_data._Mysize = 0;

  00056	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 5017 :         _My_data._Myres  = _BUF_SIZE - 1;

  0005d	c7 47 18 0f 00
	00 00		 mov	 DWORD PTR [edi+24], 15	; 0000000fH

; 5018 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5019 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00064	c6 47 04 00	 mov	 BYTE PTR [edi+4], 0
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
; File E:\Metin2_server\SolWayneSF v6\ClientVS22\source\UserInterface\PythonExceptionSender.cpp

; 67   : }

  0006a	c3		 ret	 0
$LN81@CPythonExc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0006b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN90@CPythonExc:
  00070	cc		 int	 3
??1CPythonExceptionSender@@UAE@XZ ENDP			; CPythonExceptionSender::~CPythonExceptionSender
_TEXT	ENDS
END
